{"version":3,"sources":["db.js","components/Attribute.js","components/Buttons.js","components/Formular.js","components/CSVimport.js","components/MainForm.js","components/MainFormDialogContainer.js","components/TableWrapper.js","App.js","serviceWorker.js","index.js"],"names":["openDatabase","Promise","resolve","reject","request","indexedDB","open","onupgradeneeded","event","target","result","createObjectStore","keyPath","autoIncrement","onsuccess","db","onerror","error","addSubmission","submission","transaction","objectStore","add","getAllSubmissions","getAll","useStyles","makeStyles","theme","title","fontWeight","fontSize","marginBottom","Attribute","value","setValue","name","disabled","classes","Typography","variant","className","TextField","required","fullWidth","onChange","e","newValue","Math","max","parseInt","toString","slice","margin","inputProps","style","textAlign","button","spacing","padding","textTransform","buttonsContainer","display","flexDirection","alignItems","buttonContainer","marginTop","Buttons","handleSubmit","downloadCombinedTodayData","downloadCombinedData","Box","Button","color","endIcon","onClick","startIcon","textField","SimpleDialog","props","ref","useState","streckennummer","setStreckennummer","km","setKm","met","setMet","seite","setSeite","sonstiges","setSonstiges","mastnummer","setMastnummer","selectedVermarkungstrager","setselectedVermarkungstrager","sonstiges2","setSonstiges2","gvp","setGVP","photo","setPhoto","onClose","selectedValue","successMessage","setSuccessMessage","errorMessage","setErrorMessage","submissions","setSubmissions","setSuccessOpen","currentDate","setCurrentDate","useEffect","Date","toISOString","reff","useRef","vermarkungOptions","label","Dialog","justifyContent","maxWidth","border","borderRadius","boxShadow","marginRight","id","placeholder","marginLeft","FormControl","component","RadioGroup","row","FormControlLabel","control","Radio","InputLabelProps","width","InputLabel","Select","labelId","handleChange","map","option","MenuItem","key","el","current","type","accept","photoFile","files","handlePhotoChange","console","log","reader","FileReader","onload","base64Photo","quality","image","Image","src","canvas","document","createElement","ctx","getContext","height","drawImage","compressedPhoto","toDataURL","length","vermarkungLabel","find","newSubmission","then","data","catch","readAsDataURL","zip","JSZip","csvContent","entry","gvpInMeters","toLocaleString","minimumFractionDigits","join","file","forEach","index","filename","date","replace","base64Data","split","base64","generateAsync","content","url","window","URL","createObjectURL","link","href","download","setTimeout","click","todaySubmissions","filter","cur_date","Snackbar","autoHideDuration","reason","SnackbarContent","message","header","backgroundColor","palette","primary","main","common","white","background","paper","input","CSVimport","setShowTable","setImportData","setColNames","formOpen","setFormOpen","setFileSelected","invalidFileType","setInvalidFileType","Paper","elevation","htmlFor","Input","endsWith","Papa","parse","complete","at","Object","keys","dataRows","columnsToInclude","filteredDataRows","idx","filteredRow","Streckennummer","Mastnummer","col","encoding","handleCSVFile","CloudUpload","OpenInBrowser","MainForm","formData","setFormData","Met","state","kmValue","meterValue","Seite","handleInputChange","successSnackbar","errorSnackbar","aria-labelledby","MainFormDialogContainer","selectedRowData","React","setOpen","setSelectedValue","IconButton","aria-label","table","minWidth","tableHead","editButton","secondary","TableWrapper","importData","colNames","TableContainer","Table","TableHead","TableRow","TableCell","align","TableBody","root","flexWrap","clearIndexedDB","a","clear","App","showDownloadButton","setShowDownloadButton","showTable","clearDatabaseEvery2Weeks","now","nextMidnight","setHours","interval","intervalId","setInterval","clearInterval","classnames","columns","headerRow","column","convertToCSV","blob","Blob","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","StrictMode","getElementById","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f6c56263.chunk.js","sourcesContent":["const dbName = \"AußendienstDB\";\r\nconst storeName = \"submissions\";\r\n\r\nexport function openDatabase() {\r\n  return new Promise((resolve, reject) => {\r\n    const request = indexedDB.open(dbName, 1);\r\n\r\n    request.onupgradeneeded = (event) => {\r\n      const db = event.target.result;\r\n      db.createObjectStore(storeName, { keyPath: \"id\", autoIncrement: true });\r\n    };\r\n\r\n    request.onsuccess = (event) => {\r\n      const db = event.target.result;\r\n      resolve(db);\r\n    };\r\n\r\n    request.onerror = (event) => {\r\n      reject(event.target.error);\r\n    };\r\n  });\r\n}\r\n\r\nexport function addSubmission(db, submission) {\r\n  return new Promise((resolve, reject) => {\r\n    const transaction = db.transaction([storeName], \"readwrite\");\r\n    const store = transaction.objectStore(storeName);\r\n    const request = store.add(submission);\r\n\r\n    request.onsuccess = () => {\r\n      resolve();\r\n    };\r\n\r\n    request.onerror = () => {\r\n      reject(request.error);\r\n    };\r\n  });\r\n}\r\n\r\nexport function getAllSubmissions(db) {\r\n  return new Promise((resolve, reject) => {\r\n    const transaction = db.transaction([storeName], \"readonly\");\r\n    const store = transaction.objectStore(storeName);\r\n    const request = store.getAll();\r\n\r\n    request.onsuccess = () => {\r\n      resolve(request.result);\r\n    };\r\n\r\n    request.onerror = () => {\r\n      reject(request.error);\r\n    };\r\n  });\r\n}\r\n","import { TextField, Typography, makeStyles } from \"@material-ui/core\";\r\nimport React from \"react\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  title: {\r\n    fontWeight: \"bold\",\r\n    fontSize: \"1.2rem\",\r\n    marginBottom: \"5px\",\r\n  },\r\n}));\r\n\r\nconst Attribute = ({ value, setValue, name, disabled }) => {\r\n  const classes = useStyles();\r\n\r\n  const handleInputChange = (e) => {\r\n    let newValue = e.target.value;\r\n\r\n    // If the attribute is \"Streckennummer\", ensure it is a positive integer\r\n    if (name === \"Streckennummer\") {\r\n      newValue = Math.max(0, parseInt(newValue, 10)).toString().slice(0, 4);\r\n    }\r\n\r\n    // Update the state in the parent component\r\n    setValue(newValue);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Typography variant=\"h5\" className={classes.title}>\r\n        {name}\r\n      </Typography>\r\n      <TextField\r\n        required\r\n        disabled={disabled}\r\n        fullWidth\r\n        name={name}\r\n        value={value}\r\n        onChange={handleInputChange}\r\n        margin=\"normal\"\r\n        inputProps={{ style: { textAlign: \"center\" } }}\r\n      />\r\n      <br />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Attribute;\r\n","import { Box, Button } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport SendIcon from \"@material-ui/icons/Send\";\nimport CloudDownloadIcon from \"@material-ui/icons/CloudDownload\";\nimport React from \"react\";\n\nconst useStyles = makeStyles((theme) => ({\n  button: {\n    margin: theme.spacing(1),\n    padding: \"10px 20px\",\n    fontSize: \"1rem\",\n    textTransform: \"none\",\n  },\n  buttonsContainer: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n  buttonContainer: {\n    textAlign: \"center\",\n    marginTop: theme.spacing(2),\n  },\n}));\n\nconst Buttons = ({\n  handleSubmit,\n  downloadCombinedTodayData,\n  downloadCombinedData,\n}) => {\n  const classes = useStyles();\n\n  return (\n    <Box className={classes.buttonContainer}>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        className={classes.button}\n        endIcon={<SendIcon />}\n        onClick={handleSubmit}\n      >\n        Abspeichern\n      </Button>\n      <br />\n      <br />\n      <Box className={classes.buttonsContainer}>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          className={classes.button}\n          startIcon={<CloudDownloadIcon />}\n          onClick={() => downloadCombinedTodayData()}\n        >\n          Daten von heute herunterladen\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          className={classes.button}\n          startIcon={<CloudDownloadIcon />}\n          onClick={() => downloadCombinedData()}\n        >\n          Alle Daten herunterladen\n        </Button>\n      </Box>\n    </Box>\n  );\n};\n\nexport default Buttons;\n","import {\n  Box,\n  FormControl,\n  FormControlLabel,\n  Radio,\n  RadioGroup,\n  Snackbar,\n  SnackbarContent,\n  Typography,\n  makeStyles,\n  Dialog,\n} from \"@material-ui/core\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Attribute from \"./Attribute\";\nimport React, { useEffect, useState, useRef } from \"react\";\nimport Buttons from \"./Buttons\";\nimport { openDatabase, addSubmission, getAllSubmissions } from \"../db\";\nimport JSZip from \"jszip\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Select from \"@material-ui/core/Select\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    fontWeight: \"bold\",\n    fontSize: \"1.2rem\", // Adjust the font size\n    marginBottom: \"5px\", // Add some spacing below titles\n    textAlign: \"center\",\n  },\n  textField: {\n    marginBottom: \"1px\", // Add margin to text fields\n  },\n}));\n\nexport const SimpleDialog = (props, ref) => {\n  const classes = useStyles();\n  // Separate state for each attribute\n  const [streckennummer, setStreckennummer] = useState(\"\");\n  const [km, setKm] = useState(\"\");\n  const [met, setMet] = useState(\"\");\n  const [seite, setSeite] = useState(false);\n  const [sonstiges, setSonstiges] = useState(\"\");\n  const [mastnummer, setMastnummer] = useState(\"\");\n  const [selectedVermarkungstrager, setselectedVermarkungstrager] =\n    useState(null);\n  const [sonstiges2, setSonstiges2] = useState(\"\");\n  const [gvp, setGVP] = useState(\"\");\n  const [photo, setPhoto] = useState(null);\n  const { onClose, selectedValue, open } = props;\n  const [successMessage, setSuccessMessage] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [submissions, setSubmissions] = useState([]); // Store all submissions\n  const [successOpen, setSuccessOpen] = useState(false);\n  const [currentDate, setCurrentDate] = useState(\"\");\n\n  useEffect(() => {\n    setCurrentDate(new Date().toISOString().slice(0, 10));\n  }, [currentDate, setCurrentDate]);\n\n  const handlePhotoChange = (e) => {\n    const photoFile = e.target.files[0];\n    setPhoto(photoFile);\n  };\n\n  const resetForm = () => {\n    setStreckennummer(\"\");\n    setKm(\"\");\n    setMet(\"\");\n    setSeite(false);\n    setSonstiges(\"\");\n    setMastnummer(\"\");\n    setselectedVermarkungstrager(null);\n    setGVP(\"\");\n    setSonstiges2(\"\");\n    setPhoto(null);\n    setCurrentDate(new Date().toISOString().slice(0, 10));\n  };\n\n  const reff = useRef(null);\n\n  const handleErrorClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setErrorMessage(\"\");\n  };\n\n  const handleSuccessClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setSuccessMessage(\"\");\n  };\n\n  const vermarkungOptions = [\n    { value: 10, label: \"Keiner\" },\n    { value: 20, label: \"Laterne\" },\n    { value: 30, label: \"Wand\" },\n    { value: 40, label: \"Fundament\" },\n    { value: 50, label: \"Lärmschutzwand\" },\n    { value: 60, label: \"Widerlager\" },\n    { value: 70, label: \"Sonstiges\" },\n  ];\n\n  const handleChange = (event) => {\n    setselectedVermarkungstrager(event.target.value);\n    if (event.target.value) {\n      setMastnummer(\"\"); // Reset Mastnummer when Vermarkungstrager is selected\n    }\n  };\n\n  const handleSubmit = () => {\n    // Check if a photo is selected\n    if (!photo) {\n      setErrorMessage(\"Bitte wählen Sie ein Foto aus, bevor Sie fortfahren.\");\n      setSuccessMessage(\"\"); // Clear any existing success message\n      return;\n    }\n    // Clear the error message if a photo is selected\n    setErrorMessage(\"\");\n    setSuccessMessage(\"Erfolgreich hinzugefügt\");\n    // Reset the form after a successful submission\n    resetForm();\n    console.log();\n    const reader = new FileReader();\n\n    reader.onload = (event) => {\n      const base64Photo = event.target.result;\n      const maxSizeInBytes = 0.5 * 1024 * 1024; // 0.5 MB\n      let quality = 0.9;\n\n      const image = new Image();\n      image.src = base64Photo;\n\n      image.onload = () => {\n        const canvas = document.createElement(\"canvas\");\n        const ctx = canvas.getContext(\"2d\");\n\n        canvas.width = image.width;\n        canvas.height = image.height;\n\n        ctx.drawImage(image, 0, 0, image.width, image.height);\n        // Convert the canvas content to a data URL with JPEG format\n        let compressedPhoto = canvas.toDataURL(\"image/jpeg\", quality);\n\n        while (compressedPhoto.length > maxSizeInBytes && quality >= 0.1) {\n          // Reduce quality and recompress\n          quality -= 0.1;\n          compressedPhoto = canvas.toDataURL(\"image/jpeg\", quality);\n        }\n\n        if (compressedPhoto.length <= maxSizeInBytes) {\n          const vermarkungLabel = selectedVermarkungstrager\n            ? vermarkungOptions.find(\n                (option) => option.value === selectedVermarkungstrager\n              )?.label\n            : \"\";\n\n          // Append new submission to the array\n          const newSubmission = {\n            streckennummer: streckennummer,\n            km: km,\n            met: met,\n            seite: seite,\n            sonstiges: sonstiges,\n            mastnummer: mastnummer,\n            selectedVermarkungstrager: vermarkungLabel,\n            sonstiges2: sonstiges2,\n            gvp: gvp,\n            currentDate: currentDate,\n            photo: compressedPhoto,\n          };\n          // Save to IndexedDB each time the user submits\n          openDatabase()\n            .then((db) => {\n              addSubmission(db, newSubmission)\n                .then(() => {\n                  // Fetch updated submissions\n                  getAllSubmissions(db)\n                    .then((data) => {\n                      setSubmissions(data);\n                      setSuccessMessage(\"Erfolgreich hinzugefügt\");\n                      setSuccessOpen(true);\n                    })\n                    .catch((error) =>\n                      console.error(\"Error fetching submissions: \", error)\n                    );\n                })\n                .catch((error) =>\n                  console.error(\"Error adding submission: \", error)\n                );\n            })\n            .catch((error) => console.error(\"Error opening database: \", error));\n        } else {\n          console.error(\"Compressed photo size is still too large.\");\n          // Handle the situation where the photo can't be compressed to the desired size.\n        }\n      };\n    };\n    reader.readAsDataURL(photo);\n    reff.current.value = \"\";\n  };\n\n  const downloadCombinedTodayData = () => {\n    const zip = new JSZip();\n    const todaySubmissions = submissions.filter(\n      (entry) => entry.currentDate === currentDate\n    );\n\n    // Add the CSV data to the ZIP file\n    const csvContent =\n      \"Streckennummer;Kilometrierung; Seite; Sonstiges; Mastnummer; Vermarkung; Sonstiges Vermarkung; GVP Länge; Datum\\n\" +\n      todaySubmissions\n        .map((entry) => {\n          const gvpInMeters = (entry.gvp / 1000).toLocaleString(\"de-DE\", {\n            minimumFractionDigits: 2,\n          });\n          return `${entry.streckennummer};${entry.km},${entry.met};${entry.seite};${entry.sonstiges};${entry.mastnummer};${entry.selectedVermarkungstrager};${entry.sonstiges2};${gvpInMeters};${currentDate}`;\n        })\n        .join(\"\\n\");\n\n    zip.file(`${currentDate}.csv`, csvContent);\n\n    // Add the image files to the ZIP file\n    todaySubmissions.forEach((el, index) => {\n      const date = el.currentDate.replace(/-/g, \"\");\n      let filename;\n\n      if (el.mastnummer) {\n        filename = `${el.streckennummer}_${el.km},${el.met}_${el.seite}_${el.mastnummer}_${date}.jpg`;\n      } else if (\n        el.selectedVermarkungstrager &&\n        el.selectedVermarkungstrager !== \"Sonstiges\"\n      ) {\n        filename = `${el.streckennummer}_${el.km},${el.met}_${el.seite}_${el.selectedVermarkungstrager}_${date}.jpg`;\n      } else if (el.sonstiges2) {\n        filename = `${el.streckennummer}_${el.km},${el.met}_${el.seite}_${el.sonstiges2}_${date}.jpg`;\n      } else {\n        // Handle the case when none of the conditions are met\n        console.error(\"Invalid submission data\");\n        return;\n      }\n      const base64Data = el.photo.split(\",\")[1];\n      zip.file(filename, base64Data, { base64: true });\n    });\n\n    // Create and trigger a download link for the ZIP file\n    zip.generateAsync({ type: \"blob\" }).then((content) => {\n      const cur_date = new Date().toISOString().slice(0, 10);\n      const url = window.URL.createObjectURL(content);\n      const link = document.createElement(\"a\");\n      link.href = url;\n      link.download = `${cur_date}.zip`;\n      setTimeout(() => {\n        link.click();\n      }, 100);\n    });\n  };\n\n  const downloadCombinedData = () => {\n    const zip = new JSZip();\n    // Add the CSV data to the ZIP file\n    const csvContent =\n      \"Streckennummer;Kilometrierung; Seite; Sonstiges; Mastnummer; Vermarkung; Sonstiges Vermarkung; GVP Länge; Datum\\n\" +\n      submissions\n        .map((entry) => {\n          const gvpInMeters = (entry.gvp / 1000).toLocaleString(\"de-DE\", {\n            minimumFractionDigits: 2,\n          });\n          return `${entry.streckennummer};${entry.km},${entry.met};${entry.seite};${entry.sonstiges};${entry.mastnummer};${entry.selectedVermarkungstrager};${entry.sonstiges2};${gvpInMeters};${entry.currentDate}`;\n        })\n        .join(\"\\n\");\n\n    zip.file(\"alle_daten.csv\", csvContent);\n\n    // Add the image files to the ZIP file\n    submissions.forEach((el, index) => {\n      const date = el.currentDate.replace(/-/g, \"\");\n      let filename;\n\n      if (el.mastnummer) {\n        filename = `${el.streckennummer}_${el.km},${el.met}_${el.seite}_${el.mastnummer}_${date}.jpg`;\n      } else if (\n        el.selectedVermarkungstrager &&\n        el.selectedVermarkungstrager !== \"Sonstiges\"\n      ) {\n        filename = `${el.streckennummer}_${el.km},${el.met}_${el.seite}_${el.selectedVermarkungstrager}_${date}.jpg`;\n      } else if (el.sonstiges2) {\n        filename = `${el.streckennummer}_${el.km},${el.met}_${el.seite}_${el.sonstiges2}_${date}.jpg`;\n      } else {\n        // Handle the case when none of the conditions are met\n        console.error(\"Invalid submission data\");\n        return;\n      }\n      const base64Data = el.photo.split(\",\")[1];\n      zip.file(filename, base64Data, { base64: true });\n    });\n\n    // Create and trigger a download link for the ZIP file\n    zip.generateAsync({ type: \"blob\" }).then((content) => {\n      const url = window.URL.createObjectURL(content);\n      const link = document.createElement(\"a\");\n      link.href = url;\n      link.download = \"combined_data.zip\";\n      setTimeout(() => {\n        link.click();\n      }, 100);\n    });\n  };\n\n  return (\n    <Dialog open={props.open} onClose={props.onClose}>\n      <Box\n        display=\"flex\"\n        flexDirection=\"column\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        maxWidth=\"400px\"\n        margin=\"0 auto\"\n        padding=\"20px\"\n        marginTop=\"10px\"\n        border=\"1px solid #ccc\"\n        borderRadius=\"8px\"\n        boxShadow=\"0 0 5px rgba(0, 0, 0, 0.2)\"\n      >\n        <Attribute\n          name=\"Streckennummer\"\n          value={streckennummer}\n          setValue={setStreckennummer}\n        />\n        <Typography variant=\"h6\" className={classes.title}>\n          Kilometrierung\n        </Typography>\n        <Box display=\"flex\" flexDirection=\"row\" alignItems=\"center\">\n          <TextField\n            required\n            value={km}\n            style={{ marginRight: \"5px\" }}\n            id=\"km\"\n            name=\"km\"\n            placeholder=\"z.B. 145\"\n            onChange={(e) => setKm(e.target.value)}\n            inputProps={{ style: { textAlign: \"center\" } }}\n          />\n          <Typography>, </Typography>\n          <TextField\n            required\n            value={met}\n            style={{ marginLeft: \"5px\" }}\n            id=\"met\"\n            name=\"met\"\n            placeholder=\"02\"\n            onChange={(e) => setMet(e.target.value)}\n            inputProps={{ style: { textAlign: \"center\" } }}\n          />\n        </Box>\n        <br></br>\n        <Typography variant=\"h6\" className={classes.title}>\n          Seite\n        </Typography>\n\n        <Box display=\"flex\" flexDirection=\"row\" alignItems=\"center\">\n          <FormControl component=\"fieldset\">\n            <RadioGroup\n              row\n              required\n              id=\"seite\"\n              name=\"seite\"\n              value={seite}\n              onChange={(e) => setSeite(e.target.value)}\n            >\n              <FormControlLabel value=\"L\" control={<Radio />} label=\"L\" />\n              <FormControlLabel value=\"R\" control={<Radio />} label=\"R\" />\n            </RadioGroup>\n          </FormControl>\n\n          <TextField\n            fullWidth\n            value={sonstiges}\n            onChange={(e) => setSonstiges(e.target.value)}\n            label=\"Sonstiges\"\n            id=\"sonstiges\"\n            name=\"sonstiges\"\n            InputLabelProps={{\n              style: { textAlign: \"center\", width: \"100%\", marginLeft: \"0\" },\n            }}\n            inputProps={{ style: { textAlign: \"center\" } }}\n          />\n        </Box>\n        <br></br>\n        <Attribute\n          name=\"Mastnummer\"\n          value={mastnummer}\n          setValue={setMastnummer}\n          disabled={\n            selectedVermarkungstrager !== null &&\n            selectedVermarkungstrager !== 10\n          }\n        />\n        <Typography variant=\"h6\" className={classes.title}>\n          Wenn keine Mastnummer vorhanden ist, dann Vermarkungsträger auswählen:\n        </Typography>\n        <FormControl fullWidth>\n          <InputLabel id=\"demo-simple-select-label\">\n            Vermarkungsträger\n          </InputLabel>\n          <Select\n            labelId=\"vermarkungstraeger\"\n            id=\"vermarkungstraeger\"\n            value={selectedVermarkungstrager}\n            label=\"Vermarkung\"\n            onChange={(event) => handleChange(event)}\n            disabled={!!mastnummer}\n          >\n            {vermarkungOptions.map((option) => (\n              <MenuItem key={option.value} value={option.value}>\n                {option.label}\n              </MenuItem>\n            ))}\n          </Select>\n        </FormControl>\n        <Attribute\n          name=\"Sonstiges\"\n          value={sonstiges2}\n          setValue={setSonstiges2}\n          disabled={selectedVermarkungstrager !== 70}\n        />\n        <br></br>\n        <Attribute name=\"GVP Länge, mm\" value={gvp} setValue={setGVP} />\n        <br></br>\n        <Typography variant=\"h6\" className={classes.title}>\n          Datum\n        </Typography>\n        <br></br>\n        <TextField\n          required\n          fullWidth\n          name=\"currentDate\"\n          placeholder=\"z.B. 2023-10-20\"\n          value={currentDate}\n          onChange={(e) => {\n            setCurrentDate(e.target.value);\n          }}\n          margin=\"normal\"\n          inputProps={{ style: { textAlign: \"center\" } }}\n        />\n        <br></br>\n        <Typography variant=\"h6\" className={classes.title}>\n          Foto hochladen\n        </Typography>\n\n        <input\n          ref={(el) => (reff.current = el)}\n          required\n          type=\"file\"\n          name=\"photo\"\n          accept=\"image/*;capture=camera\"\n          onChange={(e) => handlePhotoChange(e)}\n        />\n      </Box>\n      <Buttons\n        handleSubmit={handleSubmit}\n        downloadCombinedData={downloadCombinedData}\n        downloadCombinedTodayData={downloadCombinedTodayData}\n      />\n      <Snackbar\n        open={!!successMessage}\n        autoHideDuration={6000}\n        onClose={handleSuccessClose}\n      >\n        <SnackbarContent\n          message={successMessage}\n          /*           className={classes.successSnackbar} */\n        />\n      </Snackbar>\n\n      <Snackbar\n        open={!!errorMessage}\n        autoHideDuration={6000}\n        onClose={handleErrorClose}\n      >\n        <SnackbarContent\n          message={errorMessage}\n          /*           className={classes.errorSnackbar} */\n        />\n      </Snackbar>\n    </Dialog>\n  );\n};\n\nexport default SimpleDialog;\n","import React, { useState } from \"react\";\r\nimport Papa from \"papaparse\";\r\nimport { Box, Button, Input, Typography, Paper } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { CloudUpload, OpenInBrowser } from \"@material-ui/icons\";\r\nimport { SimpleDialog } from \"./Formular\";\r\n\r\nconst handleCSVFile = (file, setImportData, setColNames) => {\r\n  Papa.parse(file, {\r\n    complete: (result) => {\r\n      const name = file.name ? file.name.split(\".\").at(0) : \"\";\r\n\r\n      // Check if there are data rows in the result\r\n      if (result.data && result.data.length > 0) {\r\n        const headerRow = Object.keys(result.data[0]);\r\n\r\n        // Exclude the last row if it is empty\r\n        const dataRows = result.data.slice(0, -1);\r\n\r\n        // Define the columns you want to include\r\n        const columnsToInclude = [\"PktNr\", \"Km-Station Ist\"];\r\n\r\n        // Filter out only the columns you are interested in\r\n        const filteredDataRows = dataRows.map((el, idx) => {\r\n          const filteredRow = {\r\n            id: idx,\r\n            Streckennummer: name,\r\n            Mastnummer: \"\",\r\n            \"GVP Länge\": \"\",\r\n          };\r\n\r\n          columnsToInclude.forEach((col) => {\r\n            filteredRow[col] = el[col];\r\n          });\r\n\r\n          return filteredRow;\r\n        });\r\n\r\n        setImportData(filteredDataRows);\r\n\r\n        // Set the column names\r\n        setColNames([\r\n          ...columnsToInclude,\r\n          \"Streckennummer\",\r\n          \"Mastnummer\",\r\n          \"GVP Länge\",\r\n        ]);\r\n      } else {\r\n        console.error(\"CSV file is empty or missing data.\");\r\n        // Handle the case when the CSV file is empty or missing data\r\n      }\r\n    },\r\n    header: true,\r\n    encoding: \"ISO-8859-1\",\r\n  });\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  header: {\r\n    padding: theme.spacing(2),\r\n    backgroundColor: theme.palette.primary.main,\r\n    color: theme.palette.common.white,\r\n  },\r\n  content: {\r\n    padding: theme.spacing(3),\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  buttonContainer: {\r\n    marginTop: theme.spacing(2),\r\n    textAlign: \"center\", // Center-align the buttons\r\n  },\r\n  button: {\r\n    display: \"block\",\r\n    margin: \"10px auto\",\r\n    padding: \"10px 20px\",\r\n    fontSize: \"1rem\",\r\n    textTransform: \"none\",\r\n    backgroundColor: \"#6a8dbb\",\r\n    color: theme.palette.common.white,\r\n    \"&:hover\": {\r\n      backgroundColor: \"#3c5a7d\",\r\n    },\r\n  },\r\n  input: {\r\n    display: \"none\",\r\n  },\r\n}));\r\n\r\nconst CSVimport = ({ setShowTable, setImportData, setColNames }) => {\r\n  const classes = useStyles();\r\n  const [formOpen, setFormOpen] = useState(false);\r\n  const [fileSelected, setFileSelected] = useState(false);\r\n  const [invalidFileType, setInvalidFileType] = useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setFormOpen(true);\r\n  };\r\n\r\n  const handleClose = (value) => {\r\n    setFormOpen(false);\r\n  };\r\n\r\n  const handleFileChange = (event) => {\r\n    const file = event.target.files[0];\r\n\r\n    // Check if a file is selected\r\n    if (file) {\r\n      // Check if the selected file is a CSV file\r\n      if (file.type === \"text/csv\" || file.name.endsWith(\".csv\")) {\r\n        handleCSVFile(file, setImportData, setColNames);\r\n        setShowTable(true);\r\n        setFileSelected(true);\r\n        setInvalidFileType(false); // Reset the invalid file type state\r\n      } else {\r\n        // Set the state to indicate an invalid file type\r\n        setInvalidFileType(true);\r\n        setFileSelected(false);\r\n      }\r\n    } else {\r\n      setFileSelected(false);\r\n      setInvalidFileType(false); // Reset the invalid file type state\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box>\r\n      <Paper className={classes.header} elevation={3}>\r\n        <Typography variant=\"h4\">GV-Targeterfassung</Typography>\r\n      </Paper>\r\n      <Paper className={classes.content} elevation={3}>\r\n        <Box className={classes.buttonContainer}>\r\n          <label htmlFor=\"csv-input\">\r\n            <Input\r\n              accept=\".csv\"\r\n              className={classes.input}\r\n              id=\"csv-input\"\r\n              type=\"file\"\r\n              onChange={handleFileChange}\r\n            />\r\n            <Button\r\n              variant=\"contained\"\r\n              startIcon={<CloudUpload />}\r\n              color=\"secondary\"\r\n              className={classes.button}\r\n              component=\"span\"\r\n            >\r\n              Koordinatendatei hochladen\r\n            </Button>\r\n          </label>\r\n          {invalidFileType && (\r\n            <Typography variant=\"body2\" color=\"error\">\r\n              Wählen Sie eine CSV Datei\r\n            </Typography>\r\n          )}\r\n        </Box>\r\n        <Box>\r\n          <Button\r\n            variant=\"contained\"\r\n            startIcon={<OpenInBrowser />}\r\n            color=\"secondary\"\r\n            className={classes.button}\r\n            component=\"span\"\r\n            onClick={handleClickOpen}\r\n          >\r\n            Formular öffnen\r\n          </Button>\r\n          <SimpleDialog\r\n            selectedValue={\"\"}\r\n            open={formOpen}\r\n            onClose={handleClose}\r\n          />\r\n        </Box>\r\n      </Paper>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default CSVimport;\r\n","import {\n  Box,\n  FormControl,\n  FormControlLabel,\n  Radio,\n  RadioGroup,\n  Snackbar,\n  SnackbarContent,\n  Typography,\n  makeStyles, // Import makeStyles\n} from \"@material-ui/core\";\nimport TextField from \"@material-ui/core/TextField\";\nimport React, { useEffect, useState } from \"react\";\nimport Buttons from \"./Buttons\";\nimport JSZip from \"jszip\";\nimport { openDatabase, addSubmission, getAllSubmissions } from \"../db\";\nimport Attribute from \"./Attribute\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Select from \"@material-ui/core/Select\";\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    fontWeight: \"bold\",\n    fontSize: \"1.2rem\", // Adjust the font size\n    marginBottom: \"5px\", // Add some spacing below titles\n  },\n  textField: {\n    marginBottom: \"1px\", // Add margin to text fields\n  },\n}));\n\nconst MainForm = ({ reff, row, setImportData }) => {\n  const [formData, setFormData] = useState({\n    seite: false,\n    sonstiges: \"\",\n    gvp: \"\",\n    photo: null,\n  });\n\n  const [streckennummer, setStreckennummer] = useState(\n    row.Streckennummer ? row.Streckennummer : \"\"\n  );\n  const [km, setKm] = useState(\n    row[\"Km-Station Ist\"] ? row[\"Km-Station Ist\"] : \"\"\n  );\n  const [met, setMet] = useState(row.Met ? row.Met : \"\");\n  const [seite, setSeite] = useState(\"\");\n  const [sonstiges, setSonstiges] = useState(\"\");\n  const [mastnummer, setMastnummer] = useState(\"\");\n  const [selectedVermarkungstrager, setselectedVermarkungstrager] =\n    useState(null);\n  const [sonstiges2, setSonstiges2] = useState(\"\");\n  const [gvp, setGVP] = useState(\"\");\n  const [photo, setPhoto] = useState(\"\");\n  const [successMessage, setSuccessMessage] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [submissions, setSubmissions] = useState([]); // Store all submissions\n\n  useEffect(() => {\n    setImportData((state) =>\n      state.map((el) => {\n        if (el.id === row.id) {\n          return {\n            ...el,\n            \"GVP Länge\": gvp,\n          };\n        }\n        if (el.id === row.id) {\n          return {\n            ...el,\n            Mastnummer: mastnummer,\n          };\n        }\n        return el;\n      })\n    );\n  }, [gvp, mastnummer, row.id, setImportData]);\n\n  // State for displaying the success and error message\n  const [successOpen, setSuccessOpen] = useState(false);\n  const [currentDate, setCurrentDate] = useState(\"\");\n\n  useEffect(() => {\n    setCurrentDate(new Date().toISOString().slice(0, 10));\n    if (row) {\n      if (row[\"Km-Station Ist\"]) {\n        const [kmValue, meterValue] = row[\"Km-Station Ist\"].split(\",\");\n        setKm(kmValue);\n        setMet(meterValue);\n      }\n      if (row.Seite) {\n        setSeite(row.Seite);\n      }\n    }\n  }, [row, setCurrentDate]);\n\n  const classes = useStyles(); // Initialize the useStyles\n\n  const vermarkungOptions = [\n    { value: 10, label: \"Keiner\" },\n    { value: 20, label: \"Laterne\" },\n    { value: 30, label: \"Wand\" },\n    { value: 40, label: \"Fundament\" },\n    { value: 50, label: \"Lärmschutzwand\" },\n    { value: 60, label: \"Widerlager\" },\n    { value: 70, label: \"Sonstiges\" },\n  ];\n\n  const handleChange = (event) => {\n    setselectedVermarkungstrager(event.target.value);\n    if (event.target.value) {\n      setMastnummer(\"\"); // Reset Mastnummer when Vermarkungstrager is selected\n    }\n  };\n\n  const handleSubmit = () => {\n    // Check if a photo is selected\n    if (!photo) {\n      setErrorMessage(\"Bitte wählen Sie ein Foto aus, bevor Sie fortfahren.\");\n      setSuccessMessage(\"\"); // Clear any existing success message\n      return;\n    }\n    // Clear the error message if a photo is selected\n    setErrorMessage(\"\");\n    setSuccessMessage(\"Erfolgreich hinzugefügt\");\n    // Reset the form after a successful submission\n    const reader = new FileReader();\n\n    reader.onload = (event) => {\n      const base64Photo = event.target.result;\n      const maxSizeInBytes = 0.5 * 1024 * 1024; // 0.5 MB\n      let quality = 0.9;\n\n      const image = new Image();\n      image.src = base64Photo;\n\n      image.onload = () => {\n        const canvas = document.createElement(\"canvas\");\n        const ctx = canvas.getContext(\"2d\");\n\n        canvas.width = image.width;\n        canvas.height = image.height;\n\n        ctx.drawImage(image, 0, 0, image.width, image.height);\n        // Convert the canvas content to a data URL with JPEG format\n        let compressedPhoto = canvas.toDataURL(\"image/jpeg\", quality);\n\n        while (compressedPhoto.length > maxSizeInBytes && quality >= 0.1) {\n          // Reduce quality and recompress\n          quality -= 0.1;\n          compressedPhoto = canvas.toDataURL(\"image/jpeg\", quality);\n        }\n\n        if (compressedPhoto.length <= maxSizeInBytes) {\n          const vermarkungLabel = selectedVermarkungstrager\n            ? vermarkungOptions.find(\n                (option) => option.value === selectedVermarkungstrager\n              )?.label\n            : \"\";\n\n          // Append new submission to the array\n          const newSubmission = {\n            streckennummer: streckennummer,\n            km: km,\n            met: met,\n            seite: seite,\n            sonstiges: sonstiges,\n            mastnummer: mastnummer,\n            selectedVermarkungstrager: vermarkungLabel,\n            sonstiges2: sonstiges2,\n            gvp: gvp,\n            currentDate: currentDate,\n            photo: compressedPhoto,\n          };\n          // Save to IndexedDB each time the user submits\n          openDatabase()\n            .then((db) => {\n              addSubmission(db, newSubmission)\n                .then(() => {\n                  // Fetch updated submissions\n                  getAllSubmissions(db)\n                    .then((data) => {\n                      setSubmissions(data);\n                      setSuccessMessage(\"Erfolgreich hinzugefügt\");\n                      setSuccessOpen(true);\n                    })\n                    .catch((error) =>\n                      console.error(\"Error fetching submissions: \", error)\n                    );\n                })\n                .catch((error) =>\n                  console.error(\"Error adding submission: \", error)\n                );\n            })\n            .catch((error) => console.error(\"Error opening database: \", error));\n        } else {\n          console.error(\"Compressed photo size is still too large.\");\n          // Handle the situation where the photo can't be compressed to the desired size.\n        }\n      };\n    };\n    reader.readAsDataURL(photo);\n    reff.current.value = \"\";\n  };\n\n  const downloadCombinedTodayData = () => {\n    const zip = new JSZip();\n    const todaySubmissions = submissions.filter(\n      (entry) => entry.currentDate === currentDate\n    );\n\n    // Add the CSV data to the ZIP file\n    const csvContent =\n      \"Streckennummer;Kilometrierung; Seite; Sonstiges; Mastnummer; Vermarkung; Sonstiges Vermarkung; GVP Länge; Datum\\n\" +\n      todaySubmissions\n        .map((entry) => {\n          const gvpInMeters = (entry.gvp / 1000).toLocaleString(\"de-DE\", {\n            minimumFractionDigits: 2,\n          });\n          return `${entry.streckennummer};${entry.km},${entry.met};${entry.seite};${entry.sonstiges};${entry.mastnummer};${entry.selectedVermarkungstrager};${entry.sonstiges2};${gvpInMeters};${currentDate}`;\n        })\n        .join(\"\\n\");\n\n    zip.file(`${currentDate}.csv`, csvContent);\n\n    // Add the image files to the ZIP file\n    todaySubmissions.forEach((el, index) => {\n      const date = el.currentDate.replace(/-/g, \"\");\n      let filename;\n\n      if (el.mastnummer) {\n        filename = `${el.streckennummer}_${el.km},${el.met}_${el.seite}_${el.mastnummer}_${date}.jpg`;\n      } else if (\n        el.selectedVermarkungstrager &&\n        el.selectedVermarkungstrager !== \"Sonstiges\"\n      ) {\n        filename = `${el.streckennummer}_${el.km},${el.met}_${el.seite}_${el.selectedVermarkungstrager}_${date}.jpg`;\n      } else if (el.sonstiges2) {\n        filename = `${el.streckennummer}_${el.km},${el.met}_${el.seite}_${el.sonstiges2}_${date}.jpg`;\n      } else {\n        // Handle the case when none of the conditions are met\n        console.error(\"Invalid submission data\");\n        return;\n      }\n      const base64Data = el.photo.split(\",\")[1];\n      zip.file(filename, base64Data, { base64: true });\n    });\n\n    // Create and trigger a download link for the ZIP file\n    zip.generateAsync({ type: \"blob\" }).then((content) => {\n      const cur_date = new Date().toISOString().slice(0, 10);\n      const url = window.URL.createObjectURL(content);\n      const link = document.createElement(\"a\");\n      link.href = url;\n      link.download = `${cur_date}.zip`;\n      setTimeout(() => {\n        link.click();\n      }, 100);\n    });\n  };\n\n  const downloadCombinedData = () => {\n    const zip = new JSZip();\n    // Add the CSV data to the ZIP file\n    const csvContent =\n      \"Streckennummer;Kilometrierung; Seite; Sonstiges; Mastnummer; Vermarkung; Sonstiges Vermarkung; GVP Länge; Datum\\n\" +\n      submissions\n        .map((entry) => {\n          const gvpInMeters = (entry.gvp / 1000).toLocaleString(\"de-DE\", {\n            minimumFractionDigits: 2,\n          });\n          return `${entry.streckennummer};${entry.km},${entry.met};${entry.seite};${entry.sonstiges};${entry.mastnummer};${entry.selectedVermarkungstrager};${entry.sonstiges2};${gvpInMeters};${entry.currentDate}`;\n        })\n        .join(\"\\n\");\n\n    zip.file(\"alle_daten.csv\", csvContent);\n\n    // Add the image files to the ZIP file\n    submissions.forEach((el, index) => {\n      const date = el.currentDate.replace(/-/g, \"\");\n      let filename;\n\n      if (el.mastnummer) {\n        filename = `${el.streckennummer}_${el.km},${el.met}_${el.seite}_${el.mastnummer}_${date}.jpg`;\n      } else if (\n        el.selectedVermarkungstrager &&\n        el.selectedVermarkungstrager !== \"Sonstiges\"\n      ) {\n        filename = `${el.streckennummer}_${el.km},${el.met}_${el.seite}_${el.selectedVermarkungstrager}_${date}.jpg`;\n      } else if (el.sonstiges2) {\n        filename = `${el.streckennummer}_${el.km},${el.met}_${el.seite}_${el.sonstiges2}_${date}.jpg`;\n      } else {\n        // Handle the case when none of the conditions are met\n        console.error(\"Invalid submission data\");\n        return;\n      }\n      const base64Data = el.photo.split(\",\")[1];\n      zip.file(filename, base64Data, { base64: true });\n    });\n\n    // Create and trigger a download link for the ZIP file\n    zip.generateAsync({ type: \"blob\" }).then((content) => {\n      const url = window.URL.createObjectURL(content);\n      const link = document.createElement(\"a\");\n      link.href = url;\n      link.download = \"combined_data.zip\";\n      setTimeout(() => {\n        link.click();\n      }, 100);\n    });\n  };\n\n  const handleSuccessClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setSuccessMessage(\"\");\n  };\n\n  const handleErrorClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setErrorMessage(\"\");\n  };\n\n  const resetForm = () => {\n    setFormData({\n      km: \"\",\n      met: \"\",\n      seite: \"\",\n      sonstiges: \"\",\n      punktnummer: \"\",\n      gvp: \"\",\n      photo: null,\n    });\n  };\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setFormData({\n      ...formData,\n      [name]: value,\n    });\n  };\n\n  const handlePhotoChange = (e) => {\n    const photoFile = e.target.files[0];\n    setPhoto(photoFile);\n  };\n\n  useEffect(() => {\n    openDatabase()\n      .then((db) => {\n        getAllSubmissions(db).then((data) => setSubmissions(data));\n      })\n      .catch((error) => console.error(\"Error opening database: \", error));\n  }, []);\n\n  return (\n    <>\n      <Box\n        display=\"flex\"\n        flexDirection=\"column\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        maxWidth=\"400px\"\n        margin=\"0 auto\"\n        padding=\"20px\"\n        border=\"1px solid #ccc\"\n        borderRadius=\"8px\"\n        boxShadow=\"0 0 5px rgba(0, 0, 0, 0.2)\"\n      >\n        <Attribute\n          value={streckennummer}\n          setValue={setStreckennummer}\n          name=\"Streckennummer\"\n        />\n        {/* <Attribute value={km} setValue={setKm} name=\"Km\" /> */}\n        <Typography variant=\"h6\" className={classes.title}>\n          Kilometrierung\n        </Typography>\n        <Box display=\"flex\" flexDirection=\"row\" alignItems=\"center\">\n          <TextField\n            required\n            style={{ marginRight: \"5px\" }}\n            id=\"km\"\n            name=\"km\"\n            placeholder=\"z.B. 145\"\n            value={km}\n            onChange={handleInputChange}\n            inputProps={{ style: { textAlign: \"center\" } }}\n          />\n          <Typography>, </Typography>\n          <TextField\n            required\n            style={{ marginLeft: \"5px\" }}\n            id=\"met\"\n            name=\"met\"\n            placeholder=\"02\"\n            value={met}\n            onChange={handleInputChange}\n            inputProps={{ style: { textAlign: \"center\" } }}\n          />\n        </Box>\n        <br></br>\n        <Typography variant=\"h6\" className={classes.title}>\n          Seite\n        </Typography>\n\n        <Box display=\"flex\" flexDirection=\"row\" alignItems=\"center\">\n          <FormControl component=\"fieldset\">\n            <RadioGroup\n              row\n              required\n              id=\"seite\"\n              name=\"seite\"\n              value={seite}\n              onChange={(e) => setSeite(e.target.value)}\n            >\n              <FormControlLabel value=\"L\" control={<Radio />} label=\"L\" />\n              <FormControlLabel value=\"R\" control={<Radio />} label=\"R\" />\n            </RadioGroup>\n          </FormControl>\n\n          <TextField\n            fullWidth\n            label=\"Sonstiges\"\n            id=\"sonstiges\"\n            name=\"sonstiges\"\n            value={sonstiges}\n            onChange={(e) => setSonstiges(e.target.value)}\n            inputProps={{ style: { textAlign: \"center\" } }}\n            InputLabelProps={{\n              style: { textAlign: \"center\", width: \"100%\", marginLeft: \"0\" },\n            }}\n          />\n        </Box>\n        <br></br>\n        <Attribute\n          name=\"Mastnummer\"\n          value={mastnummer}\n          setValue={setMastnummer}\n          disabled={\n            selectedVermarkungstrager !== null &&\n            selectedVermarkungstrager !== 10\n          }\n        />\n        <Typography variant=\"h6\" className={classes.title}>\n          Wenn keine Mastnummer vorhanden ist, dann Vermarkungsträger auswählen:\n        </Typography>\n        <FormControl fullWidth>\n          <InputLabel id=\"demo-simple-select-label\">\n            Vermarkungsträger\n          </InputLabel>\n          <Select\n            labelId=\"vermarkungstraeger\"\n            id=\"vermarkungstraeger\"\n            value={selectedVermarkungstrager}\n            label=\"Vermarkung\"\n            onChange={(event) => handleChange(event)}\n            disabled={!!mastnummer}\n          >\n            {vermarkungOptions.map((option) => (\n              <MenuItem key={option.value} value={option.value}>\n                {option.label}\n              </MenuItem>\n            ))}\n          </Select>\n        </FormControl>\n        <Attribute\n          name=\"Sonstiges\"\n          value={sonstiges2}\n          setValue={setSonstiges2}\n          disabled={selectedVermarkungstrager !== 70}\n        />\n        <br></br>\n        <Attribute value={gvp} setValue={setGVP} name=\"GVP Länge, mm\" />\n        <br></br>\n        <Typography variant=\"h6\" className={classes.title}>\n          Datum\n        </Typography>\n        <br></br>\n        <TextField\n          required\n          fullWidth\n          name=\"currentDate\"\n          placeholder=\"z.B. 2023-10-20\"\n          value={currentDate}\n          onChange={(e) => {\n            setCurrentDate(e.target.value);\n          }}\n          margin=\"normal\"\n          inputProps={{ style: { textAlign: \"center\" } }}\n        />\n        <br></br>\n        <Typography variant=\"h6\" className={classes.title}>\n          Foto hochladen\n        </Typography>\n\n        <input\n          ref={(el) => (reff.current = el)}\n          required\n          type=\"file\"\n          name=\"photo\"\n          accept=\"image/*;capture=camera\"\n          onChange={handlePhotoChange}\n        />\n      </Box>\n      <Buttons\n        handleSubmit={handleSubmit}\n        downloadCombinedData={downloadCombinedData}\n        downloadCombinedTodayData={downloadCombinedTodayData}\n      />\n      <Snackbar\n        open={!!successMessage}\n        autoHideDuration={6000}\n        onClose={handleSuccessClose}\n      >\n        <SnackbarContent\n          message={successMessage}\n          /*           className={classes.successSnackbar} */\n        />\n      </Snackbar>\n\n      <Snackbar\n        open={!!errorMessage}\n        autoHideDuration={6000}\n        onClose={handleErrorClose}\n      >\n        <SnackbarContent\n          message={errorMessage}\n          /*           className={classes.errorSnackbar} */\n        />\n      </Snackbar>\n    </>\n  );\n};\n\nexport default MainForm;\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Button from \"./Buttons\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport MainForm from \"./MainForm\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    padding: theme.spacing(3),\r\n  },\r\n  successSnackbar: {\r\n    backgroundColor: \"#92b493\",\r\n  },\r\n  errorSnackbar: {\r\n    backgroundColor: \"#FF5722\",\r\n  },\r\n  buttonContainer: {\r\n    textAlign: \"center\",\r\n    marginTop: theme.spacing(2),\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n    padding: \"10px 20px\",\r\n    fontSize: \"1rem\",\r\n    textTransform: \"none\",\r\n  },\r\n}));\r\n\r\nfunction SimpleDialog({\r\n  row,\r\n  onClose,\r\n  selectedValue,\r\n  open,\r\n  reff,\r\n  setImportData,\r\n}) {\r\n  const classes = useStyles();\r\n  const handleClose = () => {\r\n    onClose(selectedValue);\r\n  };\r\n\r\n  return (\r\n    <Dialog\r\n      onClose={handleClose}\r\n      aria-labelledby=\"simple-dialog-title\"\r\n      open={open}\r\n    >\r\n      <Paper elevation={3} className={classes.paper}>\r\n        <MainForm row={row} reff={reff} setImportData={setImportData} />\r\n      </Paper>\r\n    </Dialog>\r\n  );\r\n}\r\n\r\nconst MainFormDialogContainer = ({\r\n  row,\r\n  reff,\r\n  selectedRowData,\r\n  setImportData,\r\n}) => {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(false);\r\n  const [selectedValue, setSelectedValue] = React.useState([]);\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = (value) => {\r\n    setOpen(false);\r\n    setSelectedValue(selectedRowData);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className={classes.buttonContainer}>\r\n        <IconButton\r\n          aria-label=\"edit\"\r\n          onClick={() => handleClickOpen()}\r\n          className={classes.button}\r\n        >\r\n          Bearbeiten\r\n          <EditIcon />\r\n        </IconButton>\r\n        <SimpleDialog\r\n          row={row}\r\n          selectedValue={selectedValue}\r\n          open={open}\r\n          onClose={handleClose}\r\n          reff={reff}\r\n          selectedRowData={selectedRowData}\r\n          setImportData={setImportData}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MainFormDialogContainer;\r\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport MainFormDialogContainer from \"./MainFormDialogContainer\";\n\nconst useStyles = makeStyles((theme) => ({\n  table: {\n    minWidth: 650,\n  },\n  tableHead: {\n    backgroundColor: \"#6a8dbb\",\n    color: theme.palette.common.white,\n  },\n  editButton: {\n    color: theme.palette.secondary.main,\n  },\n}));\n\nconst TableWrapper = ({ importData, reff, setImportData, colNames }) => {\n  console.log(colNames);\n  const classes = useStyles();\n  return (\n    <TableContainer component={Paper}>\n      <Table className={classes.table} aria-label=\"enhanced table\">\n        <TableHead>\n          <TableRow className={classes.tableHead}>\n            {colNames.map((col, idx) => (\n              <TableCell key={`keys-${idx}`} align=\"right\">\n                {col}\n              </TableCell>\n            ))}\n            <TableCell key={`keys-edit`} align=\"right\"></TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {importData.map((row, idx) => (\n            <TableRow key={idx}>\n              {colNames.map((col, idx) => (\n                <TableCell key={`values-${idx}`} align=\"right\">\n                  {row[col]}\n                </TableCell>\n              ))}\n              <TableCell key={`values-edit`} align=\"right\">\n                <MainFormDialogContainer\n                  row={row}\n                  reff={reff}\n                  setImportData={setImportData}\n                />\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n};\n\nexport default TableWrapper;\n","import { makeStyles } from \"@material-ui/core/styles\";\nimport classnames from \"classnames\";\nimport React, { useEffect, useState, useRef } from \"react\";\nimport \"./App.css\";\nimport { openDatabase } from \"./db\";\nimport CSVimport from \"./components/CSVimport\";\nimport TableWrapper from \"./components/TableWrapper\";\nimport CloudDownloadIcon from \"@material-ui/icons/CloudDownload\";\nimport { Button } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexWrap: \"wrap\",\n    width: \"100%\",\n    height: \"100%\",\n    backgroundColor: \"#f4f4f4\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    \"& > *\": {\n      padding: \"10px\",\n      display: \"flex\",\n      flexDirection: \"column\",\n    },\n  },\n}));\n\n// Function to clear the IndexedDB\nconst clearIndexedDB = async (db) => {\n  return new Promise((resolve, reject) => {\n    const transaction = db.transaction([\"submissions\"], \"readwrite\");\n    const objectStore = transaction.objectStore(\"submissions\");\n\n    const request = objectStore.clear();\n\n    request.onsuccess = () => {\n      resolve();\n    };\n\n    request.onerror = (event) => {\n      reject(event.target.error);\n    };\n  });\n};\n\nconst App = () => {\n  const classes = useStyles();\n\n  const reff = useRef(null);\n  const [showDownloadButton, setShowDownloadButton] = useState(false);\n  const [importData, setImportData] = useState([]);\n  const [colNames, setColNames] = useState([]);\n  const [showTable, setShowTable] = useState(false);\n\n  useEffect(() => {\n    const clearDatabaseEvery2Weeks = async () => {\n      try {\n        const db = await openDatabase();\n        await clearIndexedDB(db);\n        console.log(\"IndexedDB cleared.\");\n      } catch (error) {\n        console.error(\"Error clearing IndexedDB: \", error);\n      }\n    };\n\n    // Calculate the time until the next midnight\n    const now = new Date();\n    const nextMidnight = new Date(now);\n    nextMidnight.setHours(24, 0, 0, 0);\n    const timeUntilMidnight = nextMidnight - now;\n\n    // Schedule the first interval to start at the next midnight and repeat every 14 days at midnight\n    const interval = 14 * 24 * 60 * 60 * 1000 + timeUntilMidnight;\n    const intervalId = setInterval(clearDatabaseEvery2Weeks, interval);\n    console.log(interval);\n\n    // Cleanup the interval when the component unmounts\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, []);\n\n  const convertToCSV = (importData) => {\n    // Ensure data is not empty\n    if (!importData || importData.length === 0) {\n      return \"\";\n    }\n\n    // Extract column names\n    const columns = Object.keys(importData[0]);\n\n    // Create header row\n    const headerRow = columns.join(\";\");\n\n    // Create data rows\n    const dataRows = importData.map((row) =>\n      columns.map((column) => row[column]).join(\";\")\n    );\n\n    // Combine header and data rows\n    const csvContent = [headerRow, ...dataRows].join(\"\\n\");\n\n    return csvContent;\n  };\n\n  const handleDownload = () => {\n    const csvContent = convertToCSV(importData);\n\n    // Create a Blob and create a download link\n    const blob = new Blob([csvContent], { type: \"text/csv\" });\n    const link = document.createElement(\"a\");\n    link.href = URL.createObjectURL(blob);\n    link.download = \"table_data.csv\";\n\n    // Simulate a click to trigger the download\n    link.click();\n  };\n\n  return (\n    <div className={classnames(classes.root, \"appWrapper\")}>\n      <CSVimport\n        setShowTable={(value) => {\n          setShowTable(value);\n          setShowDownloadButton(value); // Set showDownloadButton based on showTable\n        }}\n        setImportData={setImportData}\n        setColNames={setColNames}\n      />\n      {showTable && (\n        <>\n          <TableWrapper\n            importData={importData}\n            reff={reff}\n            setImportData={setImportData}\n            colNames={colNames}\n          />\n          {showDownloadButton && ( // Conditionally render the download button\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              style={{ height: \"50px\", marginTop: \"10px\" }}\n              className={classes.button}\n              startIcon={<CloudDownloadIcon />}\n              onClick={handleDownload}\n            >\n              Tabelle herunterladen\n            </Button>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}