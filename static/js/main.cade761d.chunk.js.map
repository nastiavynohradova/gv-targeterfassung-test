{"version":3,"sources":["db.js","components/Attribute.js","components/Buttons.js","components/Formular.js","components/CSVimport.js","components/MainForm.js","components/MainFormDialogContainer.js","components/TableWrapper.js","App.js","serviceWorker.js","index.js"],"names":["openDatabase","Promise","resolve","reject","request","indexedDB","open","onupgradeneeded","event","target","result","createObjectStore","keyPath","autoIncrement","onsuccess","db","onerror","error","addSubmission","submission","transaction","objectStore","add","getAllSubmissions","getAll","async","deleteSubmission","id","tx","store","delete","complete","useStyles","makeStyles","theme","title","fontWeight","fontSize","marginBottom","Attribute","value","setValue","name","disabled","classes","Typography","variant","className","TextField","required","fullWidth","onChange","e","newValue","Math","max","parseInt","toString","slice","margin","inputProps","style","textAlign","button","spacing","padding","textTransform","buttonsContainer","display","flexDirection","alignItems","buttonContainer","marginTop","Buttons","handleSubmit","downloadCombinedTodayData","downloadCombinedData","Box","Button","color","endIcon","onClick","startIcon","textField","successSnackbar","backgroundColor","palette","success","main","contrastText","errorSnackbar","SimpleDialog","props","ref","punktnummer","setPunktnummer","useState","streckennummer","setStreckennummer","km","setKm","met","setMet","seite","setSeite","sonstiges","setSonstiges","mastnummer","setMastnummer","selectedStatus","setselectedStatus","selectedVermarkungstrager","setselectedVermarkungstrager","sonstiges2","setSonstiges2","gvp","setGVP","photo","setPhoto","onClose","selectedValue","successMessage","setSuccessMessage","errorMessage","setErrorMessage","submissions","setSubmissions","successOpen","setSuccessOpen","currentDate","setCurrentDate","useEffect","Date","toISOString","reff","useRef","vermarkungOptions","label","statusOptions","React","createElement","Dialog","justifyContent","maxWidth","border","borderRadius","boxShadow","marginRight","placeholder","maxLength","marginLeft","FormControl","component","RadioGroup","row","FormControlLabel","control","Radio","InputLabelProps","width","Select","labelId","handleChangeStatus","map","option","MenuItem","key","InputLabel","handleChangeVermarkungstrager","el","current","type","accept","photoFile","files","handlePhotoChange","reader","FileReader","onload","base64Photo","image","Image","src","total","_vermarkungOptions$fi","_statusOptions$find","vermarkungLabel","find","statusLabel","newSubmission","data","console","setTimeout","canvas","document","ctx","getContext","height","drawImage","_vermarkungOptions$fi2","_statusOptions$find2","compressedPhotoBlob","toBlob","compressedPhoto","imageCompression","maxSizeMB","maxWidthOrHeight","useWebWorker","log","Blob","concat","size","readAsDataURL","zip","JSZip","csvContent","entry","gvpInMeters","toLocaleString","minimumFractionDigits","join","file","vorhandenMitTargetFolder","folder","vorhandenOhneTargetFolder","forEach","index","date","replace","roundedMetWithoutLastDigit","folderToAdd","filename","length","metAsNumber","parseFloat","roundedMet","round","floor","endsWith","trim","base64Data","split","base64","generateAsync","then","content","url","window","URL","createObjectURL","link","href","download","click","todaySubmissions","filter","cur_date","Snackbar","autoHideDuration","handleSuccessClose","reason","SnackbarContent","message","handleErrorClose","header","primary","common","white","background","paper","input","CSVimport","_ref","setShowTable","setImportData","setColNames","formOpen","setFormOpen","fileSelected","setFileSelected","invalidFileType","setInvalidFileType","Paper","elevation","htmlFor","Input","handleCSVFile","Papa","parse","at","Object","keys","dataRows","columnsToInclude","filteredDataRows","idx","filteredRow","Streckennummer","col","formattedValue","encoding","CloudUpload","OpenInBrowser","handleClickOpen","MainForm","onSubmitSuccess","setOpen","formData","setFormData","PktNr","Met","state","Mastnummer","meters","Seite","resetForm","handleInputChange","catch","Fragment","handleChangeVermarkung","findIndex","handleClose","aria-labelledby","MainFormDialogContainer","_ref2","selectedRowData","setSelectedValue","IconButton","aria-label","EditIcon","table","minWidth","tableHead","editButton","secondary","TableWrapper","importData","colNames","TableContainer","Table","TableHead","TableRow","TableCell","align","TableBody","root","flexWrap","App","showDownloadButton","setShowDownloadButton","showTable","now","nextMidnight","setHours","interval","intervalId","setInterval","clear","clearIndexedDB","clearInterval","classnames","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","StrictMode","getElementById","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"wPAGO,SAASA,IACd,OAAO,IAAIC,QAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAUC,UAAUC,KALf,mBAK4B,GAEvCF,EAAQG,gBAAmBC,IACdA,EAAMC,OAAOC,OACrBC,kBARS,cAQoB,CAAEC,QAAS,KAAMC,eAAe,KAGlET,EAAQU,UAAaN,IACnB,MAAMO,EAAKP,EAAMC,OAAOC,OACxBR,EAAQa,IAGVX,EAAQY,QAAWR,IACjBL,EAAOK,EAAMC,OAAOQ,UAKnB,SAASC,EAAcH,EAAII,GAChC,OAAO,IAAIlB,QAAQ,CAACC,EAASC,KAC3B,MAEMC,EAFcW,EAAGK,YAAY,CAxBrB,eAwBkC,aACtBC,YAzBZ,eA0BQC,IAAIH,GAE1Bf,EAAQU,UAAY,KAClBZ,KAGFE,EAAQY,QAAU,KAChBb,EAAOC,EAAQa,UAKd,SAASM,EAAkBR,GAChC,OAAO,IAAId,QAAQ,CAACC,EAASC,KAC3B,MAEMC,EAFcW,EAAGK,YAAY,CAxCrB,eAwCkC,YACtBC,YAzCZ,eA0CQG,SAEtBpB,EAAQU,UAAY,KAClBZ,EAAQE,EAAQM,SAGlBN,EAAQY,QAAU,KAChBb,EAAOC,EAAQa,UAKrBQ,eAAeC,EAAiBX,EAAIY,GAClC,MAAMC,EAAKb,EAAGK,YAAY,cAAe,aACnCS,EAAQD,EAAGP,YAAY,qBACvBQ,EAAMC,OAAOH,SACbC,EAAGG,S,4JCxDLC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,MAAO,CACLC,WAAY,OACZC,SAAU,SACVC,aAAc,WAuCHC,EAnCG,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,MAAOC,EAA+B,EAA/BA,SAAUC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACpCC,EAAUZ,IAchB,OACE,oCACE,kBAACa,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAWH,EAAQT,OACzCO,GAEH,kBAACM,EAAA,EAAD,CACEC,UAAQ,EACRN,SAAUA,EACVO,WAAS,EACTR,KAAMA,EACNF,MAAOA,EACPW,SAvBoB,SAACC,GACzB,IAAIC,EAAWD,EAAE3C,OAAO+B,MAGX,mBAATE,IACFW,EAAWC,KAAKC,IAAI,EAAGC,SAASH,EAAU,KAAKI,WAAWC,MAAM,EAAG,IAIrEjB,EAASY,IAeLM,OAAO,SACPC,WAAY,CAAEC,MAAO,CAAEC,UAAW,aAEpC,+B,kCCnCA9B,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvC6B,OAAQ,CACNJ,OAAQzB,EAAM8B,QAAQ,GACtBC,QAAS,YACT5B,SAAU,OACV6B,cAAe,QAEjBC,iBAAkB,CAChBC,QAAS,OACTC,cAAe,MACfC,WAAY,UAEdC,gBAAiB,CACfT,UAAW,SACXU,UAAWtC,EAAM8B,QAAQ,QAgDdS,EA5CC,SAAC,GAIV,IAHLC,EAGI,EAHJA,aACAC,EAEI,EAFJA,0BACAC,EACI,EADJA,qBAEMhC,EAAUZ,IAEhB,OACE,kBAAC6C,EAAA,EAAD,CAAK9B,UAAWH,EAAQ2B,iBACtB,kBAACO,EAAA,EAAD,CACEhC,QAAQ,YACRiC,MAAM,UACNhC,UAAWH,EAAQmB,OACnBiB,QAAS,kBAAC,IAAD,MACTC,QAASP,GALX,eASA,6BACA,6BACA,kBAACG,EAAA,EAAD,CAAK9B,UAAWH,EAAQuB,kBACtB,kBAACW,EAAA,EAAD,CACEhC,QAAQ,YACRiC,MAAM,UACNhC,UAAWH,EAAQmB,OACnBmB,UAAW,kBAAC,IAAD,MACXD,QAAS,kBAAMN,MALjB,iCASA,kBAACG,EAAA,EAAD,CACEhC,QAAQ,YACRiC,MAAM,UACNhC,UAAWH,EAAQmB,OACnBmB,UAAW,kBAAC,IAAD,MACXD,QAAS,kBAAML,MALjB,+B,oDC/BR,MAAM5C,EAAYC,YAAYC,IAAK,CACjCC,MAAO,CACLC,WAAY,OACZC,SAAU,SACVC,aAAc,MACdwB,UAAW,UAEbqB,UAAW,CACT7C,aAAc,OAEhB8C,gBAAiB,CACfC,gBAAiBnD,EAAMoD,QAAQC,QAAQC,KACvCT,MAAO7C,EAAMoD,QAAQC,QAAQE,cAE/BC,cAAe,CACbL,gBAAiBnD,EAAMoD,QAAQrE,MAAMuE,KACrCT,MAAO7C,EAAMoD,QAAQrE,MAAMwE,iBAIlBE,EAAeA,CAACC,EAAOC,KAClC,MAAMjD,EAAUZ,KAET8D,EAAaC,GAAkBC,mBAAS,KACxCC,EAAgBC,GAAqBF,mBAAS,KAC9CG,EAAIC,GAASJ,mBAAS,KACtBK,EAAKC,GAAUN,mBAAS,KACxBO,EAAOC,GAAYR,oBAAS,IAC5BS,EAAWC,GAAgBV,mBAAS,KACpCW,EAAYC,GAAiBZ,mBAAS,KACtCa,EAAgBC,GAAqBd,mBAAS,OAC9Ce,EAA2BC,GAChChB,mBAAS,OACJiB,EAAYC,GAAiBlB,mBAAS,KACtCmB,EAAKC,GAAUpB,mBAAS,KACxBqB,EAAOC,GAAYtB,mBAAS,OAC7B,QAAEuB,EAAO,cAAEC,EAAa,KAAElH,GAASsF,GAClC6B,EAAgBC,IAAqB1B,mBAAS,KAC9C2B,GAAcC,IAAmB5B,mBAAS,KAC1C6B,GAAaC,IAAkB9B,mBAAS,KACxC+B,GAAaC,IAAkBhC,oBAAS,IACxCiC,GAAaC,IAAkBlC,mBAAS,IAG/CmC,oBAAU,KACRD,IAAe,IAAIE,MAAOC,cAAc3E,MAAM,EAAG,MAChD,CAACuE,GAAaC,KAajB,MAqBMI,GAAOC,iBAAO,MAiBdC,GAAoB,CACxB,CAAEhG,MAAO,GAAIiG,MAAO,UACpB,CAAEjG,MAAO,GAAIiG,MAAO,WACpB,CAAEjG,MAAO,GAAIiG,MAAO,QACpB,CAAEjG,MAAO,GAAIiG,MAAO,aACpB,CAAEjG,MAAO,GAAIiG,MAAO,qBACpB,CAAEjG,MAAO,GAAIiG,MAAO,cACpB,CAAEjG,MAAO,GAAIiG,MAAO,cAGhBC,GAAgB,CACpB,CAAElG,MAAO,EAAGiG,MAAO,iCACnB,CAAEjG,MAAO,EAAGiG,MAAO,4CAgXrB,OACEE,IAAAC,cAACC,IAAM,CAACvI,KAAMsF,EAAMtF,KAAMiH,QAAS3B,EAAM2B,SACvCoB,IAAAC,cAAC/D,IAAG,CACFT,QAAQ,OACRC,cAAc,SACdC,WAAW,SACXwE,eAAe,SACfC,SAAS,QACTpF,OAAO,SACPM,QAAQ,OACRO,UAAU,OACVwE,OAAO,iBACPC,aAAa,MACbC,UAAU,8BAEVP,IAAAC,cAACrG,EAAS,CACRG,KAAK,cACLF,MAAOsD,EACPrD,SAAUsD,IAEZ4C,IAAAC,cAACrG,EAAS,CACRG,KAAK,iBACLF,MAAOyD,EACPxD,SAAUyD,IAEZyC,IAAAC,cAAC/F,IAAU,CAACC,QAAQ,KAAKC,UAAWH,EAAQT,OAAO,uBAGnDwG,IAAAC,cAAC/D,IAAG,CAACT,QAAQ,OAAOC,cAAc,MAAMC,WAAW,UACjDqE,IAAAC,cAAC5F,IAAS,CACRC,UAAQ,EACRT,MAAO2D,EACPtC,MAAO,CAAEsF,YAAa,OACtBxH,GAAG,KACHe,KAAK,KACL0G,YAAY,WACZjG,SAAWC,GAAMgD,EAAMhD,EAAE3C,OAAO+B,OAChCoB,WAAY,CAAEC,MAAO,CAAEC,UAAW,UAAYuF,UAAW,KAE3DV,IAAAC,cAAC/F,IAAU,KAAC,MACZ8F,IAAAC,cAAC5F,IAAS,CACRC,UAAQ,EACRT,MAAO6D,EACPxC,MAAO,CAAEyF,WAAY,OACrB3H,GAAG,MACHe,KAAK,MACL0G,YAAY,KACZjG,SAAWC,GAAMkD,EAAOlD,EAAE3C,OAAO+B,OACjCoB,WAAY,CAAEC,MAAO,CAAEC,UAAW,UAAYuF,UAAW,MAG7DV,IAAAC,cAAA,WACAD,IAAAC,cAAC/F,IAAU,CAACC,QAAQ,KAAKC,UAAWH,EAAQT,OAAO,+BAInDwG,IAAAC,cAAC/D,IAAG,CAACT,QAAQ,OAAOC,cAAc,MAAMC,WAAW,UACjDqE,IAAAC,cAACW,IAAW,CAACC,UAAU,YACrBb,IAAAC,cAACa,IAAU,CACTC,KAAG,EACHzG,UAAQ,EACRtB,GAAG,QACHe,KAAK,QACLF,MAAO+D,EACPpD,SAAWC,GAAMoD,EAASpD,EAAE3C,OAAO+B,QAEnCmG,IAAAC,cAACe,IAAgB,CAACnH,MAAM,IAAIoH,QAASjB,IAAAC,cAACiB,IAAK,MAAKpB,MAAM,MACtDE,IAAAC,cAACe,IAAgB,CAACnH,MAAM,IAAIoH,QAASjB,IAAAC,cAACiB,IAAK,MAAKpB,MAAM,QAI1DE,IAAAC,cAAC5F,IAAS,CACRE,WAAS,EACTV,MAAOiE,EACPtD,SAAWC,GAAMsD,EAAatD,EAAE3C,OAAO+B,OACvCiG,MAAM,YACN9G,GAAG,YACHe,KAAK,YACLoH,gBAAiB,CACfjG,MAAO,CAAEC,UAAW,SAAUiG,MAAO,OAAQT,WAAY,MAE3D1F,WAAY,CAAEC,MAAO,CAAEC,UAAW,cAGtC6E,IAAAC,cAAA,WACAD,IAAAC,cAACrG,EAAS,CACRG,KAAK,aACLF,MAAOmE,EACPlE,SAAUmE,EACVjE,SACgC,OAA9BoE,GAC8B,KAA9BA,IAGJ4B,IAAAC,cAAC/F,IAAU,CAACC,QAAQ,KAAKC,UAAWH,EAAQT,OAAO,WAGnDwG,IAAAC,cAACW,IAAW,CAACrG,WAAS,GACpByF,IAAAC,cAACoB,IAAM,CACLC,QAAQ,SACRtI,GAAG,SACHa,MAAOqE,EACP4B,MAAM,SACNtF,SAAW3C,GA7cOA,KAC1BsG,EAAkBtG,EAAMC,OAAO+B,QA4cF0H,CAAmB1J,IAEvCkI,GAAcyB,IAAKC,GAClBzB,IAAAC,cAACyB,IAAQ,CAACC,IAAKF,EAAO5H,MAAOA,MAAO4H,EAAO5H,OACxC4H,EAAO3B,UAKhBE,IAAAC,cAAC/F,IAAU,CAACC,QAAQ,KAAKC,UAAWH,EAAQT,OAAO,gFAGnDwG,IAAAC,cAACW,IAAW,CAACrG,WAAS,GACpByF,IAAAC,cAAC2B,IAAU,CAAC5I,GAAG,4BAA2B,wBAG1CgH,IAAAC,cAACoB,IAAM,CACLC,QAAQ,qBACRtI,GAAG,qBACHa,MAAOuE,EACP0B,MAAM,aACNtF,SAAW3C,GAzekBA,KACrCwG,EAA6BxG,EAAMC,OAAO+B,OACtChC,EAAMC,OAAO+B,OACfoE,EAAc,KAsea4D,CAA8BhK,GACnDmC,WAAYgE,GAEX6B,GAAkB2B,IAAKC,GACtBzB,IAAAC,cAACyB,IAAQ,CAACC,IAAKF,EAAO5H,MAAOA,MAAO4H,EAAO5H,OACxC4H,EAAO3B,UAKhBE,IAAAC,cAACrG,EAAS,CACRG,KAAK,YACLF,MAAOyE,EACPxE,SAAUyE,EACVvE,SAAwC,KAA9BoE,IAEZ4B,IAAAC,cAAA,WACAD,IAAAC,cAACrG,EAAS,CAACG,KAAK,cAAcF,MAAO2E,EAAK1E,SAAU2E,IACpDuB,IAAAC,cAAA,WACAD,IAAAC,cAAC/F,IAAU,CAACC,QAAQ,KAAKC,UAAWH,EAAQT,OAAO,SAGnDwG,IAAAC,cAAA,WACAD,IAAAC,cAAC5F,IAAS,CACRC,UAAQ,EACRC,WAAS,EACTR,KAAK,cACL0G,YAAY,kBACZ5G,MAAOyF,GACP9E,SAAWC,IACT8E,GAAe9E,EAAE3C,OAAO+B,QAE1BmB,OAAO,SACPC,WAAY,CAAEC,MAAO,CAAEC,UAAW,aAEpC6E,IAAAC,cAAA,WACAD,IAAAC,cAAC/F,IAAU,CAACC,QAAQ,KAAKC,UAAWH,EAAQT,OAAO,kBAUnDwG,IAAAC,cAAA,SACE/C,IAAM4E,GAAQnC,GAAKoC,QAAUD,EAC7BxH,UAAQ,EACR0H,KAAK,OACLjI,KAAK,QACLkI,OAAO,yBACPzH,SAAWC,GAllBQA,KACzB,MAAMyH,EAAYzH,EAAE3C,OAAOqK,MAAM,GACjCxD,EAASuD,IAglBcE,CAAkB3H,MAGvCuF,IAAAC,cAACnE,EAAO,CACNC,aAthBeA,KAEnB,IAAK2C,EAGH,OAFAO,GAAgB,gEAChBF,GAAkB,IAIpB,IAAKzB,EAKH,OAJA2B,GACE,sEAEFF,GAAkB,IAGpB,IAAKvB,GAAME,EAKT,OAJAuB,GACE,sEAEFF,GAAkB,IAGpB,IAAKnB,EAGH,OAFAqB,GAAgB,kEAChBF,GAAkB,IAGpB,IAAKf,EAKH,OAJAiB,GACE,mEAEFF,GAAkB,IAGpB,IAAKb,EAKH,OAJAe,GACE,oEAEFF,GAAkB,IAhGpB3B,EAAe,IACfG,EAAkB,IAClBE,EAAM,IACNE,EAAO,IACPE,GAAS,GACTE,EAAa,IACbE,EAAc,IACdE,EAAkB,MAClBE,EAA6B,MAC7BI,EAAO,IACPF,EAAc,IACdI,EAAS,MACTY,IAAe,IAAIE,MAAOC,cAAc3E,MAAM,EAAG,KA0FjD,MAAMsH,EAAS,IAAIC,WAEnBD,EAAOE,OAASzJ,UACd,MAAM0J,EAAc3K,EAAMC,OAAOC,OAIjC,MAAM0K,EAAQ,IAAIC,MAClBD,EAAME,IAAMH,EAEZC,EAAMF,OAASzJ,UAEb,GAAIjB,EAAM+K,OARW,OAQc,CAAC,IAADC,EAAAC,EAEjC,MAAMC,EAAkB3E,EAGnB,QAH4CyE,EAC7ChD,GAAkBmD,KACfvB,GAAWA,EAAO5H,QAAUuE,UAC9B,IAAAyE,OAAA,EAFDA,EAEG/C,MACH,GAEEmD,EAAc/E,EAC+C,QADjC4E,EAC9B/C,GAAciD,KAAMvB,GAAWA,EAAO5H,QAAUqE,UAAe,IAAA4E,OAAA,EAA/DA,EACIhD,MACJ,GAEEoD,EAAgB,CACpB/F,YAAaA,EACbG,eAAgBA,EAChBE,GAAIA,EACJE,IAAKA,EACLE,MAAOA,EACPE,UAAWA,EACXE,WAAYA,EACZI,0BAA2B2E,EAC3B7E,eAAgB+E,EAChB3E,WAAYA,EACZE,IAAKA,EACLc,YAAaA,GACbZ,MAAO8D,GAIT,IACE,MAAMpK,QAAWf,UACXkB,EAAcH,EAAI8K,GACxB,MAAMC,QAAavK,EAAkBR,GACrC+G,GAAegE,GACfpE,GAAkB,8BAClBM,IAAe,GACf,MAAO/G,GACP8K,QAAQ9K,MAAM,wCAAyCA,GACxD,QAEC+K,WAAW,KACTtE,GAAkB,KACjB,UAEA,CACL,MAAMuE,EAASC,SAAStD,cAAc,UAChCuD,EAAMF,EAAOG,WAAW,MAE9BH,EAAOlC,MAAQqB,EAAMrB,MACrBkC,EAAOI,OAASjB,EAAMiB,OAEtBF,EAAIG,UAAUlB,EAAO,EAAG,EAAGA,EAAMrB,MAAOqB,EAAMiB,QAE9C,IAAK,IAADE,EAAAC,EACF,MAAMC,QAA4B,IAAIxM,QAASC,IAC7C+L,EAAOS,OAAOxM,EAAS,aA/DjB,KAkEFyM,QAAwBC,YAC5BH,EACA,CACEI,UAAW,GACXC,iBAAkB,KAClBC,cAAc,IAGlBhB,QAAQiB,IACN,iCACAL,aAA2BM,MAE7BlB,QAAQiB,IAAI,uBAADE,OACcP,EAAgBQ,KAAO,KAAO,KAAI,QAG3D,MAAMzB,EAAkB3E,EAGnB,QAH4CwF,EAC7C/D,GAAkBmD,KACfvB,GAAWA,EAAO5H,QAAUuE,UAC9B,IAAAwF,OAAA,EAFDA,EAEG9D,MACH,GAEEmD,EAAc/E,EAC+C,QADjC2F,EAC9B9D,GAAciD,KAAMvB,GAAWA,EAAO5H,QAAUqE,UAAe,IAAA2F,OAAA,EAA/DA,EACI/D,MACJ,GAEEoD,EAAgB,CACpB/F,YAAaA,EACbG,eAAgBA,EAChBE,GAAIA,EACJE,IAAKA,EACLE,MAAOA,EACPE,UAAWA,EACXE,WAAYA,EACZE,eAAgB+E,EAChB7E,0BAA2B2E,EAC3BzE,WAAYA,EACZE,IAAKA,EACLc,YAAaA,GACbZ,MAAOsF,GAIT,IACE,MAAM5L,QAAWf,UACXkB,EAAcH,EAAI8K,GACxB,MAAMC,QAAavK,EAAkBR,GACrC+G,GAAegE,GACfpE,GAAkB,8BAClBM,IAAe,GACf,MAAO/G,GACP8K,QAAQ9K,MAAM,wCAAyCA,IAEzD,MAAOA,GAQP8K,QAAQ9K,MAAM,4BAA6BA,OAOnD+J,EAAOoC,cAAc/F,GACrBiB,GAAKoC,QAAQlI,MAAQ,IA8VjBoC,qBAvQuBA,KAC3B,MAAMyI,EAAM,IAAIC,IAGVC,EACJ,gKACA1F,GACGsC,IAAKqD,IACJ,MAAMC,GAAeD,EAAMrG,IAAM,KAAMuG,eAAe,QAAS,CAC7DC,sBAAuB,IAEzB,MAAM,GAANT,OAAUM,EAAM1H,YAAW,KAAAoH,OAAIM,EAAMvH,eAAc,KAAAiH,OAAIM,EAAMrH,GAAE,KAAA+G,OAAIM,EAAMnH,IAAG,KAAA6G,OAAIM,EAAMjH,MAAK,KAAA2G,OAAIM,EAAM/G,UAAS,KAAAyG,OAAIM,EAAM7G,WAAU,KAAAuG,OAAIM,EAAM3G,eAAc,KAAAqG,OAAIM,EAAMzG,0BAAyB,KAAAmG,OAAIM,EAAMvG,WAAU,KAAAiG,OAAIO,EAAW,KAAAP,OAAIM,EAAMvF,eAE3O2F,KAAK,MAEVP,EAAIQ,KAAK,iBAAkBN,GAE3B,MAAMO,EAA2BT,EAAIU,OAAO,wBACtCC,EAA4BX,EAAIU,OAAO,yBAG7ClG,GAAYoG,QAAQ,CAACxD,EAAIyD,KACvB,MAAMC,EAAO1D,EAAGxC,YAAYmG,QAAQ,KAAM,IAC1C,IAAIC,EAUAC,EAOAC,EAfJ,GAAI9D,EAAGpE,KAAOoE,EAAGpE,IAAI5C,WAAW+K,QAAU,EAAG,CAC3C,MAAMC,EAAcC,WAAWjE,EAAGpE,KAC5BsI,EAA4C,GAA/BrL,KAAKsL,MAAMH,EAAc,IAC5CJ,EAA6B/K,KAAKuL,MAAMF,EAAa,SAErDN,EAA6B5D,EAAGpE,IAYlC,GAPEiI,EADwB,0BAAtB7D,EAAG5D,eACSmH,EAEAF,EAKZrD,EAAG9D,YAAc8D,EAAG9D,WAAWmI,SAAS,KAAM,CAChD,IAAInI,EAAa8D,EAAG9D,WACpBA,EAAaA,EAAWoI,OAAOrL,MAAM,GAAI,GACzC6K,EAAQ,GAAArB,OAAMzC,EAAGxE,eAAc,KAAAiH,OAAIzC,EAAGtE,GAAE,KAAA+G,OAAImB,EAA0B,KAAAnB,OAAIzC,EAAGlE,MAAK,KAAA2G,OAAIvG,EAAU,KAAAuG,OAAIiB,EAAI,aACnG,GACL1D,EAAG1D,2BAC8B,cAAjC0D,EAAG1D,0BAEHwH,EAAQ,GAAArB,OAAMzC,EAAGxE,eAAc,KAAAiH,OAAIzC,EAAGtE,GAAE,KAAA+G,OAAImB,EAA0B,KAAAnB,OAAIzC,EAAGlE,MAAK,KAAA2G,OAAIzC,EAAG1D,0BAAyB,KAAAmG,OAAIiB,EAAI,aACrH,GAAI1D,EAAGxD,WACZsH,EAAQ,GAAArB,OAAMzC,EAAGxE,eAAc,KAAAiH,OAAIzC,EAAGtE,GAAE,KAAA+G,OAAImB,EAA0B,KAAAnB,OAAIzC,EAAGlE,MAAK,KAAA2G,OAAIzC,EAAGxD,WAAU,KAAAiG,OAAIiB,EAAI,YACtG,KAAI1D,EAAG9D,WAKZ,YADAoF,QAAQ9K,MAAM,2BAHdsN,EAAQ,GAAArB,OAAMzC,EAAGxE,eAAc,KAAAiH,OAAIzC,EAAGtE,GAAE,KAAA+G,OAAImB,EAA0B,KAAAnB,OAAIzC,EAAGlE,MAAK,KAAA2G,OAAIzC,EAAG9D,WAAU,KAAAuG,OAAIiB,EAAI,QAM7G,GAAI1D,EAAGpD,iBAAiB4F,KAEtBqB,EAAYT,KAAKU,EAAU9D,EAAGpD,YACzB,GAAwB,kBAAboD,EAAGpD,MAAoB,CAEvC,MAAM2H,EAAavE,EAAGpD,MAAM4H,MAAM,KAAK,GACvCX,EAAYT,KAAKU,EAAUS,EAAY,CAAEE,QAAQ,OAKrD7B,EAAI8B,cAAc,CAAExE,KAAM,SAAUyE,KAAMC,IACxC,MAAMC,EAAMC,OAAOC,IAAIC,gBAAgBJ,GACjCK,EAAOxD,SAAStD,cAAc,KACpC8G,EAAKC,KAAOL,EACZI,EAAKE,SAAW,oBAChB5D,WAAW,KACT0D,EAAKG,SACJ,QA0LDlL,0BA5V4BA,KAChC,MAAM0I,EAAM,IAAIC,IACVwC,EAAmBjI,GAAYkI,OAClCvC,GAAUA,EAAMvF,cAAgBA,IAI7BsF,EACJ,iKACAuC,EACG3F,IAAKqD,IACJ,MAAMC,GAAeD,EAAMrG,IAAM,KAAMuG,eAAe,QAAS,CAC7DC,sBAAuB,IAEzB,MAAM,GAANT,OAAUM,EAAM1H,YAAW,KAAAoH,OAAIM,EAAMvH,eAAc,KAAAiH,OAAIM,EAAMrH,GAAE,KAAA+G,OAAIM,EAAMnH,IAAG,KAAA6G,OAAIM,EAAMjH,MAAK,KAAA2G,OAAIM,EAAM/G,UAAS,KAAAyG,OAAIM,EAAM7G,WAAU,KAAAuG,OAAIM,EAAM3G,eAAc,KAAAqG,OAAIM,EAAMzG,0BAAyB,KAAAmG,OAAIM,EAAMvG,WAAU,KAAAiG,OAAIO,EAAW,KAAAP,OAAIjF,MAErO2F,KAAK,MAEVP,EAAIQ,KAAK,GAADX,OAAIjF,GAAW,QAAQsF,GAE/B,MAAMO,EAA2BT,EAAIU,OAAO,wBACtCC,EAA4BX,EAAIU,OAAO,yBAG7C+B,EAAiB7B,QAAQ,CAACxD,EAAIyD,KAC5B,MAAMC,EAAO1D,EAAGxC,YAAYmG,QAAQ,KAAM,IAC1C,IAAIC,EAQAC,EAOAC,EAdJ,GAAI9D,EAAGpE,KAAOoE,EAAGpE,IAAI5C,WAAW+K,QAAU,EAAG,CAC3C,MAAMC,EAAcC,WAAWjE,EAAGpE,KAC5BsI,EAA4C,GAA/BrL,KAAKsL,MAAMH,EAAc,IAC5CJ,EAA6B/K,KAAKuL,MAAMF,EAAa,SAErDN,EAA6B5D,EAAGpE,IAWlC,GAPEiI,EADwB,0BAAtB7D,EAAG5D,eACSmH,EAEAF,EAKZrD,EAAG9D,YAAc8D,EAAG9D,WAAWmI,SAAS,KAAM,CAChD,IAAInI,EAAa8D,EAAG9D,WACpBA,EAAaA,EAAWoI,OAAOrL,MAAM,GAAI,GACzC6K,EAAQ,GAAArB,OAAMzC,EAAGxE,eAAc,KAAAiH,OAAIzC,EAAGtE,GAAE,KAAA+G,OAAImB,EAA0B,KAAAnB,OAAIzC,EAAGlE,MAAK,KAAA2G,OAAIvG,EAAU,KAAAuG,OAAIiB,EAAI,aACnG,GACL1D,EAAG1D,2BAC8B,cAAjC0D,EAAG1D,0BAEHwH,EAAQ,GAAArB,OAAMzC,EAAGxE,eAAc,KAAAiH,OAAIzC,EAAGtE,GAAE,KAAA+G,OAAImB,EAA0B,KAAAnB,OAAIzC,EAAGlE,MAAK,KAAA2G,OAAIzC,EAAG1D,0BAAyB,KAAAmG,OAAIiB,EAAI,aACrH,GAAI1D,EAAGxD,WACZsH,EAAQ,GAAArB,OAAMzC,EAAGxE,eAAc,KAAAiH,OAAIzC,EAAGtE,GAAE,KAAA+G,OAAImB,EAA0B,KAAAnB,OAAIzC,EAAGlE,MAAK,KAAA2G,OAAIzC,EAAGxD,WAAU,KAAAiG,OAAIiB,EAAI,YACtG,KAAI1D,EAAG9D,WAKZ,YADAoF,QAAQ9K,MAAM,2BAHdsN,EAAQ,GAAArB,OAAMzC,EAAGxE,eAAc,KAAAiH,OAAIzC,EAAGtE,GAAE,KAAA+G,OAAImB,EAA0B,KAAAnB,OAAIzC,EAAGlE,MAAK,KAAA2G,OAAIzC,EAAG9D,WAAU,KAAAuG,OAAIiB,EAAI,QAM7G,GAAI1D,EAAGpD,iBAAiB4F,KAEtBqB,EAAYT,KAAKU,EAAU9D,EAAGpD,YACzB,GAAwB,kBAAboD,EAAGpD,MAAoB,CAEvC,MAAM2H,EAAavE,EAAGpD,MAAM4H,MAAM,KAAK,GACvCX,EAAYT,KAAKU,EAAUS,EAAY,CAAEE,QAAQ,OAKrD7B,EAAI8B,cAAc,CAAExE,KAAM,SAAUyE,KAAMC,IACxC,MAAMW,GAAW,IAAI5H,MAAOC,cAAc3E,MAAM,EAAG,IAC7C4L,EAAMC,OAAOC,IAAIC,gBAAgBJ,GACjCK,EAAOxD,SAAStD,cAAc,KACpC8G,EAAKC,KAAOL,EACZI,EAAKE,SAAQ,GAAA1C,OAAM8C,EAAQ,QAC3BhE,WAAW,KACT0D,EAAKG,SACJ,UA8QHlH,IAAAC,cAACqH,IAAQ,CACP3P,OAAQmH,EACRyI,iBAAkB,IAClB3I,QA/jBqB4I,CAAC3P,EAAO4P,KAClB,cAAXA,IAGJ1I,GAAkB,IAClBM,IAAe,MA4jBXW,IAAAC,cAACyH,IAAe,CACdC,QAAS7I,EACT1E,UAAWH,EAAQwC,mBAIvBuD,IAAAC,cAACqH,IAAQ,CACP3P,OAAQqH,GACRuI,iBAAkB,KAClB3I,QAjlBmBgJ,CAAC/P,EAAO4P,KAChB,cAAXA,GAGJxI,GAAgB,MA+kBZe,IAAAC,cAACyH,IAAe,CACdC,QAAS3I,GACT5E,UAAWH,EAAQ8C,mBCvrB7B,MAyDM1D,EAAYC,YAAYC,IAAK,CACjCsO,OAAQ,CACNvM,QAAS/B,EAAM8B,QAAQ,GACvBqB,gBAAiBnD,EAAMoD,QAAQmL,QAAQjL,KACvCT,MAAO7C,EAAMoD,QAAQoL,OAAOC,OAE9BtB,QAAS,CACPpL,QAAS/B,EAAM8B,QAAQ,GACvBqB,gBAAiBnD,EAAMoD,QAAQsL,WAAWC,OAE5CtM,gBAAiB,CACfC,UAAWtC,EAAM8B,QAAQ,GACzBF,UAAW,UAEbC,OAAQ,CACNK,QAAS,QACTT,OAAQ,YACRM,QAAS,YACT5B,SAAU,OACV6B,cAAe,OACfmB,gBAAiB,UACjBN,MAAO7C,EAAMoD,QAAQoL,OAAOC,MAC5B,UAAW,CACTtL,gBAAiB,YAGrByL,MAAO,CACL1M,QAAS,WA6FE2M,MAzFGC,IAAmD,IAAlD,aAAEC,EAAY,cAAEC,EAAa,YAAEC,GAAaH,EAC7D,MAAMpO,EAAUZ,KACToP,EAAUC,GAAerL,oBAAS,IAClCsL,EAAcC,GAAmBvL,oBAAS,IAC1CwL,EAAiBC,GAAsBzL,oBAAS,GAgCvD,OACE2C,IAAAC,cAAC/D,IAAG,KACF8D,IAAAC,cAAC8I,IAAK,CAAC3O,UAAWH,EAAQ4N,OAAQmB,UAAW,GAC3ChJ,IAAAC,cAAC/F,IAAU,CAACC,QAAQ,MAAK,uBAE3B6F,IAAAC,cAAC8I,IAAK,CAAC3O,UAAWH,EAAQyM,QAASsC,UAAW,GAC5ChJ,IAAAC,cAAC/D,IAAG,CAAC9B,UAAWH,EAAQ2B,iBACtBoE,IAAAC,cAAA,SAAOgJ,QAAQ,aACbjJ,IAAAC,cAACiJ,IAAK,CACJjH,OAAO,OACP7H,UAAWH,EAAQkO,MACnBnP,GAAG,YACHgJ,KAAK,OACLxH,SAnCc3C,IACxB,MAAMqN,EAAOrN,EAAMC,OAAOqK,MAAM,GAG5B+C,EAEgB,aAAdA,EAAKlD,MAAuBkD,EAAKnL,KAAKoM,SAAS,SA5GnCgD,EAACjE,EAAMqD,EAAeC,KAC1CY,IAAKC,MAAMnE,EAAM,CACf9L,SAAWrB,IACT,MAAMgC,EAAOmL,EAAKnL,KAAOmL,EAAKnL,KAAKuM,MAAM,KAAKgD,GAAG,GAAK,GAGtD,GAAIvR,EAAOoL,MAAQpL,EAAOoL,KAAK0C,OAAS,EAAG,CACvB0D,OAAOC,KAAKzR,EAAOoL,KAAK,IAA1C,MAGMsG,EAAW1R,EAAOoL,KAAKpI,MAAM,GAAI,GAGjC2O,EAAmB,CAAC,QAAS,kBAG7BC,EAAmBF,EAASjI,IAAI,CAACM,EAAI8H,KACzC,MAAMC,EAAc,CAClB7Q,GAAI4Q,EACJE,eAAgB/P,EAChB,cAAe,IAoBjB,OAjBA2P,EAAiBpE,QAASyE,IACxB,GAAY,mBAARA,EAA0B,CAE5B,MAIMC,EAJiBlI,EAAGiI,GAAKjP,WAE5BwL,MAAM,KAAK,GACXb,QAAQ,MAAO,IACiBA,QACjC,wBACA,KAEFoE,EAAYE,GAAOC,OAEnBH,EAAYE,GAAOjI,EAAGiI,KAInBF,IAGTtB,EAAcoB,GAGdnB,EAAY,IAAIkB,EAAkB,iBAAkB,qBAEpDtG,QAAQ9K,MAAM,uCAIlBuP,QAAQ,EACRoC,SAAU,gBAwDNd,CAAcjE,EAAMqD,EAAeC,GACnCF,GAAa,GACbM,GAAgB,GAChBE,GAAmB,KAGnBA,GAAmB,GACnBF,GAAgB,KAGlBA,GAAgB,GAChBE,GAAmB,OAmBb9I,IAAAC,cAAC9D,IAAM,CACLhC,QAAQ,YACRoC,UAAWyD,IAAAC,cAACiK,IAAW,MACvB9N,MAAM,YACNhC,UAAWH,EAAQmB,OACnByF,UAAU,QACX,+BAIFgI,GACC7I,IAAAC,cAAC/F,IAAU,CAACC,QAAQ,QAAQiC,MAAM,SAAQ,iCAK9C4D,IAAAC,cAAC/D,IAAG,KACF8D,IAAAC,cAAC9D,IAAM,CACLhC,QAAQ,YACRoC,UAAWyD,IAAAC,cAACkK,IAAa,MACzB/N,MAAM,YACNhC,UAAWH,EAAQmB,OACnByF,UAAU,OACVvE,QApEc8N,KACtB1B,GAAY,KAoEL,qBAGD1I,IAAAC,cAACjD,EAAY,CACX6B,cAAe,GACflH,KAAM8Q,EACN7J,QAvEW/E,IACnB6O,GAAY,U,uDC/EhB,MAAMrP,GAAYC,YAAYC,IAAK,CACjCC,MAAO,CACLC,WAAY,OACZC,SAAU,SACVC,aAAc,OAEhB6C,UAAW,CACT7C,aAAc,OAEhB8C,gBAAiB,CACfC,gBAAiBnD,EAAMoD,QAAQC,QAAQC,KACvCT,MAAO7C,EAAMoD,QAAQC,QAAQE,cAE/BC,cAAe,CACbL,gBAAiBnD,EAAMoD,QAAQrE,MAAMuE,KACrCT,MAAO7C,EAAMoD,QAAQrE,MAAMwE,iBAyuBhBuN,OAruBEhC,IAA6D,IAA5D,KAAE1I,EAAI,IAAEoB,EAAG,cAAEwH,EAAa,gBAAE+B,EAAe,QAAEC,GAASlC,EACtE,MAAOmC,EAAUC,GAAepN,mBAAS,CACvCO,OAAO,EACPE,UAAW,GACXU,IAAK,GACLE,MAAO,QAGFvB,EAAaC,GAAkBC,mBAAS0D,EAAI2J,MAAQ3J,EAAI2J,MAAQ,KAChEpN,EAAgBC,GAAqBF,mBAC1C0D,EAAI+I,eAAiB/I,EAAI+I,eAAiB,KAErCtM,EAAIC,GAASJ,mBAClB0D,EAAI,kBAAoBA,EAAI,kBAAoB,KAE3CrD,EAAKC,GAAUN,mBAAS0D,EAAI4J,IAAM5J,EAAI4J,IAAM,KAC5C/M,EAAOC,GAAYR,mBAAS,KAC5BS,EAAWC,GAAgBV,mBAAS,KACpCW,EAAYC,GAAiBZ,mBAAS,KACtCe,EAA2BC,GAChChB,mBAAS,OACJa,EAAgBC,GAAqBd,mBAAS,OAC9CiB,EAAYC,GAAiBlB,mBAAS,KACtCmB,EAAKC,GAAUpB,mBAAS,KACxBqB,EAAOC,GAAYtB,mBAAS,KAC5ByB,GAAgBC,IAAqB1B,mBAAS,KAC9C2B,GAAcC,IAAmB5B,mBAAS,KAC1C6B,GAAaC,IAAkB9B,mBAAS,IAI/CmC,oBAAU,KACR+I,EAAeqC,GACbA,EAAMpJ,IAAKM,GACLA,EAAG9I,KAAO+H,EAAI/H,GACT,IACF8I,EACH,cAAetD,GAGfsD,EAAG9I,KAAO+H,EAAI/H,GACT,IACF8I,EACH+I,WAAY7M,GAGT8D,KAGV,CAACtD,EAAKR,EAAY+C,EAAI/H,GAAIuP,IAG7B,MAAOnJ,GAAaC,IAAkBhC,oBAAS,IACxCiC,GAAaC,IAAkBlC,mBAAS,IAE/CmC,oBAAU,KAER,GADAD,IAAe,IAAIE,MAAOC,cAAc3E,MAAM,EAAG,KAC7CgG,EAAK,CACP,GAAIA,EAAI,kBAAmB,CACzB,MAAOvD,EAAIsN,GAAU/J,EAAI,kBAAkBuF,MAAM,KAGjD7I,EAAMD,GACNG,EAAOmN,GAEL/J,EAAIgK,OACNlN,EAASkD,EAAIgK,SAGhB,CAAChK,EAAKxB,KAET,MAAMtF,GAAUZ,KAEVwG,GAAoB,CACxB,CAAEhG,MAAO,GAAIiG,MAAO,UACpB,CAAEjG,MAAO,GAAIiG,MAAO,WACpB,CAAEjG,MAAO,GAAIiG,MAAO,QACpB,CAAEjG,MAAO,GAAIiG,MAAO,aACpB,CAAEjG,MAAO,GAAIiG,MAAO,qBACpB,CAAEjG,MAAO,GAAIiG,MAAO,cACpB,CAAEjG,MAAO,GAAIiG,MAAO,cAGhBC,GAAgB,CACpB,CAAElG,MAAO,EAAGiG,MAAO,eACnB,CAAEjG,MAAO,EAAGiG,MAAO,wBACnB,CAAEjG,MAAO,EAAGiG,MAAO,0BAgZfkL,GAAYA,KAChBP,EAAY,CACVjN,GAAI,GACJE,IAAK,GACLE,MAAO,GACPE,UAAW,GACXX,YAAa,GACbqB,IAAK,GACLE,MAAO,QAILuM,GAAqBxQ,IACzB,MAAM,KAAEV,EAAI,MAAEF,GAAUY,EAAE3C,OAC1B2S,EAAY,IACPD,EACH,CAACzQ,GAAOF,KAiBZ,OARA2F,oBAAU,KACRnI,IACGoP,KAAMrO,IACLQ,EAAkBR,GAAIqO,KAAMtD,GAAShE,GAAegE,MAErD+H,MAAO5S,GAAU8K,QAAQ9K,MAAM,2BAA4BA,KAC7D,IAGD0H,IAAAC,cAAAD,IAAAmL,SAAA,KACEnL,IAAAC,cAAC/D,IAAG,CACFT,QAAQ,OACRC,cAAc,SACdC,WAAW,SACXwE,eAAe,SACfC,SAAS,QACTpF,OAAO,SACPM,QAAQ,OACR+E,OAAO,iBACPC,aAAa,MACbC,UAAU,8BAEVP,IAAAC,cAACrG,EAAS,CACRC,MAAOsD,EACPrD,SAAUsD,EACVrD,KAAK,gBAEPiG,IAAAC,cAACrG,EAAS,CACRC,MAAOyD,EACPxD,SAAUyD,EACVxD,KAAK,mBAGPiG,IAAAC,cAAC/F,IAAU,CAACC,QAAQ,KAAKC,UAAWH,GAAQT,OAAO,uBAGnDwG,IAAAC,cAAC/D,IAAG,CAACT,QAAQ,OAAOC,cAAc,MAAMC,WAAW,UACjDqE,IAAAC,cAAC5F,IAAS,CACRC,UAAQ,EACRY,MAAO,CAAEsF,YAAa,OACtBxH,GAAG,KACHe,KAAK,KACL0G,YAAY,UACZ5G,MAAO2D,EACPhD,SAAUyQ,GACVhQ,WAAY,CAAEC,MAAO,CAAEC,UAAW,UAAYuF,UAAW,KAE3DV,IAAAC,cAAC/F,IAAU,KAAC,MACZ8F,IAAAC,cAAC5F,IAAS,CACRC,UAAQ,EACRY,MAAO,CAAEyF,WAAY,OACrB3H,GAAG,MACHe,KAAK,MACL0G,YAAY,MACZ5G,MAAO6D,EACPlD,SAAUyQ,GACVhQ,WAAY,CAAEC,MAAO,CAAEC,UAAW,UAAYuF,UAAW,MAG7DV,IAAAC,cAAA,WACAD,IAAAC,cAAC/F,IAAU,CAACC,QAAQ,KAAKC,UAAWH,GAAQT,OAAO,+BAInDwG,IAAAC,cAAC/D,IAAG,CAACT,QAAQ,OAAOC,cAAc,MAAMC,WAAW,UACjDqE,IAAAC,cAACW,IAAW,CAACC,UAAU,YACrBb,IAAAC,cAACa,IAAU,CACTC,KAAG,EACHzG,UAAQ,EACRtB,GAAG,QACHe,KAAK,QACLF,MAAO+D,EACPpD,SAAWC,GAAMoD,EAASpD,EAAE3C,OAAO+B,QAEnCmG,IAAAC,cAACe,IAAgB,CAACnH,MAAM,IAAIoH,QAASjB,IAAAC,cAACiB,IAAK,MAAKpB,MAAM,MACtDE,IAAAC,cAACe,IAAgB,CAACnH,MAAM,IAAIoH,QAASjB,IAAAC,cAACiB,IAAK,MAAKpB,MAAM,QAI1DE,IAAAC,cAAC5F,IAAS,CACRE,WAAS,EACTuF,MAAM,YACN9G,GAAG,YACHe,KAAK,YACLF,MAAOiE,EACPtD,SAAWC,GAAMsD,EAAatD,EAAE3C,OAAO+B,OACvCoB,WAAY,CAAEC,MAAO,CAAEC,UAAW,WAClCgG,gBAAiB,CACfjG,MAAO,CAAEC,UAAW,SAAUiG,MAAO,OAAQT,WAAY,SAI/DX,IAAAC,cAAA,WACAD,IAAAC,cAACrG,EAAS,CACRG,KAAK,aACLF,MAAOmE,EACPlE,SAAUmE,EACVjE,SACgC,OAA9BoE,GAC8B,KAA9BA,IAGJ4B,IAAAC,cAAC/F,IAAU,CAACC,QAAQ,KAAKC,UAAWH,GAAQT,OAAO,UAGnDwG,IAAAC,cAACW,IAAW,CAACrG,WAAS,GACpByF,IAAAC,cAACoB,IAAM,CACLC,QAAQ,SACRtI,GAAG,SACHa,MAAOqE,EACP4B,MAAM,SACNtF,SAAW3C,GA9gBOA,KAC1BsG,EAAkBtG,EAAMC,OAAO+B,QA6gBF0H,CAAmB1J,IAEvCkI,GAAcyB,IAAKC,GAClBzB,IAAAC,cAACyB,IAAQ,CAACC,IAAKF,EAAO5H,MAAOA,MAAO4H,EAAO5H,OACxC4H,EAAO3B,UAKhBE,IAAAC,cAAC/F,IAAU,CAACC,QAAQ,KAAKC,UAAWH,GAAQT,OAAO,gFAGnDwG,IAAAC,cAACW,IAAW,CAACrG,WAAS,GACpByF,IAAAC,cAAC2B,IAAU,CAAC5I,GAAG,4BAA2B,wBAG1CgH,IAAAC,cAACoB,IAAM,CACLC,QAAQ,qBACRtI,GAAG,qBACHa,MAAOuE,EACP0B,MAAM,aACNtF,SAAW3C,GA1iBWA,KAC9BwG,EAA6BxG,EAAMC,OAAO+B,OACtChC,EAAMC,OAAO+B,OACfoE,EAAc,KAuiBamN,CAAuBvT,GAC5CmC,WAAYgE,GAEX6B,GAAkB2B,IAAKC,GACtBzB,IAAAC,cAACyB,IAAQ,CAACC,IAAKF,EAAO5H,MAAOA,MAAO4H,EAAO5H,OACxC4H,EAAO3B,UAKhBE,IAAAC,cAACrG,EAAS,CACRG,KAAK,YACLF,MAAOyE,EACPxE,SAAUyE,EACVvE,SAAwC,KAA9BoE,IAEZ4B,IAAAC,cAAA,WACAD,IAAAC,cAACrG,EAAS,CACRC,MAAO2E,EACP1E,SAAWD,IAEP4E,EADqB,IAAnBP,EACK,GAEArE,IAGXE,KAAK,cACLC,SAA6B,IAAnBkE,IAEZ8B,IAAAC,cAAA,WACAD,IAAAC,cAAC/F,IAAU,CAACC,QAAQ,KAAKC,UAAWH,GAAQT,OAAO,SAGnDwG,IAAAC,cAAA,WACAD,IAAAC,cAAC5F,IAAS,CACRC,UAAQ,EACRC,WAAS,EACTR,KAAK,cACL0G,YAAY,kBACZ5G,MAAOyF,GACP9E,SAAWC,IACT8E,GAAe9E,EAAE3C,OAAO+B,QAE1BmB,OAAO,SACPC,WAAY,CAAEC,MAAO,CAAEC,UAAW,aAEpC6E,IAAAC,cAAA,WACAD,IAAAC,cAAC/F,IAAU,CAACC,QAAQ,KAAKC,UAAWH,GAAQT,OAAO,kBAYnDwG,IAAAC,cAAA,SACE/C,IAAM4E,GAAQnC,EAAKoC,QAAUD,EAC7BxH,UAAQ,EACR0H,KAAK,OACLjI,KAAK,QACLkI,OAAO,yBACPzH,SAAWC,GA1MQA,KACzB,MAAMyH,EAAYzH,EAAE3C,OAAOqK,MAAM,GACjCxD,EAASuD,IAwMcE,CAAkB3H,MAGvCuF,IAAAC,cAACnE,EAAO,CACNC,aApmBeA,KAEnB,IAAK2C,EAGH,OAFAO,GAAgB,gEAChBF,GAAkB,IAIpB,IAAKzB,EAKH,OAJA2B,GACE,sEAEFF,GAAkB,IAGpB,IAAKvB,GAAME,EAKT,OAJAuB,GACE,sEAEFF,GAAkB,IAGpB,IAAKnB,EAGH,OAFAqB,GAAgB,kEAChBF,GAAkB,IAGpB,IAAKf,EAKH,OAJAiB,GACE,mEAEFF,GAAkB,IAGpB,IAAKb,EAKH,OAJAe,GACE,oEAEFF,GAAkB,IAIpBiM,KAEA,MAAM3I,EAAS,IAAIC,WAEnBD,EAAOE,OAASzJ,UACd,MAAM0J,EAAc3K,EAAMC,OAAOC,OAKjC,MAAM0K,EAAQ,IAAIC,MAClBD,EAAME,IAAMH,EAEZC,EAAMF,OAASzJ,UAEb,GAAIjB,EAAM+K,OATW,OASc,CAAC,IAADC,EAAAC,EAEjC,MAAMC,EAAkB3E,EAGnB,QAH4CyE,EAC7ChD,GAAkBmD,KACfvB,GAAWA,EAAO5H,QAAUuE,UAC9B,IAAAyE,OAAA,EAFDA,EAEG/C,MACH,GAEEmD,EAAc/E,EAC+C,QADjC4E,EAC9B/C,GAAciD,KAAMvB,GAAWA,EAAO5H,QAAUqE,UAAe,IAAA4E,OAAA,EAA/DA,EACIhD,MACJ,GAEEoD,EAAgB,CACpB/F,YAAaA,EACbG,eAAgBA,EAChBE,GAAIA,EACJE,IAAKA,EACLE,MAAOA,EACPE,UAAWA,EACXE,WAAYA,EACZI,0BAA2B2E,EAC3B7E,eAAgB+E,EAChB3E,WAAYA,EACZE,IAAKA,EACLc,YAAaA,GACbZ,MAAO8D,GAIT,IACE,MAAMpK,QAAWf,IAEjB,IAAI8L,QAAavK,EAAkBR,GAEnC,MAAMmN,EAAQpC,EAAKkI,UAChB7S,GACCA,EAAW8E,iBAAmB4F,EAAc5F,gBAC5C9E,EAAWgF,KAAO0F,EAAc1F,IAChChF,EAAW2E,cAAgB+F,EAAc/F,aACzC3E,EAAWkF,MAAQwF,EAAcxF,KAErC0F,QAAQiB,IAAIkB,IACG,IAAXA,SAEIxM,EAAiBX,EAAI+K,EAAKoC,GAAOvM,UAGnCT,EAAcH,EAAI8K,GACxB/D,GAAegE,GACfpE,GAAkB,8BAClBwL,GAAQ,GACRlL,IAAe,GACf,MAAO/G,GACP8K,QAAQ9K,MAAM,wCAAyCA,QAEpD,CACL,MAAMgL,EAASC,SAAStD,cAAc,UAChCuD,EAAMF,EAAOG,WAAW,MAE9BH,EAAOlC,MAAQqB,EAAMrB,MACrBkC,EAAOI,OAASjB,EAAMiB,OAEtBF,EAAIG,UAAUlB,EAAO,EAAG,EAAGA,EAAMrB,MAAOqB,EAAMiB,QAE9C,IAAK,IAADE,EAAAC,EACF,MAAMC,QAA4B,IAAIxM,QAASC,IAC7C+L,EAAOS,OAAOxM,EAAS,aA3EjB,KA8EFyM,QAAwBC,YAC5BH,EACA,CACEI,UAAW,GACXC,iBAAkB,KAClBC,cAAc,IAGlBhB,QAAQiB,IACN,iCACAL,aAA2BM,MAE7BlB,QAAQiB,IAAI,uBAADE,OACcP,EAAgBQ,KAAO,KAAO,KAAI,QAG3D,MAAMzB,EAAkB3E,EAGnB,QAH4CwF,EAC7C/D,GAAkBmD,KACfvB,GAAWA,EAAO5H,QAAUuE,UAC9B,IAAAwF,OAAA,EAFDA,EAEG9D,MACH,GAEEmD,EAAc/E,EAC+C,QADjC2F,EAC9B9D,GAAciD,KAAMvB,GAAWA,EAAO5H,QAAUqE,UAAe,IAAA2F,OAAA,EAA/DA,EACI/D,MACJ,GAEEoD,EAAgB,CACpB/F,YAAaA,EACbG,eAAgBA,EAChBE,GAAIA,EACJE,IAAKA,EACLE,MAAOA,EACPE,UAAWA,EACXE,WAAYA,EACZI,0BAA2B2E,EAC3B7E,eAAgB+E,EAChB3E,WAAYA,EACZE,IAAKA,EACLc,YAAaA,GACbZ,MAAOsF,GAIT,IACE,MAAM5L,QAAWf,IAEjB,IAAI8L,QAAavK,EAAkBR,GAEnC,MAAMmN,EAAQpC,EAAKkI,UAChB7S,GACCA,EAAW8E,iBAAmB4F,EAAc5F,gBAC5C9E,EAAWgF,KAAO0F,EAAc1F,IAChChF,EAAW2E,cAAgB+F,EAAc/F,aACzC3E,EAAWkF,MAAQwF,EAAcxF,KAErC0F,QAAQiB,IAAIkB,IACG,IAAXA,SAEIxM,EAAiBX,EAAI+K,EAAKoC,GAAOvM,UAGnCT,EAAcH,EAAI8K,GACxB/D,GAAegE,GACfpE,GAAkB,8BAClBM,IAAe,GACf,MAAO/G,GACP8K,QAAQ9K,MAAM,wCAAyCA,IAEzD,MAAOA,GACP8K,QAAQ9K,MAAM,4BAA6BA,OAOnD+J,EAAOoC,cAAc/F,GACrBiB,EAAKoC,QAAQlI,MAAQ,IAwZjBoC,qBA9TuBA,KAC3B,MAAMyI,EAAM,IAAIC,IAEVC,EACJ,+JACA1F,GACGsC,IAAKqD,IACJ,MAAMC,GAAeD,EAAMrG,IAAM,KAAMuG,eAAe,QAAS,CAC7DC,sBAAuB,IAEzB,MAAM,GAANT,OAAUM,EAAM1H,YAAW,KAAAoH,OAAIM,EAAMvH,eAAc,KAAAiH,OAAIM,EAAMrH,GAAE,KAAA+G,OAAIM,EAAMnH,IAAG,KAAA6G,OAAIM,EAAMjH,MAAK,KAAA2G,OAAIM,EAAM/G,UAAS,KAAAyG,OAAIM,EAAM7G,WAAU,KAAAuG,OAAIM,EAAM3G,eAAc,KAAAqG,OAAIM,EAAMzG,0BAAyB,KAAAmG,OAAIM,EAAMvG,WAAU,KAAAiG,OAAIO,EAAW,KAAAP,OAAIM,EAAMvF,eAE3O2F,KAAK,MAEVP,EAAIQ,KAAK,iBAAkBN,GAG3B,MAAMO,EAA2BT,EAAIU,OAAO,wBACtCC,EAA4BX,EAAIU,OAAO,yBAG7ClG,GAAYoG,QAAQ,CAACxD,EAAIyD,KACvB,MAAMC,EAAO1D,EAAGxC,YAAYmG,QAAQ,KAAM,IAC1C,IAAIC,EASAC,EAOAC,EAfJ,GAAI9D,EAAGpE,KAAOoE,EAAGpE,IAAI5C,WAAW+K,QAAU,EAAG,CAC3C,MAAMC,EAAcC,WAAWjE,EAAGpE,KAC5BsI,EAA4C,GAA/BrL,KAAKsL,MAAMH,EAAc,IAC5CJ,EAA6B/K,KAAKuL,MAAMF,EAAa,SAErDN,EAA6B5D,EAAGpE,IAYlC,GAR0B,0BAAtBoE,EAAG5D,eACLyH,EAAcR,EACiB,0BAAtBrD,EAAG5D,iBACZyH,EAAcN,GAKZvD,EAAG9D,WACL4H,EAAQ,GAAArB,OAAMzC,EAAGxE,eAAc,KAAAiH,OAAIzC,EAAGtE,GAAE,KAAA+G,OAAImB,EAA0B,KAAAnB,OAAIzC,EAAGlE,MAAK,KAAA2G,OAAIzC,EAAG9D,WAAU,KAAAuG,OAAIiB,EAAI,aACtG,GACL1D,EAAG1D,2BAC8B,cAAjC0D,EAAG1D,0BAEHwH,EAAQ,GAAArB,OAAMzC,EAAGxE,eAAc,KAAAiH,OAAIzC,EAAGtE,GAAE,KAAA+G,OAAImB,EAA0B,KAAAnB,OAAIzC,EAAGlE,MAAK,KAAA2G,OAAIzC,EAAG1D,0BAAyB,KAAAmG,OAAIiB,EAAI,YACrH,KAAI1D,EAAGxD,WAKZ,YADA8E,QAAQ9K,MAAM,2BAHdsN,EAAQ,GAAArB,OAAMzC,EAAGxE,eAAc,KAAAiH,OAAIzC,EAAGtE,GAAE,KAAA+G,OAAImB,EAA0B,KAAAnB,OAAIzC,EAAGlE,MAAK,KAAA2G,OAAIzC,EAAGxD,WAAU,KAAAiG,OAAIiB,EAAI,QAM7G,GAAI1D,EAAGpD,iBAAiB4F,KAEtBqB,EAAYT,KAAKU,EAAU9D,EAAGpD,YACzB,GAAwB,kBAAboD,EAAGpD,MAAoB,CAEvC,MAAM2H,EAAavE,EAAGpD,MAAM4H,MAAM,KAAK,GACvCX,EAAYT,KAAKU,EAAUS,EAAY,CAAEE,QAAQ,OAKrD7B,EAAI8B,cAAc,CAAExE,KAAM,SAAUyE,KAAMC,IACxC,MAAMC,EAAMC,OAAOC,IAAIC,gBAAgBJ,GACjCK,EAAOxD,SAAStD,cAAc,KACpC8G,EAAKC,KAAOL,EACZI,EAAKE,SAAW,oBAChB5D,WAAW,KACT0D,EAAKG,SACJ,QAsPDlL,0BAtZ4BA,KAChC,MAAM0I,EAAM,IAAIC,IACVwC,EAAmBjI,GAAYkI,OAClCvC,GAAUA,EAAMvF,cAAgBA,IAI7BsF,EACJ,+JACAuC,EACG3F,IAAKqD,IACJ,MAAMC,GAAeD,EAAMrG,IAAM,KAAMuG,eAAe,QAAS,CAC7DC,sBAAuB,IAEzB,MAAM,GAANT,OAAUM,EAAM1H,YAAW,KAAAoH,OAAIM,EAAMvH,eAAc,KAAAiH,OAAIM,EAAMrH,GAAE,KAAA+G,OAAIM,EAAMnH,IAAG,KAAA6G,OAAIM,EAAMjH,MAAK,KAAA2G,OAAIM,EAAM/G,UAAS,KAAAyG,OAAIM,EAAM7G,WAAU,KAAAuG,OAAIM,EAAM3G,eAAc,KAAAqG,OAAIM,EAAMzG,0BAAyB,KAAAmG,OAAIM,EAAMvG,WAAU,KAAAiG,OAAIO,EAAW,KAAAP,OAAIjF,MAErO2F,KAAK,MAEVP,EAAIQ,KAAK,GAADX,OAAIjF,GAAW,QAAQsF,GAG/B,MAAMO,EAA2BT,EAAIU,OAAO,wBACtCC,EAA4BX,EAAIU,OAAO,yBAG7C+B,EAAiB7B,QAAQ,CAACxD,EAAIyD,KAC5B,MAAMC,EAAO1D,EAAGxC,YAAYmG,QAAQ,KAAM,IAC1C,IAAIC,EASAC,EAOAC,EAfJ,GAAI9D,EAAGpE,KAAOoE,EAAGpE,IAAI5C,WAAW+K,QAAU,EAAG,CAC3C,MAAMC,EAAcC,WAAWjE,EAAGpE,KAC5BsI,EAA4C,GAA/BrL,KAAKsL,MAAMH,EAAc,IAC5CJ,EAA6B/K,KAAKuL,MAAMF,EAAa,SAErDN,EAA6B5D,EAAGpE,IAYlC,GAPEiI,EADwB,0BAAtB7D,EAAG5D,eACSmH,EAEAF,EAKZrD,EAAG9D,YAAc8D,EAAG9D,WAAWmI,SAAS,KAAM,CAChD,IAAInI,EAAa8D,EAAG9D,WACpBA,EAAaA,EAAWoI,OAAOrL,MAAM,GAAI,GACzC6K,EAAQ,GAAArB,OAAMzC,EAAGxE,eAAc,KAAAiH,OAAIzC,EAAGtE,GAAE,KAAA+G,OAAImB,EAA0B,KAAAnB,OAAIzC,EAAGlE,MAAK,KAAA2G,OAAIvG,EAAU,KAAAuG,OAAIiB,EAAI,aACnG,GACL1D,EAAG1D,2BAC8B,cAAjC0D,EAAG1D,0BAEHwH,EAAQ,GAAArB,OAAMzC,EAAGxE,eAAc,KAAAiH,OAAIzC,EAAGtE,GAAE,KAAA+G,OAAImB,EAA0B,KAAAnB,OAAIzC,EAAGlE,MAAK,KAAA2G,OAAIzC,EAAG1D,0BAAyB,KAAAmG,OAAIiB,EAAI,aACrH,GAAI1D,EAAGxD,WACZsH,EAAQ,GAAArB,OAAMzC,EAAGxE,eAAc,KAAAiH,OAAIzC,EAAGtE,GAAE,KAAA+G,OAAImB,EAA0B,KAAAnB,OAAIzC,EAAGlE,MAAK,KAAA2G,OAAIzC,EAAGxD,WAAU,KAAAiG,OAAIiB,EAAI,YACtG,KAAI1D,EAAG9D,WAKZ,YADAoF,QAAQ9K,MAAM,2BAHdsN,EAAQ,GAAArB,OAAMzC,EAAGxE,eAAc,KAAAiH,OAAIzC,EAAGtE,GAAE,KAAA+G,OAAImB,EAA0B,KAAAnB,OAAIzC,EAAGlE,MAAK,KAAA2G,OAAIzC,EAAG9D,WAAU,KAAAuG,OAAIiB,EAAI,QAO7G,GAAI1D,EAAGpD,iBAAiB4F,KAEtBqB,EAAYT,KAAKU,EAAU9D,EAAGpD,YACzB,GAAwB,kBAAboD,EAAGpD,MAAoB,CAEvC,MAAM2H,EAAavE,EAAGpD,MAAM4H,MAAM,KAAK,GACvCX,EAAYT,KAAKU,EAAUS,EAAY,CAAEE,QAAQ,OAKrD7B,EAAI8B,cAAc,CAAExE,KAAM,SAAUyE,KAAMC,IACxC,MAAMW,GAAW,IAAI5H,MAAOC,cAAc3E,MAAM,EAAG,IAC7C4L,EAAMC,OAAOC,IAAIC,gBAAgBJ,GACjCK,EAAOxD,SAAStD,cAAc,KACpC8G,EAAKC,KAAOL,EACZI,EAAKE,SAAQ,GAAA1C,OAAM8C,EAAQ,QAC3BhE,WAAW,KACT0D,EAAKG,SACJ,UAqUHlH,IAAAC,cAACqH,IAAQ,CACP3P,OAAQmH,GACRyI,iBAAkB,IAClB3I,QAvPqB4I,CAAC3P,EAAO4P,KAClB,cAAXA,GAGJ1I,GAAkB,MAqPdiB,IAAAC,cAACyH,IAAe,CACdC,QAAS7I,GACT1E,UAAWH,GAAQwC,mBAIvBuD,IAAAC,cAACqH,IAAQ,CACP3P,OAAQqH,GACRuI,iBAAkB,KAClB3I,QA3PmBgJ,CAAC/P,EAAO4P,KAChB,cAAXA,GAGJxI,GAAgB,MAyPZe,IAAAC,cAACyH,IAAe,CACdC,QAAS3I,GACT5E,UAAWH,GAAQ8C,mB,8BClwB7B,MAAM1D,GAAYC,YAAYC,IAAK,CACjC2O,MAAO,CACL5M,QAAS/B,EAAM8B,QAAQ,IAEzBoB,gBAAiB,CACfC,gBAAiB,WAEnBK,cAAe,CACbL,gBAAiB,WAEnBd,gBAAiB,CACfT,UAAW,SACXU,UAAWtC,EAAM8B,QAAQ,IAE3BD,OAAQ,CACNJ,OAAQzB,EAAM8B,QAAQ,GACtBC,QAAS,YACT5B,SAAU,OACV6B,cAAe,WAInB,SAASyB,GAAYqL,GAQjB,IARkB,IACpBtH,EAAG,QACHnC,EAAO,cACPC,EAAa,KACblH,EAAI,KACJgI,EAAI,cACJ4I,EAAa,QACbgC,GACDlC,EACC,MAAMpO,EAAUZ,KAKhB,OACE2G,IAAAC,cAACC,IAAM,CACLtB,QANgB0M,KAClB1M,EAAQC,IAMN0M,kBAAgB,sBAChB5T,KAAMA,GAENqI,IAAAC,cAAC8I,IAAK,CAACC,UAAW,EAAG5O,UAAWH,EAAQiO,OACtClI,IAAAC,cAACoK,GAAQ,CACPtJ,IAAKA,EACLpB,KAAMA,EACN4I,cAAeA,EACfgC,QAASA,MAoDJiB,OA7CiBC,IAKzB,IAL0B,IAC/B1K,EAAG,KACHpB,EAAI,gBACJ+L,EAAe,cACfnD,GACDkD,EACC,MAAMxR,EAAUZ,MACT1B,EAAM4S,GAAWvK,IAAM3C,UAAS,IAChCwB,EAAe8M,GAAoB3L,IAAM3C,SAAS,IAKnDiO,EAAcA,KAClBjI,WAAW,KACTkH,GAAQ,IACP,MAGL,OACEvK,IAAAC,cAAAD,IAAAmL,SAAA,KACEnL,IAAAC,cAAA,OAAK7F,UAAWH,EAAQ2B,iBACtBoE,IAAAC,cAAC2L,KAAU,CACTC,aAAW,OACXvP,QAASA,KAdfiO,GAAQ,IAeFnQ,UAAWH,EAAQmB,QACpB,aAEC4E,IAAAC,cAAC6L,KAAQ,OAEX9L,IAAAC,cAACjD,GAAY,CACX+D,IAAKA,EACLlC,cAAeA,EACflH,KAAMA,EACNiH,QAAS0M,EACT3L,KAAMA,EACN+L,gBAAiBA,EACjBnD,cAAeA,EACfgC,QAASe,OC3FbjS,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvCwS,MAAO,CACLC,SAAU,KAEZC,UAAW,CACTvP,gBAAiB,UACjBN,MAAO7C,EAAMoD,QAAQoL,OAAOC,OAE9BkE,WAAY,CACV9P,MAAO7C,EAAMoD,QAAQwP,UAAUtP,UA2CpBuP,GAvCM,SAAC,GAAmD,IAAjDC,EAAgD,EAAhDA,WAAY1M,EAAoC,EAApCA,KAAM4I,EAA8B,EAA9BA,cAAe+D,EAAe,EAAfA,SACvDlJ,QAAQiB,IAAIiI,GACZ,IAAMrS,EAAUZ,KAChB,OACE,kBAACkT,EAAA,EAAD,CAAgB1L,UAAWkI,KACzB,kBAACyD,EAAA,EAAD,CAAOpS,UAAWH,EAAQ8R,MAAOF,aAAW,kBAC1C,kBAACY,EAAA,EAAD,KACE,kBAACC,GAAA,EAAD,CAAUtS,UAAWH,EAAQgS,WAC1BK,EAAS9K,KAAI,SAACuI,EAAKH,GAAN,OACZ,kBAAC+C,EAAA,EAAD,CAAWhL,IAAG,eAAUiI,GAAOgD,MAAM,SAClC7C,MAGL,kBAAC4C,EAAA,EAAD,CAAWhL,IAAG,YAAeiL,MAAM,YAGvC,kBAACC,EAAA,EAAD,KACGR,EAAW7K,KAAI,SAACT,EAAK6I,GAAN,OACd,kBAAC8C,GAAA,EAAD,CAAU/K,IAAKiI,GACZ0C,EAAS9K,KAAI,SAACuI,EAAKH,GAAN,OACZ,kBAAC+C,EAAA,EAAD,CAAWhL,IAAG,iBAAYiI,GAAOgD,MAAM,SACpC7L,EAAIgJ,OAGT,kBAAC4C,EAAA,EAAD,CAAWhL,IAAG,cAAiBiL,MAAM,SACnC,kBAAC,GAAD,CACE7L,IAAKA,EACLpB,KAAMA,EACN4I,cAAeA,aC1CjC,MAAMlP,GAAYC,YAAYC,IAAK,CACjCuT,KAAM,CACJC,SAAU,OACV3L,MAAO,OACPsC,OAAQ,OACRhH,gBAAiB,UACjBjB,QAAS,OACT0E,eAAgB,SAChB,QAAS,CACP7E,QAAS,OACTG,QAAS,OACTC,cAAe,cAoINsR,OA7GHA,KACV,MAAM/S,EAAUZ,KAEVsG,EAAOC,iBAAO,OACbqN,EAAoBC,GAAyB7P,oBAAS,IACtDgP,EAAY9D,GAAiBlL,mBAAS,KACtCiP,EAAU9D,GAAenL,mBAAS,KAClC8P,EAAW7E,GAAgBjL,oBAAS,GAE3CmC,oBAAU,KACR,MAWM4N,EAAM,IAAI3N,KACV4N,EAAe,IAAI5N,KAAK2N,GAC9BC,EAAaC,SAAS,GAAI,EAAG,EAAG,GAChC,MAGMC,EAAW,SAHSF,EAAeD,GAInCI,EAAaC,YAlBc3U,UAC/B,IACE,MAAMV,QAAWf,SA7BFyB,UACd,IAAIxB,QAAQ,CAACC,EAASC,KAC3B,MAGMC,EAHcW,EAAGK,YAAY,CAAC,eAAgB,aACpBC,YAAY,eAEhBgV,QAE5BjW,EAAQU,UAAY,KAClBZ,KAGFE,EAAQY,QAAWR,IACjBL,EAAOK,EAAMC,OAAOQ,UAkBZqV,CAAevV,GACrBgL,QAAQiB,IAAI,sBACZ,MAAO/L,GACP8K,QAAQ9K,MAAM,6BAA8BA,KAYSiV,GAIzD,OAHAnK,QAAQiB,IAAIkJ,GAGL,KACLK,cAAcJ,KAEf,IAsCH,OACExN,IAAAC,cAAA,OAAK7F,UAAWyT,IAAW5T,EAAQ6S,KAAM,eACvC9M,IAAAC,cAACmI,EAAS,CACRE,aAAezO,IACbyO,EAAazO,GACbqT,EAAsBrT,IAExB0O,cAAeA,EACfC,YAAaA,IAEd2E,GACCnN,IAAAC,cAAAD,IAAAmL,SAAA,KACEnL,IAAAC,cAACmM,GAAY,CACXC,WAAYA,EACZ1M,KAAMA,EACN4I,cAAeA,EACf+D,SAAUA,OCzHhBwB,I,OAAcC,QACW,cAA7BnH,OAAOoH,SAASC,UAEe,UAA7BrH,OAAOoH,SAASC,UAEhBrH,OAAOoH,SAASC,SAASC,MACvB,4DAsCN,SAASC,GAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACT3H,MAAK,SAAAgI,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB/D,QACf0D,UAAUC,cAAcO,YAI1B1L,QAAQiB,IACN,iHAKEgK,GAAUA,EAAOU,UACnBV,EAAOU,SAASN,KAMlBrL,QAAQiB,IAAI,sCAGRgK,GAAUA,EAAOW,WACnBX,EAAOW,UAAUP,WAO5BvD,OAAM,SAAA5S,GACL8K,QAAQ9K,MAAM,4CAA6CA,MC1FjE2W,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEF5L,SAAS6L,eAAe,SDYnB,SAAkBf,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIzH,IAAIwI,2BAAwBzI,OAAOoH,SAAShH,MACpDsI,SAAW1I,OAAOoH,SAASsB,OAIvC,OAGF1I,OAAO2I,iBAAiB,QAAQ,WAC9B,IAAMnB,EAAK,UAAMiB,2BAAN,sBAEPvB,KAgEV,SAAiCM,EAAOC,GAEtCmB,MAAMpB,EAAO,CACXqB,QAAS,CAAE,iBAAkB,YAE5BhJ,MAAK,SAAAiJ,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CxB,UAAUC,cAAcwB,MAAMtJ,MAAK,SAAAgI,GACjCA,EAAauB,aAAavJ,MAAK,WAC7BG,OAAOoH,SAASiC,eAKpB9B,GAAgBC,EAAOC,MAG1BnD,OAAM,WACL9H,QAAQiB,IACN,oEAvFA6L,CAAwB9B,EAAOC,GAI/BC,UAAUC,cAAcwB,MAAMtJ,MAAK,WACjCrD,QAAQiB,IACN,iHAMJ8J,GAAgBC,EAAOC,OClC/BE,I","file":"static/js/main.cade761d.chunk.js","sourcesContent":["const dbName = \"AußendienstDB\";\r\nconst storeName = \"submissions\";\r\n\r\nexport function openDatabase() {\r\n  return new Promise((resolve, reject) => {\r\n    const request = indexedDB.open(dbName, 1);\r\n\r\n    request.onupgradeneeded = (event) => {\r\n      const db = event.target.result;\r\n      db.createObjectStore(storeName, { keyPath: \"id\", autoIncrement: true });\r\n    };\r\n\r\n    request.onsuccess = (event) => {\r\n      const db = event.target.result;\r\n      resolve(db);\r\n    };\r\n\r\n    request.onerror = (event) => {\r\n      reject(event.target.error);\r\n    };\r\n  });\r\n}\r\n\r\nexport function addSubmission(db, submission) {\r\n  return new Promise((resolve, reject) => {\r\n    const transaction = db.transaction([storeName], \"readwrite\");\r\n    const store = transaction.objectStore(storeName);\r\n    const request = store.add(submission);\r\n\r\n    request.onsuccess = () => {\r\n      resolve();\r\n    };\r\n\r\n    request.onerror = () => {\r\n      reject(request.error);\r\n    };\r\n  });\r\n}\r\n\r\nexport function getAllSubmissions(db) {\r\n  return new Promise((resolve, reject) => {\r\n    const transaction = db.transaction([storeName], \"readonly\");\r\n    const store = transaction.objectStore(storeName);\r\n    const request = store.getAll();\r\n\r\n    request.onsuccess = () => {\r\n      resolve(request.result);\r\n    };\r\n\r\n    request.onerror = () => {\r\n      reject(request.error);\r\n    };\r\n  });\r\n}\r\n\r\nasync function deleteSubmission(db, id) {\r\n  const tx = db.transaction(\"submissions\", \"readwrite\");\r\n  const store = tx.objectStore(\"submissions\");\r\n  await store.delete(id);\r\n  await tx.complete;\r\n}\r\n\r\n// Export the deleteSubmission function\r\nexport { deleteSubmission };\r\n","import { TextField, Typography, makeStyles } from \"@material-ui/core\";\r\nimport React from \"react\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  title: {\r\n    fontWeight: \"bold\",\r\n    fontSize: \"1.2rem\",\r\n    marginBottom: \"5px\",\r\n  },\r\n}));\r\n\r\nconst Attribute = ({ value, setValue, name, disabled }) => {\r\n  const classes = useStyles();\r\n\r\n  const handleInputChange = (e) => {\r\n    let newValue = e.target.value;\r\n\r\n    // If the attribute is \"Streckennummer\", ensure it is a positive integer\r\n    if (name === \"Streckennummer\") {\r\n      newValue = Math.max(0, parseInt(newValue, 10)).toString().slice(0, 4);\r\n    }\r\n\r\n    // Update the state in the parent component\r\n    setValue(newValue);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Typography variant=\"h5\" className={classes.title}>\r\n        {name}\r\n      </Typography>\r\n      <TextField\r\n        required\r\n        disabled={disabled}\r\n        fullWidth\r\n        name={name}\r\n        value={value}\r\n        onChange={handleInputChange}\r\n        margin=\"normal\"\r\n        inputProps={{ style: { textAlign: \"center\" } }}\r\n      />\r\n      <br />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Attribute;\r\n","import { Box, Button } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport SendIcon from \"@material-ui/icons/Send\";\nimport CloudDownloadIcon from \"@material-ui/icons/CloudDownload\";\nimport React from \"react\";\n\nconst useStyles = makeStyles((theme) => ({\n  button: {\n    margin: theme.spacing(1),\n    padding: \"10px 20px\",\n    fontSize: \"1rem\",\n    textTransform: \"none\",\n  },\n  buttonsContainer: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n  buttonContainer: {\n    textAlign: \"center\",\n    marginTop: theme.spacing(2),\n  },\n}));\n\nconst Buttons = ({\n  handleSubmit,\n  downloadCombinedTodayData,\n  downloadCombinedData,\n}) => {\n  const classes = useStyles();\n\n  return (\n    <Box className={classes.buttonContainer}>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        className={classes.button}\n        endIcon={<SendIcon />}\n        onClick={handleSubmit}\n      >\n        Abspeichern\n      </Button>\n      <br />\n      <br />\n      <Box className={classes.buttonsContainer}>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          className={classes.button}\n          startIcon={<CloudDownloadIcon />}\n          onClick={() => downloadCombinedTodayData()}\n        >\n          Daten von heute herunterladen\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          className={classes.button}\n          startIcon={<CloudDownloadIcon />}\n          onClick={() => downloadCombinedData()}\n        >\n          Alle Daten herunterladen\n        </Button>\n      </Box>\n    </Box>\n  );\n};\n\nexport default Buttons;\n","import {\n  Box,\n  FormControl,\n  FormControlLabel,\n  Radio,\n  RadioGroup,\n  Snackbar,\n  SnackbarContent,\n  Typography,\n  makeStyles,\n  Dialog,\n} from \"@material-ui/core\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Attribute from \"./Attribute\";\nimport React, { useEffect, useState, useRef } from \"react\";\nimport Buttons from \"./Buttons\";\nimport { openDatabase, addSubmission, getAllSubmissions } from \"../db\";\nimport JSZip from \"jszip\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Select from \"@material-ui/core/Select\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport imageCompression from \"browser-image-compression\";\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    fontWeight: \"bold\",\n    fontSize: \"1.2rem\", // Adjust the font size\n    marginBottom: \"5px\", // Add some spacing below titles\n    textAlign: \"center\",\n  },\n  textField: {\n    marginBottom: \"1px\", // Add margin to text fields\n  },\n  successSnackbar: {\n    backgroundColor: theme.palette.success.main,\n    color: theme.palette.success.contrastText,\n  },\n  errorSnackbar: {\n    backgroundColor: theme.palette.error.main,\n    color: theme.palette.error.contrastText,\n  },\n}));\n\nexport const SimpleDialog = (props, ref) => {\n  const classes = useStyles();\n  // Separate state for each attribute\n  const [punktnummer, setPunktnummer] = useState(\"\");\n  const [streckennummer, setStreckennummer] = useState(\"\");\n  const [km, setKm] = useState(\"\");\n  const [met, setMet] = useState(\"\");\n  const [seite, setSeite] = useState(false);\n  const [sonstiges, setSonstiges] = useState(\"\");\n  const [mastnummer, setMastnummer] = useState(\"\");\n  const [selectedStatus, setselectedStatus] = useState(null);\n  const [selectedVermarkungstrager, setselectedVermarkungstrager] =\n    useState(null);\n  const [sonstiges2, setSonstiges2] = useState(\"\");\n  const [gvp, setGVP] = useState(\"\");\n  const [photo, setPhoto] = useState(null);\n  const { onClose, selectedValue, open } = props;\n  const [successMessage, setSuccessMessage] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [submissions, setSubmissions] = useState([]); // Store all submissions\n  const [successOpen, setSuccessOpen] = useState(false);\n  const [currentDate, setCurrentDate] = useState(\"\");\n  //const webcamRef = useRef(null);\n\n  useEffect(() => {\n    setCurrentDate(new Date().toISOString().slice(0, 10));\n  }, [currentDate, setCurrentDate]);\n\n  /*  const capture = () => {\n    const imageSrc = webcamRef.current.getScreenshot();\n    setPhoto(imageSrc);\n  };\n */\n  /* const videoConstraints = {\n    width: 440,\n    height: 280,\n    facingMode: { exact: \"environment\" },\n  }; */\n\n  const handlePhotoChange = (e) => {\n    const photoFile = e.target.files[0];\n    setPhoto(photoFile);\n  };\n\n  const resetForm = () => {\n    setPunktnummer(\"\");\n    setStreckennummer(\"\");\n    setKm(\"\");\n    setMet(\"\");\n    setSeite(false);\n    setSonstiges(\"\");\n    setMastnummer(\"\");\n    setselectedStatus(null);\n    setselectedVermarkungstrager(null);\n    setGVP(\"\");\n    setSonstiges2(\"\");\n    setPhoto(null);\n    setCurrentDate(new Date().toISOString().slice(0, 10));\n  };\n\n  const reff = useRef(null);\n\n  const handleErrorClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setErrorMessage(\"\");\n  };\n\n  const handleSuccessClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setSuccessMessage(\"\");\n    setSuccessOpen(false);\n  };\n\n  const vermarkungOptions = [\n    { value: 10, label: \"Keiner\" },\n    { value: 20, label: \"Laterne\" },\n    { value: 30, label: \"Wand\" },\n    { value: 40, label: \"Fundament\" },\n    { value: 50, label: \"Lärmschutzwand\" },\n    { value: 60, label: \"Widerlager\" },\n    { value: 70, label: \"Sonstiges\" },\n  ];\n\n  const statusOptions = [\n    { value: 1, label: \"Neu vermarkter GVP mit Target\" },\n    { value: 2, label: \"Vorhanden (nicht in Auswahl) mit Target\" },\n  ];\n\n  const handleChangeVermarkungstrager = (event) => {\n    setselectedVermarkungstrager(event.target.value);\n    if (event.target.value) {\n      setMastnummer(\"\"); // Reset Mastnummer when Vermarkungstrager is selected\n    }\n  };\n\n  const handleChangeStatus = (event) => {\n    setselectedStatus(event.target.value);\n  };\n\n  const handleSubmit = () => {\n    // Check if a photo is selected\n    if (!photo) {\n      setErrorMessage(\"Bitte wählen Sie ein Foto aus, bevor Sie fortfahren.\");\n      setSuccessMessage(\"\"); // Clear any existing success message\n      return;\n    }\n    // Check if streckennummer is empty\n    if (!streckennummer) {\n      setErrorMessage(\n        \"Bitte geben Sie die Streckennummer ein, bevor Sie fortfahren.\"\n      );\n      setSuccessMessage(\"\"); // Clear any existing success message\n      return;\n    }\n    if (!km & !met) {\n      setErrorMessage(\n        \"Bitte geben Sie die Kilometrierung ein, bevor Sie fortfahren.\"\n      );\n      setSuccessMessage(\"\"); // Clear any existing success message\n      return;\n    }\n    if (!seite) {\n      setErrorMessage(\"Bitte wählen Sie eine Seite aus, bevor Sie fortfahren.\");\n      setSuccessMessage(\"\"); // Clear any existing success message\n      return;\n    }\n    if (!mastnummer) {\n      setErrorMessage(\n        \"Bitte geben Sie eine Mastnummer ein, bevor Sie fortfahren.\"\n      );\n      setSuccessMessage(\"\"); // Clear any existing success message\n      return;\n    }\n    if (!selectedStatus) {\n      setErrorMessage(\n        \"Bitte wählen Sie einen Status aus, bevor Sie fortfahren.\"\n      );\n      setSuccessMessage(\"\"); // Clear any existing success message\n      return;\n    }\n    // Reset the form after a successful submission\n    resetForm();\n\n    const reader = new FileReader();\n\n    reader.onload = async (event) => {\n      const base64Photo = event.target.result;\n      const maxSizeInBytes = 0.5 * 1024 * 1024; // 0.5 MB\n      let quality = 1;\n\n      const image = new Image();\n      image.src = base64Photo;\n\n      image.onload = async () => {\n        // Check if the photo size is smaller than or equal to 0.5 MB\n        if (event.total <= maxSizeInBytes) {\n          // Do nothing, the photo is already within the size limit\n          const vermarkungLabel = selectedVermarkungstrager\n            ? vermarkungOptions.find(\n                (option) => option.value === selectedVermarkungstrager\n              )?.label\n            : \"\";\n\n          const statusLabel = selectedStatus\n            ? statusOptions.find((option) => option.value === selectedStatus)\n                ?.label\n            : \"\";\n          // Append new submission to the array\n          const newSubmission = {\n            punktnummer: punktnummer,\n            streckennummer: streckennummer,\n            km: km,\n            met: met,\n            seite: seite,\n            sonstiges: sonstiges,\n            mastnummer: mastnummer,\n            selectedVermarkungstrager: vermarkungLabel,\n            selectedStatus: statusLabel,\n            sonstiges2: sonstiges2,\n            gvp: gvp,\n            currentDate: currentDate,\n            photo: base64Photo,\n          };\n\n          // Save the new submission to IndexedDB\n          try {\n            const db = await openDatabase();\n            await addSubmission(db, newSubmission);\n            const data = await getAllSubmissions(db);\n            setSubmissions(data);\n            setSuccessMessage(\"Erfolgreich hinzugefügt\");\n            setSuccessOpen(true);\n          } catch (error) {\n            console.error(\"Error adding or fetching submission: \", error);\n          } finally {\n            // Clear the success message after a short delay\n            setTimeout(() => {\n              setSuccessMessage(\"\");\n            }, 3000); // Adjust the delay as needed\n          }\n        } else {\n          const canvas = document.createElement(\"canvas\");\n          const ctx = canvas.getContext(\"2d\");\n\n          canvas.width = image.width;\n          canvas.height = image.height;\n\n          ctx.drawImage(image, 0, 0, image.width, image.height);\n\n          try {\n            const compressedPhotoBlob = await new Promise((resolve) => {\n              canvas.toBlob(resolve, \"image/jpeg\", quality);\n            });\n\n            const compressedPhoto = await imageCompression(\n              compressedPhotoBlob,\n              {\n                maxSizeMB: 0.5,\n                maxWidthOrHeight: 1920,\n                useWebWorker: true,\n              }\n            );\n            console.log(\n              \"compressedFile instanceof Blob\",\n              compressedPhoto instanceof Blob\n            ); // true\n            console.log(\n              `compressedFile size ${compressedPhoto.size / 1024 / 1024} MB`\n            ); // smaller than maxSizeMB\n\n            const vermarkungLabel = selectedVermarkungstrager\n              ? vermarkungOptions.find(\n                  (option) => option.value === selectedVermarkungstrager\n                )?.label\n              : \"\";\n\n            const statusLabel = selectedStatus\n              ? statusOptions.find((option) => option.value === selectedStatus)\n                  ?.label\n              : \"\";\n\n            const newSubmission = {\n              punktnummer: punktnummer,\n              streckennummer: streckennummer,\n              km: km,\n              met: met,\n              seite: seite,\n              sonstiges: sonstiges,\n              mastnummer: mastnummer,\n              selectedStatus: statusLabel,\n              selectedVermarkungstrager: vermarkungLabel,\n              sonstiges2: sonstiges2,\n              gvp: gvp,\n              currentDate: currentDate,\n              photo: compressedPhoto,\n            };\n\n            // Save the new submission to IndexedDB\n            try {\n              const db = await openDatabase();\n              await addSubmission(db, newSubmission);\n              const data = await getAllSubmissions(db);\n              setSubmissions(data);\n              setSuccessMessage(\"Erfolgreich hinzugefügt\");\n              setSuccessOpen(true);\n            } catch (error) {\n              console.error(\"Error adding or fetching submission: \", error);\n            }\n          } catch (error) {\n            /* else {\n              console.error(\"Compressed photo size is still too large.\");\n              setErrorMessage(\n                \"Die komprimierte Foto-Größe ist immer noch zu groß, um eine vernünftige Qualität beizubehalten. Bitte wählen Sie eine kleinere Dateigröße oder optimieren Sie das Bild, bevor Sie es hochladen.\"\n              );\n              setSuccessMessage(\"\"); // Clear any existing success message\n            } */\n            console.error(\"Error compressing photo: \", error);\n          }\n        }\n      };\n    };\n\n    // Read the photo data as a data URL\n    reader.readAsDataURL(photo);\n    reff.current.value = \"\";\n  };\n\n  const downloadCombinedTodayData = () => {\n    const zip = new JSZip();\n    const todaySubmissions = submissions.filter(\n      (entry) => entry.currentDate === currentDate\n    );\n\n    // Add the CSV data to the ZIP file\n    const csvContent =\n      \"Punktnummer; Streckennummer; Kilometrierung; Seite (bezogen auf Strecke); Sonstiges; Mastnummer; Status; Vermarkung; Sonstiges Vermarkung; Offset [m]; Datum\\n\" +\n      todaySubmissions\n        .map((entry) => {\n          const gvpInMeters = (entry.gvp / 1000).toLocaleString(\"de-DE\", {\n            minimumFractionDigits: 2,\n          });\n          return `${entry.punktnummer};${entry.streckennummer};${entry.km},${entry.met};${entry.seite};${entry.sonstiges};${entry.mastnummer};${entry.selectedStatus};${entry.selectedVermarkungstrager};${entry.sonstiges2};${gvpInMeters};${currentDate}`;\n        })\n        .join(\"\\n\");\n\n    zip.file(`${currentDate}.csv`, csvContent);\n\n    const vorhandenMitTargetFolder = zip.folder(\"Vorhanden_mit_Target\");\n    const vorhandenOhneTargetFolder = zip.folder(\"Vorhanden_ohne_Target\");\n\n    // Add the image files to the ZIP file\n    todaySubmissions.forEach((el, index) => {\n      const date = el.currentDate.replace(/-/g, \"\");\n      let roundedMetWithoutLastDigit;\n      if (el.met && el.met.toString().length >= 3) {\n        const metAsNumber = parseFloat(el.met);\n        const roundedMet = Math.round(metAsNumber / 10) * 10;\n        roundedMetWithoutLastDigit = Math.floor(roundedMet / 10);\n      } else {\n        roundedMetWithoutLastDigit = el.met; // No rounding if met has 1 or 2 digits\n      }\n      let folderToAdd;\n      if (el.selectedStatus === \"Vorhanden ohne Target\") {\n        folderToAdd = vorhandenOhneTargetFolder;\n      } else {\n        folderToAdd = vorhandenMitTargetFolder;\n      }\n\n      let filename;\n\n      if (el.mastnummer && el.mastnummer.endsWith(\"N\")) {\n        let mastnummer = el.mastnummer;\n        mastnummer = mastnummer.trim().slice(0, -1);\n        filename = `${el.streckennummer}_${el.km},${roundedMetWithoutLastDigit}_${el.seite}_${mastnummer}_${date}.jpg`;\n      } else if (\n        el.selectedVermarkungstrager &&\n        el.selectedVermarkungstrager !== \"Sonstiges\"\n      ) {\n        filename = `${el.streckennummer}_${el.km},${roundedMetWithoutLastDigit}_${el.seite}_${el.selectedVermarkungstrager}_${date}.jpg`;\n      } else if (el.sonstiges2) {\n        filename = `${el.streckennummer}_${el.km},${roundedMetWithoutLastDigit}_${el.seite}_${el.sonstiges2}_${date}.jpg`;\n      } else if (el.mastnummer) {\n        filename = `${el.streckennummer}_${el.km},${roundedMetWithoutLastDigit}_${el.seite}_${el.mastnummer}_${date}.jpg`;\n      } else {\n        // Handle the case when none of the conditions are met\n        console.error(\"Invalid submission data\");\n        return;\n      }\n      if (el.photo instanceof Blob) {\n        // Assuming el.photo is a Blob\n        folderToAdd.file(filename, el.photo);\n      } else if (typeof el.photo === \"string\") {\n        // Assuming el.photo is a base64 encoded string\n        const base64Data = el.photo.split(\",\")[1];\n        folderToAdd.file(filename, base64Data, { base64: true });\n      }\n    });\n\n    // Create and trigger a download link for the ZIP file\n    zip.generateAsync({ type: \"blob\" }).then((content) => {\n      const cur_date = new Date().toISOString().slice(0, 10);\n      const url = window.URL.createObjectURL(content);\n      const link = document.createElement(\"a\");\n      link.href = url;\n      link.download = `${cur_date}.zip`;\n      setTimeout(() => {\n        link.click();\n      }, 100);\n    });\n  };\n\n  const downloadCombinedData = () => {\n    const zip = new JSZip();\n\n    // Add the CSV data to the ZIP file\n    const csvContent =\n      \"Punktnummer; Streckennummer;Kilometrierung; Seite (bezogen auf Strecke); Sonstiges; Mastnummer; Status; Vermarkung; Sonstiges Vermarkung; Offset [m]; Datum\\n\" +\n      submissions\n        .map((entry) => {\n          const gvpInMeters = (entry.gvp / 1000).toLocaleString(\"de-DE\", {\n            minimumFractionDigits: 2,\n          });\n          return `${entry.punktnummer};${entry.streckennummer};${entry.km},${entry.met};${entry.seite};${entry.sonstiges};${entry.mastnummer};${entry.selectedStatus};${entry.selectedVermarkungstrager};${entry.sonstiges2};${gvpInMeters};${entry.currentDate}`;\n        })\n        .join(\"\\n\");\n\n    zip.file(\"alle_daten.csv\", csvContent);\n\n    const vorhandenMitTargetFolder = zip.folder(\"Vorhanden_mit_Target\");\n    const vorhandenOhneTargetFolder = zip.folder(\"Vorhanden_ohne_Target\");\n\n    // Add the image files to the ZIP file\n    submissions.forEach((el, index) => {\n      const date = el.currentDate.replace(/-/g, \"\");\n      let roundedMetWithoutLastDigit;\n\n      if (el.met && el.met.toString().length >= 3) {\n        const metAsNumber = parseFloat(el.met);\n        const roundedMet = Math.round(metAsNumber / 10) * 10;\n        roundedMetWithoutLastDigit = Math.floor(roundedMet / 10);\n      } else {\n        roundedMetWithoutLastDigit = el.met; // No rounding if met has 1 or 2 digits\n      }\n\n      let folderToAdd;\n      if (el.selectedStatus === \"Vorhanden ohne Target\") {\n        folderToAdd = vorhandenOhneTargetFolder;\n      } else {\n        folderToAdd = vorhandenMitTargetFolder;\n      }\n\n      let filename;\n\n      if (el.mastnummer && el.mastnummer.endsWith(\"N\")) {\n        let mastnummer = el.mastnummer;\n        mastnummer = mastnummer.trim().slice(0, -1);\n        filename = `${el.streckennummer}_${el.km},${roundedMetWithoutLastDigit}_${el.seite}_${mastnummer}_${date}.jpg`;\n      } else if (\n        el.selectedVermarkungstrager &&\n        el.selectedVermarkungstrager !== \"Sonstiges\"\n      ) {\n        filename = `${el.streckennummer}_${el.km},${roundedMetWithoutLastDigit}_${el.seite}_${el.selectedVermarkungstrager}_${date}.jpg`;\n      } else if (el.sonstiges2) {\n        filename = `${el.streckennummer}_${el.km},${roundedMetWithoutLastDigit}_${el.seite}_${el.sonstiges2}_${date}.jpg`;\n      } else if (el.mastnummer) {\n        filename = `${el.streckennummer}_${el.km},${roundedMetWithoutLastDigit}_${el.seite}_${el.mastnummer}_${date}.jpg`;\n      } else {\n        // Handle the case when none of the conditions are met\n        console.error(\"Invalid submission data\");\n        return;\n      }\n      if (el.photo instanceof Blob) {\n        // Assuming el.photo is a Blob\n        folderToAdd.file(filename, el.photo);\n      } else if (typeof el.photo === \"string\") {\n        // Assuming el.photo is a base64 encoded string\n        const base64Data = el.photo.split(\",\")[1];\n        folderToAdd.file(filename, base64Data, { base64: true });\n      }\n    });\n\n    // Create and trigger a download link for the ZIP file\n    zip.generateAsync({ type: \"blob\" }).then((content) => {\n      const url = window.URL.createObjectURL(content);\n      const link = document.createElement(\"a\");\n      link.href = url;\n      link.download = \"combined_data.zip\";\n      setTimeout(() => {\n        link.click();\n      }, 100);\n    });\n  };\n\n  return (\n    <Dialog open={props.open} onClose={props.onClose}>\n      <Box\n        display=\"flex\"\n        flexDirection=\"column\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        maxWidth=\"400px\"\n        margin=\"0 auto\"\n        padding=\"20px\"\n        marginTop=\"10px\"\n        border=\"1px solid #ccc\"\n        borderRadius=\"8px\"\n        boxShadow=\"0 0 5px rgba(0, 0, 0, 0.2)\"\n      >\n        <Attribute\n          name=\"Punktnummer\"\n          value={punktnummer}\n          setValue={setPunktnummer}\n        />\n        <Attribute\n          name=\"Streckennummer\"\n          value={streckennummer}\n          setValue={setStreckennummer}\n        />\n        <Typography variant=\"h6\" className={classes.title}>\n          Kilometrierung [km]\n        </Typography>\n        <Box display=\"flex\" flexDirection=\"row\" alignItems=\"center\">\n          <TextField\n            required\n            value={km}\n            style={{ marginRight: \"5px\" }}\n            id=\"km\"\n            name=\"km\"\n            placeholder=\"z.B. 695\"\n            onChange={(e) => setKm(e.target.value)}\n            inputProps={{ style: { textAlign: \"center\" }, maxLength: 2 }}\n          />\n          <Typography>, </Typography>\n          <TextField\n            required\n            value={met}\n            style={{ marginLeft: \"5px\" }}\n            id=\"met\"\n            name=\"met\"\n            placeholder=\"87\"\n            onChange={(e) => setMet(e.target.value)}\n            inputProps={{ style: { textAlign: \"center\" }, maxLength: 3 }}\n          />\n        </Box>\n        <br></br>\n        <Typography variant=\"h6\" className={classes.title}>\n          Seite (bezogen auf Strecke)\n        </Typography>\n\n        <Box display=\"flex\" flexDirection=\"row\" alignItems=\"center\">\n          <FormControl component=\"fieldset\">\n            <RadioGroup\n              row\n              required\n              id=\"seite\"\n              name=\"seite\"\n              value={seite}\n              onChange={(e) => setSeite(e.target.value)}\n            >\n              <FormControlLabel value=\"L\" control={<Radio />} label=\"L\" />\n              <FormControlLabel value=\"R\" control={<Radio />} label=\"R\" />\n            </RadioGroup>\n          </FormControl>\n\n          <TextField\n            fullWidth\n            value={sonstiges}\n            onChange={(e) => setSonstiges(e.target.value)}\n            label=\"Sonstiges\"\n            id=\"sonstiges\"\n            name=\"sonstiges\"\n            InputLabelProps={{\n              style: { textAlign: \"center\", width: \"100%\", marginLeft: \"0\" },\n            }}\n            inputProps={{ style: { textAlign: \"center\" } }}\n          />\n        </Box>\n        <br></br>\n        <Attribute\n          name=\"Mastnummer\"\n          value={mastnummer}\n          setValue={setMastnummer}\n          disabled={\n            selectedVermarkungstrager !== null &&\n            selectedVermarkungstrager !== 10\n          }\n        />\n        <Typography variant=\"h6\" className={classes.title}>\n          Status:\n        </Typography>\n        <FormControl fullWidth>\n          <Select\n            labelId=\"status\"\n            id=\"status\"\n            value={selectedStatus}\n            label=\"Status\"\n            onChange={(event) => handleChangeStatus(event)}\n          >\n            {statusOptions.map((option) => (\n              <MenuItem key={option.value} value={option.value}>\n                {option.label}\n              </MenuItem>\n            ))}\n          </Select>\n        </FormControl>\n        <Typography variant=\"h6\" className={classes.title}>\n          Wenn keine Mastnummer vorhanden ist, dann Vermarkungsträger auswählen:\n        </Typography>\n        <FormControl fullWidth>\n          <InputLabel id=\"demo-simple-select-label\">\n            Vermarkungsträger\n          </InputLabel>\n          <Select\n            labelId=\"vermarkungstraeger\"\n            id=\"vermarkungstraeger\"\n            value={selectedVermarkungstrager}\n            label=\"Vermarkung\"\n            onChange={(event) => handleChangeVermarkungstrager(event)}\n            disabled={!!mastnummer}\n          >\n            {vermarkungOptions.map((option) => (\n              <MenuItem key={option.value} value={option.value}>\n                {option.label}\n              </MenuItem>\n            ))}\n          </Select>\n        </FormControl>\n        <Attribute\n          name=\"Sonstiges\"\n          value={sonstiges2}\n          setValue={setSonstiges2}\n          disabled={selectedVermarkungstrager !== 70}\n        />\n        <br></br>\n        <Attribute name=\"Offset [mm]\" value={gvp} setValue={setGVP} />\n        <br></br>\n        <Typography variant=\"h6\" className={classes.title}>\n          Datum\n        </Typography>\n        <br></br>\n        <TextField\n          required\n          fullWidth\n          name=\"currentDate\"\n          placeholder=\"z.B. 2023-10-20\"\n          value={currentDate}\n          onChange={(e) => {\n            setCurrentDate(e.target.value);\n          }}\n          margin=\"normal\"\n          inputProps={{ style: { textAlign: \"center\" } }}\n        />\n        <br></br>\n        <Typography variant=\"h6\" className={classes.title}>\n          Foto hochladen\n        </Typography>\n        {/* <Webcam\n          audio={false}\n          videoConstraints={videoConstraints}\n          ref={webcamRef}\n        /> */}\n        {/* <button onClick={capture}>Foto aufnehmen</button>\n        {photo && <img src={photo} alt=\"Captured\" />} */}\n        <input\n          ref={(el) => (reff.current = el)}\n          required\n          type=\"file\"\n          name=\"photo\"\n          accept=\"image/*;capture=camera\"\n          onChange={(e) => handlePhotoChange(e)}\n        />\n      </Box>\n      <Buttons\n        handleSubmit={handleSubmit}\n        downloadCombinedData={downloadCombinedData}\n        downloadCombinedTodayData={downloadCombinedTodayData}\n      />\n      <Snackbar\n        open={!!successMessage}\n        autoHideDuration={7000}\n        onClose={handleSuccessClose}\n      >\n        <SnackbarContent\n          message={successMessage}\n          className={classes.successSnackbar}\n        />\n      </Snackbar>\n\n      <Snackbar\n        open={!!errorMessage}\n        autoHideDuration={12000}\n        onClose={handleErrorClose}\n      >\n        <SnackbarContent\n          message={errorMessage}\n          className={classes.errorSnackbar}\n        />\n      </Snackbar>\n    </Dialog>\n  );\n};\n\nexport default SimpleDialog;\n","import React, { useState, useEffect } from \"react\";\r\nimport Papa from \"papaparse\";\r\nimport { Box, Button, Input, Typography, Paper } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { CloudUpload, OpenInBrowser } from \"@material-ui/icons\";\r\nimport { SimpleDialog } from \"./Formular\";\r\n\r\nconst handleCSVFile = (file, setImportData, setColNames) => {\r\n  Papa.parse(file, {\r\n    complete: (result) => {\r\n      const name = file.name ? file.name.split(\".\").at(0) : \"\";\r\n\r\n      // Check if there are data rows in the result\r\n      if (result.data && result.data.length > 0) {\r\n        const headerRow = Object.keys(result.data[0]);\r\n\r\n        // Exclude the last row if it is empty\r\n        const dataRows = result.data.slice(0, -1);\r\n\r\n        // Define the columns you want to include\r\n        const columnsToInclude = [\"PktNr\", \"Km-Station Ist\"];\r\n\r\n        // Filter out only the columns you are interested in\r\n        const filteredDataRows = dataRows.map((el, idx) => {\r\n          const filteredRow = {\r\n            id: idx,\r\n            Streckennummer: name,\r\n            \"Offset [mm]\": \"\",\r\n          };\r\n\r\n          columnsToInclude.forEach((col) => {\r\n            if (col === \"Km-Station Ist\") {\r\n              // Round the value to 3 digits after the decimal point\r\n              const kmStationValue = el[col].toString();\r\n              const integerPart = kmStationValue\r\n                .split(\",\")[0]\r\n                .replace(/\\D/g, \"\");\r\n              const formattedValue = integerPart.replace(\r\n                /\\B(?=(\\d{3})+(?!\\d))/g,\r\n                \",\"\r\n              );\r\n              filteredRow[col] = formattedValue;\r\n            } else {\r\n              filteredRow[col] = el[col];\r\n            }\r\n          });\r\n\r\n          return filteredRow;\r\n        });\r\n\r\n        setImportData(filteredDataRows);\r\n\r\n        // Set the column names\r\n        setColNames([...columnsToInclude, \"Streckennummer\", \"Offset [mm]\"]);\r\n      } else {\r\n        console.error(\"CSV file is empty or missing data.\");\r\n        // Handle the case when the CSV file is empty or missing data\r\n      }\r\n    },\r\n    header: true,\r\n    encoding: \"ISO-8859-1\",\r\n  });\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  header: {\r\n    padding: theme.spacing(2),\r\n    backgroundColor: theme.palette.primary.main,\r\n    color: theme.palette.common.white,\r\n  },\r\n  content: {\r\n    padding: theme.spacing(3),\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  buttonContainer: {\r\n    marginTop: theme.spacing(2),\r\n    textAlign: \"center\", // Center-align the buttons\r\n  },\r\n  button: {\r\n    display: \"block\",\r\n    margin: \"10px auto\",\r\n    padding: \"10px 20px\",\r\n    fontSize: \"1rem\",\r\n    textTransform: \"none\",\r\n    backgroundColor: \"#6a8dbb\",\r\n    color: theme.palette.common.white,\r\n    \"&:hover\": {\r\n      backgroundColor: \"#3c5a7d\",\r\n    },\r\n  },\r\n  input: {\r\n    display: \"none\",\r\n  },\r\n}));\r\n\r\nconst CSVimport = ({ setShowTable, setImportData, setColNames }) => {\r\n  const classes = useStyles();\r\n  const [formOpen, setFormOpen] = useState(false);\r\n  const [fileSelected, setFileSelected] = useState(false);\r\n  const [invalidFileType, setInvalidFileType] = useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setFormOpen(true);\r\n  };\r\n\r\n  const handleClose = (value) => {\r\n    setFormOpen(false);\r\n  };\r\n\r\n  const handleFileChange = (event) => {\r\n    const file = event.target.files[0];\r\n\r\n    // Check if a file is selected\r\n    if (file) {\r\n      // Check if the selected file is a CSV file\r\n      if (file.type === \"text/csv\" || file.name.endsWith(\".csv\")) {\r\n        handleCSVFile(file, setImportData, setColNames);\r\n        setShowTable(true);\r\n        setFileSelected(true);\r\n        setInvalidFileType(false); // Reset the invalid file type state\r\n      } else {\r\n        // Set the state to indicate an invalid file type\r\n        setInvalidFileType(true);\r\n        setFileSelected(false);\r\n      }\r\n    } else {\r\n      setFileSelected(false);\r\n      setInvalidFileType(false); // Reset the invalid file type state\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box>\r\n      <Paper className={classes.header} elevation={3}>\r\n        <Typography variant=\"h4\">GV-Targeterfassung</Typography>\r\n      </Paper>\r\n      <Paper className={classes.content} elevation={3}>\r\n        <Box className={classes.buttonContainer}>\r\n          <label htmlFor=\"csv-input\">\r\n            <Input\r\n              accept=\".csv\"\r\n              className={classes.input}\r\n              id=\"csv-input\"\r\n              type=\"file\"\r\n              onChange={handleFileChange}\r\n            />\r\n            <Button\r\n              variant=\"contained\"\r\n              startIcon={<CloudUpload />}\r\n              color=\"secondary\"\r\n              className={classes.button}\r\n              component=\"span\"\r\n            >\r\n              Koordinatendatei hochladen\r\n            </Button>\r\n          </label>\r\n          {invalidFileType && (\r\n            <Typography variant=\"body2\" color=\"error\">\r\n              Wählen Sie eine CSV Datei\r\n            </Typography>\r\n          )}\r\n        </Box>\r\n        <Box>\r\n          <Button\r\n            variant=\"contained\"\r\n            startIcon={<OpenInBrowser />}\r\n            color=\"secondary\"\r\n            className={classes.button}\r\n            component=\"span\"\r\n            onClick={handleClickOpen}\r\n          >\r\n            Neupunkt erfassen\r\n          </Button>\r\n          <SimpleDialog\r\n            selectedValue={\"\"}\r\n            open={formOpen}\r\n            onClose={handleClose}\r\n          />\r\n        </Box>\r\n      </Paper>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default CSVimport;\r\n","import {\n  Box,\n  FormControl,\n  FormControlLabel,\n  Radio,\n  RadioGroup,\n  Snackbar,\n  SnackbarContent,\n  Typography,\n  makeStyles, // Import makeStyles\n} from \"@material-ui/core\";\nimport TextField from \"@material-ui/core/TextField\";\nimport React, { useEffect, useState, useRef } from \"react\";\nimport Buttons from \"./Buttons\";\nimport JSZip from \"jszip\";\nimport {\n  openDatabase,\n  addSubmission,\n  deleteSubmission,\n  getAllSubmissions,\n} from \"../db\";\nimport Attribute from \"./Attribute\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Select from \"@material-ui/core/Select\";\nimport imageCompression from \"browser-image-compression\";\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    fontWeight: \"bold\",\n    fontSize: \"1.2rem\", // Adjust the font size\n    marginBottom: \"5px\", // Add some spacing below titles\n  },\n  textField: {\n    marginBottom: \"1px\", // Add margin to text fields\n  },\n  successSnackbar: {\n    backgroundColor: theme.palette.success.main,\n    color: theme.palette.success.contrastText,\n  },\n  errorSnackbar: {\n    backgroundColor: theme.palette.error.main,\n    color: theme.palette.error.contrastText,\n  },\n}));\n\nconst MainForm = ({ reff, row, setImportData, onSubmitSuccess, setOpen }) => {\n  const [formData, setFormData] = useState({\n    seite: false,\n    sonstiges: \"\",\n    gvp: \"\",\n    photo: null,\n  });\n\n  const [punktnummer, setPunktnummer] = useState(row.PktNr ? row.PktNr : \"\");\n  const [streckennummer, setStreckennummer] = useState(\n    row.Streckennummer ? row.Streckennummer : \"\"\n  );\n  const [km, setKm] = useState(\n    row[\"Km-Station Ist\"] ? row[\"Km-Station Ist\"] : \"\"\n  );\n  const [met, setMet] = useState(row.Met ? row.Met : \"\");\n  const [seite, setSeite] = useState(\"\");\n  const [sonstiges, setSonstiges] = useState(\"\");\n  const [mastnummer, setMastnummer] = useState(\"\");\n  const [selectedVermarkungstrager, setselectedVermarkungstrager] =\n    useState(null);\n  const [selectedStatus, setselectedStatus] = useState(null);\n  const [sonstiges2, setSonstiges2] = useState(\"\");\n  const [gvp, setGVP] = useState(\"\");\n  const [photo, setPhoto] = useState(\"\");\n  const [successMessage, setSuccessMessage] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [submissions, setSubmissions] = useState([]); // Store all submissions\n\n  //const webcamRef = useRef(null);\n\n  useEffect(() => {\n    setImportData((state) =>\n      state.map((el) => {\n        if (el.id === row.id) {\n          return {\n            ...el,\n            \"Offset [mm]\": gvp,\n          };\n        }\n        if (el.id === row.id) {\n          return {\n            ...el,\n            Mastnummer: mastnummer,\n          };\n        }\n        return el;\n      })\n    );\n  }, [gvp, mastnummer, row.id, setImportData]);\n\n  // State for displaying the success and error message\n  const [successOpen, setSuccessOpen] = useState(false);\n  const [currentDate, setCurrentDate] = useState(\"\");\n\n  useEffect(() => {\n    setCurrentDate(new Date().toISOString().slice(0, 10));\n    if (row) {\n      if (row[\"Km-Station Ist\"]) {\n        const [km, meters] = row[\"Km-Station Ist\"].split(\",\");\n        //const km = kmValue.slice(0, -3);\n        //const meters = parseFloat(kmValue.slice(-3));\n        setKm(km);\n        setMet(meters);\n      }\n      if (row.Seite) {\n        setSeite(row.Seite);\n      }\n    }\n  }, [row, setCurrentDate]);\n\n  const classes = useStyles(); // Initialize the useStyles\n\n  const vermarkungOptions = [\n    { value: 10, label: \"Keiner\" },\n    { value: 20, label: \"Laterne\" },\n    { value: 30, label: \"Wand\" },\n    { value: 40, label: \"Fundament\" },\n    { value: 50, label: \"Lärmschutzwand\" },\n    { value: 60, label: \"Widerlager\" },\n    { value: 70, label: \"Sonstiges\" },\n  ];\n\n  const statusOptions = [\n    { value: 1, label: \"Zerstört\" },\n    { value: 2, label: \"Vorhanden mit Target\" },\n    { value: 3, label: \"Vorhanden ohne Target\" },\n  ];\n\n  const handleChangeVermarkung = (event) => {\n    setselectedVermarkungstrager(event.target.value);\n    if (event.target.value) {\n      setMastnummer(\"\"); // Reset Mastnummer when Vermarkungstrager is selected\n    }\n  };\n\n  const handleChangeStatus = (event) => {\n    setselectedStatus(event.target.value);\n  };\n\n  const handleSubmit = () => {\n    // Check if a photo is selected\n    if (!photo) {\n      setErrorMessage(\"Bitte wählen Sie ein Foto aus, bevor Sie fortfahren.\");\n      setSuccessMessage(\"\"); // Clear any existing success message\n      return;\n    }\n    // Check if streckennummer is empty\n    if (!streckennummer) {\n      setErrorMessage(\n        \"Bitte geben Sie die Streckennummer ein, bevor Sie fortfahren.\"\n      );\n      setSuccessMessage(\"\"); // Clear any existing success message\n      return;\n    }\n    if (!km & !met) {\n      setErrorMessage(\n        \"Bitte geben Sie die Kilometrierung ein, bevor Sie fortfahren.\"\n      );\n      setSuccessMessage(\"\"); // Clear any existing success message\n      return;\n    }\n    if (!seite) {\n      setErrorMessage(\"Bitte wählen Sie eine Seite aus, bevor Sie fortfahren.\");\n      setSuccessMessage(\"\"); // Clear any existing success message\n      return;\n    }\n    if (!mastnummer) {\n      setErrorMessage(\n        \"Bitte geben Sie eine Mastnummer ein, bevor Sie fortfahren.\"\n      );\n      setSuccessMessage(\"\"); // Clear any existing success message\n      return;\n    }\n    if (!selectedStatus) {\n      setErrorMessage(\n        \"Bitte wählen Sie einen Status aus, bevor Sie fortfahren.\"\n      );\n      setSuccessMessage(\"\"); // Clear any existing success message\n      return;\n    }\n    // Reset the form after a successful submission\n    resetForm();\n\n    const reader = new FileReader();\n\n    reader.onload = async (event) => {\n      const base64Photo = event.target.result;\n      const maxSizeInBytes = 0.5 * 1024 * 1024; // 0.5 MB\n      let quality = 1;\n\n      // Create an Image object and set its source to the base64 representation of the photo\n      const image = new Image();\n      image.src = base64Photo;\n\n      image.onload = async () => {\n        // Check if the photo size is smaller than or equal to 0.5 MB\n        if (event.total <= maxSizeInBytes) {\n          // Do nothing, the photo is already within the size limit\n          const vermarkungLabel = selectedVermarkungstrager\n            ? vermarkungOptions.find(\n                (option) => option.value === selectedVermarkungstrager\n              )?.label\n            : \"\";\n\n          const statusLabel = selectedStatus\n            ? statusOptions.find((option) => option.value === selectedStatus)\n                ?.label\n            : \"\";\n\n          const newSubmission = {\n            punktnummer: punktnummer,\n            streckennummer: streckennummer,\n            km: km,\n            met: met,\n            seite: seite,\n            sonstiges: sonstiges,\n            mastnummer: mastnummer,\n            selectedVermarkungstrager: vermarkungLabel,\n            selectedStatus: statusLabel,\n            sonstiges2: sonstiges2,\n            gvp: gvp,\n            currentDate: currentDate,\n            photo: base64Photo,\n          };\n\n          // Save the new submission to IndexedDB\n          try {\n            const db = await openDatabase();\n            //await addSubmission(db, newSubmission);\n            let data = await getAllSubmissions(db);\n            // Check if there's an existing submission with the same Streckennummer, Punktnummer, Kilometrierung\n            const index = data.findIndex(\n              (submission) =>\n                submission.streckennummer === newSubmission.streckennummer &&\n                submission.km === newSubmission.km &&\n                submission.punktnummer === newSubmission.punktnummer &&\n                submission.met === newSubmission.met\n            );\n            console.log(index);\n            if (index !== -1) {\n              // If a matching submission is found, replace it with the new submission\n              await deleteSubmission(db, data[index].id);\n            }\n            // Add the new submission\n            await addSubmission(db, newSubmission);\n            setSubmissions(data);\n            setSuccessMessage(\"Erfolgreich hinzugefügt\");\n            setOpen(false);\n            setSuccessOpen(true);\n          } catch (error) {\n            console.error(\"Error adding or fetching submission: \", error);\n          }\n        } else {\n          const canvas = document.createElement(\"canvas\");\n          const ctx = canvas.getContext(\"2d\");\n\n          canvas.width = image.width;\n          canvas.height = image.height;\n\n          ctx.drawImage(image, 0, 0, image.width, image.height);\n\n          try {\n            const compressedPhotoBlob = await new Promise((resolve) => {\n              canvas.toBlob(resolve, \"image/jpeg\", quality);\n            });\n\n            const compressedPhoto = await imageCompression(\n              compressedPhotoBlob,\n              {\n                maxSizeMB: 0.5,\n                maxWidthOrHeight: 1920,\n                useWebWorker: true,\n              }\n            );\n            console.log(\n              \"compressedFile instanceof Blob\",\n              compressedPhoto instanceof Blob\n            ); // true\n            console.log(\n              `compressedFile size ${compressedPhoto.size / 1024 / 1024} MB`\n            ); // smaller than maxSizeMB\n\n            const vermarkungLabel = selectedVermarkungstrager\n              ? vermarkungOptions.find(\n                  (option) => option.value === selectedVermarkungstrager\n                )?.label\n              : \"\";\n\n            const statusLabel = selectedStatus\n              ? statusOptions.find((option) => option.value === selectedStatus)\n                  ?.label\n              : \"\";\n\n            const newSubmission = {\n              punktnummer: punktnummer,\n              streckennummer: streckennummer,\n              km: km,\n              met: met,\n              seite: seite,\n              sonstiges: sonstiges,\n              mastnummer: mastnummer,\n              selectedVermarkungstrager: vermarkungLabel,\n              selectedStatus: statusLabel,\n              sonstiges2: sonstiges2,\n              gvp: gvp,\n              currentDate: currentDate,\n              photo: compressedPhoto,\n            };\n\n            // Save the new submission to IndexedDB\n            try {\n              const db = await openDatabase();\n              //await addSubmission(db, newSubmission);\n              let data = await getAllSubmissions(db);\n              // Check if there's an existing submission with the same Streckennummer, Punktnummer, Kilometrierung\n              const index = data.findIndex(\n                (submission) =>\n                  submission.streckennummer === newSubmission.streckennummer &&\n                  submission.km === newSubmission.km &&\n                  submission.punktnummer === newSubmission.punktnummer &&\n                  submission.met === newSubmission.met\n              );\n              console.log(index);\n              if (index !== -1) {\n                // If a matching submission is found, replace it with the new submission\n                await deleteSubmission(db, data[index].id);\n              }\n              // Add the new submission\n              await addSubmission(db, newSubmission);\n              setSubmissions(data);\n              setSuccessMessage(\"Erfolgreich hinzugefügt\");\n              setSuccessOpen(true);\n            } catch (error) {\n              console.error(\"Error adding or fetching submission: \", error);\n            }\n          } catch (error) {\n            console.error(\"Error compressing photo: \", error);\n          }\n        }\n      };\n    };\n\n    // Read the photo data as a data URL\n    reader.readAsDataURL(photo);\n    reff.current.value = \"\";\n  };\n\n  const downloadCombinedTodayData = () => {\n    const zip = new JSZip();\n    const todaySubmissions = submissions.filter(\n      (entry) => entry.currentDate === currentDate\n    );\n\n    // Add the CSV data to the ZIP file\n    const csvContent =\n      \"Punktnummer;Streckennummer;Kilometrierung; Seite (bezogen auf Strecke); Sonstiges; Mastnummer; Status; Vermarkung; Sonstiges Vermarkung; Offset [m]; Datum\\n\" +\n      todaySubmissions\n        .map((entry) => {\n          const gvpInMeters = (entry.gvp / 1000).toLocaleString(\"de-DE\", {\n            minimumFractionDigits: 2,\n          });\n          return `${entry.punktnummer};${entry.streckennummer};${entry.km},${entry.met};${entry.seite};${entry.sonstiges};${entry.mastnummer};${entry.selectedStatus};${entry.selectedVermarkungstrager};${entry.sonstiges2};${gvpInMeters};${currentDate}`;\n        })\n        .join(\"\\n\");\n\n    zip.file(`${currentDate}.csv`, csvContent);\n\n    // Create two folders directly in the ZIP file\n    const vorhandenMitTargetFolder = zip.folder(\"Vorhanden_mit_Target\");\n    const vorhandenOhneTargetFolder = zip.folder(\"Vorhanden_ohne_Target\");\n\n    // Add the image files to the ZIP file\n    todaySubmissions.forEach((el, index) => {\n      const date = el.currentDate.replace(/-/g, \"\");\n      let roundedMetWithoutLastDigit;\n      if (el.met && el.met.toString().length >= 3) {\n        const metAsNumber = parseFloat(el.met);\n        const roundedMet = Math.round(metAsNumber / 10) * 10;\n        roundedMetWithoutLastDigit = Math.floor(roundedMet / 10);\n      } else {\n        roundedMetWithoutLastDigit = el.met; // No rounding if met has 1 or 2 digits\n      }\n\n      let folderToAdd;\n      if (el.selectedStatus === \"Vorhanden ohne Target\") {\n        folderToAdd = vorhandenOhneTargetFolder;\n      } else {\n        folderToAdd = vorhandenMitTargetFolder;\n      }\n\n      let filename;\n\n      if (el.mastnummer && el.mastnummer.endsWith(\"N\")) {\n        let mastnummer = el.mastnummer;\n        mastnummer = mastnummer.trim().slice(0, -1);\n        filename = `${el.streckennummer}_${el.km},${roundedMetWithoutLastDigit}_${el.seite}_${mastnummer}_${date}.jpg`;\n      } else if (\n        el.selectedVermarkungstrager &&\n        el.selectedVermarkungstrager !== \"Sonstiges\"\n      ) {\n        filename = `${el.streckennummer}_${el.km},${roundedMetWithoutLastDigit}_${el.seite}_${el.selectedVermarkungstrager}_${date}.jpg`;\n      } else if (el.sonstiges2) {\n        filename = `${el.streckennummer}_${el.km},${roundedMetWithoutLastDigit}_${el.seite}_${el.sonstiges2}_${date}.jpg`;\n      } else if (el.mastnummer) {\n        filename = `${el.streckennummer}_${el.km},${roundedMetWithoutLastDigit}_${el.seite}_${el.mastnummer}_${date}.jpg`;\n      } else {\n        // Handle the case when none of the conditions are met\n        console.error(\"Invalid submission data\");\n        return;\n      }\n\n      if (el.photo instanceof Blob) {\n        // Assuming el.photo is a Blob\n        folderToAdd.file(filename, el.photo);\n      } else if (typeof el.photo === \"string\") {\n        // Assuming el.photo is a base64 encoded string\n        const base64Data = el.photo.split(\",\")[1];\n        folderToAdd.file(filename, base64Data, { base64: true });\n      }\n    });\n\n    // Create and trigger a download link for the ZIP file\n    zip.generateAsync({ type: \"blob\" }).then((content) => {\n      const cur_date = new Date().toISOString().slice(0, 10);\n      const url = window.URL.createObjectURL(content);\n      const link = document.createElement(\"a\");\n      link.href = url;\n      link.download = `${cur_date}.zip`;\n      setTimeout(() => {\n        link.click();\n      }, 100);\n    });\n  };\n\n  const downloadCombinedData = () => {\n    const zip = new JSZip();\n    // Add the CSV data to the ZIP file\n    const csvContent =\n      \"Punktnummer;Streckennummer;Kilometrierung; Seite (bezogen auf Strecke); Sonstiges; Mastnummer; Status; Vermarkung; Sonstiges Vermarkung; Offset [m]; Datum\\n\" +\n      submissions\n        .map((entry) => {\n          const gvpInMeters = (entry.gvp / 1000).toLocaleString(\"de-DE\", {\n            minimumFractionDigits: 2,\n          });\n          return `${entry.punktnummer};${entry.streckennummer};${entry.km},${entry.met};${entry.seite};${entry.sonstiges};${entry.mastnummer};${entry.selectedStatus};${entry.selectedVermarkungstrager};${entry.sonstiges2};${gvpInMeters};${entry.currentDate}`;\n        })\n        .join(\"\\n\");\n\n    zip.file(\"alle_daten.csv\", csvContent);\n\n    // Create two folders directly in the ZIP file\n    const vorhandenMitTargetFolder = zip.folder(\"Vorhanden_mit_Target\");\n    const vorhandenOhneTargetFolder = zip.folder(\"Vorhanden_ohne_Target\");\n\n    // Add the image files to the ZIP file\n    submissions.forEach((el, index) => {\n      const date = el.currentDate.replace(/-/g, \"\");\n      let roundedMetWithoutLastDigit;\n      if (el.met && el.met.toString().length >= 3) {\n        const metAsNumber = parseFloat(el.met);\n        const roundedMet = Math.round(metAsNumber / 10) * 10;\n        roundedMetWithoutLastDigit = Math.floor(roundedMet / 10);\n      } else {\n        roundedMetWithoutLastDigit = el.met; // No rounding if met has 1 or 2 digits\n      }\n\n      let folderToAdd;\n      if (el.selectedStatus === \"Vorhanden ohne Target\") {\n        folderToAdd = vorhandenMitTargetFolder;\n      } else if (el.selectedStatus === \"Vorhanden ohne Target\") {\n        folderToAdd = vorhandenOhneTargetFolder;\n      }\n\n      let filename;\n\n      if (el.mastnummer) {\n        filename = `${el.streckennummer}_${el.km},${roundedMetWithoutLastDigit}_${el.seite}_${el.mastnummer}_${date}.jpg`;\n      } else if (\n        el.selectedVermarkungstrager &&\n        el.selectedVermarkungstrager !== \"Sonstiges\"\n      ) {\n        filename = `${el.streckennummer}_${el.km},${roundedMetWithoutLastDigit}_${el.seite}_${el.selectedVermarkungstrager}_${date}.jpg`;\n      } else if (el.sonstiges2) {\n        filename = `${el.streckennummer}_${el.km},${roundedMetWithoutLastDigit}_${el.seite}_${el.sonstiges2}_${date}.jpg`;\n      } else {\n        // Handle the case when none of the conditions are met\n        console.error(\"Invalid submission data\");\n        return;\n      }\n      if (el.photo instanceof Blob) {\n        // Assuming el.photo is a Blob\n        folderToAdd.file(filename, el.photo);\n      } else if (typeof el.photo === \"string\") {\n        // Assuming el.photo is a base64 encoded string\n        const base64Data = el.photo.split(\",\")[1];\n        folderToAdd.file(filename, base64Data, { base64: true });\n      }\n    });\n\n    // Create and trigger a download link for the ZIP file\n    zip.generateAsync({ type: \"blob\" }).then((content) => {\n      const url = window.URL.createObjectURL(content);\n      const link = document.createElement(\"a\");\n      link.href = url;\n      link.download = \"combined_data.zip\";\n      setTimeout(() => {\n        link.click();\n      }, 100);\n    });\n  };\n\n  const handleSuccessClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setSuccessMessage(\"\");\n  };\n\n  const handleErrorClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setErrorMessage(\"\");\n  };\n\n  const resetForm = () => {\n    setFormData({\n      km: \"\",\n      met: \"\",\n      seite: \"\",\n      sonstiges: \"\",\n      punktnummer: \"\",\n      gvp: \"\",\n      photo: null,\n    });\n  };\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setFormData({\n      ...formData,\n      [name]: value,\n    });\n  };\n\n  const handlePhotoChange = (e) => {\n    const photoFile = e.target.files[0];\n    setPhoto(photoFile);\n  };\n\n  useEffect(() => {\n    openDatabase()\n      .then((db) => {\n        getAllSubmissions(db).then((data) => setSubmissions(data));\n      })\n      .catch((error) => console.error(\"Error opening database: \", error));\n  }, []);\n\n  return (\n    <>\n      <Box\n        display=\"flex\"\n        flexDirection=\"column\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        maxWidth=\"400px\"\n        margin=\"0 auto\"\n        padding=\"20px\"\n        border=\"1px solid #ccc\"\n        borderRadius=\"8px\"\n        boxShadow=\"0 0 5px rgba(0, 0, 0, 0.2)\"\n      >\n        <Attribute\n          value={punktnummer}\n          setValue={setPunktnummer}\n          name=\"Punktnummer\"\n        />\n        <Attribute\n          value={streckennummer}\n          setValue={setStreckennummer}\n          name=\"Streckennummer\"\n        />\n        {/* <Attribute value={km} setValue={setKm} name=\"Km\" /> */}\n        <Typography variant=\"h6\" className={classes.title}>\n          Kilometrierung [km]\n        </Typography>\n        <Box display=\"flex\" flexDirection=\"row\" alignItems=\"center\">\n          <TextField\n            required\n            style={{ marginRight: \"5px\" }}\n            id=\"km\"\n            name=\"km\"\n            placeholder=\"z.B. 69\"\n            value={km}\n            onChange={handleInputChange}\n            inputProps={{ style: { textAlign: \"center\" }, maxLength: 2 }}\n          />\n          <Typography>, </Typography>\n          <TextField\n            required\n            style={{ marginLeft: \"5px\" }}\n            id=\"met\"\n            name=\"met\"\n            placeholder=\"875\"\n            value={met}\n            onChange={handleInputChange}\n            inputProps={{ style: { textAlign: \"center\" }, maxLength: 3 }}\n          />\n        </Box>\n        <br></br>\n        <Typography variant=\"h6\" className={classes.title}>\n          Seite (bezogen auf Strecke)\n        </Typography>\n\n        <Box display=\"flex\" flexDirection=\"row\" alignItems=\"center\">\n          <FormControl component=\"fieldset\">\n            <RadioGroup\n              row\n              required\n              id=\"seite\"\n              name=\"seite\"\n              value={seite}\n              onChange={(e) => setSeite(e.target.value)}\n            >\n              <FormControlLabel value=\"L\" control={<Radio />} label=\"L\" />\n              <FormControlLabel value=\"R\" control={<Radio />} label=\"R\" />\n            </RadioGroup>\n          </FormControl>\n\n          <TextField\n            fullWidth\n            label=\"Sonstiges\"\n            id=\"sonstiges\"\n            name=\"sonstiges\"\n            value={sonstiges}\n            onChange={(e) => setSonstiges(e.target.value)}\n            inputProps={{ style: { textAlign: \"center\" } }}\n            InputLabelProps={{\n              style: { textAlign: \"center\", width: \"100%\", marginLeft: \"0\" },\n            }}\n          />\n        </Box>\n        <br></br>\n        <Attribute\n          name=\"Mastnummer\"\n          value={mastnummer}\n          setValue={setMastnummer}\n          disabled={\n            selectedVermarkungstrager !== null &&\n            selectedVermarkungstrager !== 10\n          }\n        />\n        <Typography variant=\"h6\" className={classes.title}>\n          Status\n        </Typography>\n        <FormControl fullWidth>\n          <Select\n            labelId=\"status\"\n            id=\"status\"\n            value={selectedStatus}\n            label=\"Status\"\n            onChange={(event) => handleChangeStatus(event)}\n          >\n            {statusOptions.map((option) => (\n              <MenuItem key={option.value} value={option.value}>\n                {option.label}\n              </MenuItem>\n            ))}\n          </Select>\n        </FormControl>\n        <Typography variant=\"h6\" className={classes.title}>\n          Wenn keine Mastnummer vorhanden ist, dann Vermarkungsträger auswählen:\n        </Typography>\n        <FormControl fullWidth>\n          <InputLabel id=\"demo-simple-select-label\">\n            Vermarkungsträger\n          </InputLabel>\n          <Select\n            labelId=\"vermarkungstraeger\"\n            id=\"vermarkungstraeger\"\n            value={selectedVermarkungstrager}\n            label=\"Vermarkung\"\n            onChange={(event) => handleChangeVermarkung(event)}\n            disabled={!!mastnummer}\n          >\n            {vermarkungOptions.map((option) => (\n              <MenuItem key={option.value} value={option.value}>\n                {option.label}\n              </MenuItem>\n            ))}\n          </Select>\n        </FormControl>\n        <Attribute\n          name=\"Sonstiges\"\n          value={sonstiges2}\n          setValue={setSonstiges2}\n          disabled={selectedVermarkungstrager !== 70}\n        />\n        <br></br>\n        <Attribute\n          value={gvp}\n          setValue={(value) => {\n            if (selectedStatus === 3) {\n              setGVP(\"\"); // Clear the value if selectedStatus is 3\n            } else {\n              setGVP(value); // Otherwise, set the value normally\n            }\n          }}\n          name=\"Offset [mm]\"\n          disabled={selectedStatus === 3}\n        />\n        <br></br>\n        <Typography variant=\"h6\" className={classes.title}>\n          Datum\n        </Typography>\n        <br></br>\n        <TextField\n          required\n          fullWidth\n          name=\"currentDate\"\n          placeholder=\"z.B. 2023-10-20\"\n          value={currentDate}\n          onChange={(e) => {\n            setCurrentDate(e.target.value);\n          }}\n          margin=\"normal\"\n          inputProps={{ style: { textAlign: \"center\" } }}\n        />\n        <br></br>\n        <Typography variant=\"h6\" className={classes.title}>\n          Foto hochladen\n        </Typography>\n\n        {/*  <Webcam\n          audio={false}\n          videoConstraints={videoConstraints}\n          ref={webcamRef}\n        /> */}\n\n        {/*  <button onClick={capture}>Foto aufnehmen</button> */}\n        {/* {photo && <img src={photo} alt=\"Captured\" />} */}\n        <input\n          ref={(el) => (reff.current = el)}\n          required\n          type=\"file\"\n          name=\"photo\"\n          accept=\"image/*;capture=camera\"\n          onChange={(e) => handlePhotoChange(e)}\n        />\n      </Box>\n      <Buttons\n        handleSubmit={handleSubmit}\n        downloadCombinedData={downloadCombinedData}\n        downloadCombinedTodayData={downloadCombinedTodayData}\n      />\n      <Snackbar\n        open={!!successMessage}\n        autoHideDuration={7000}\n        onClose={handleSuccessClose}\n      >\n        <SnackbarContent\n          message={successMessage}\n          className={classes.successSnackbar}\n        />\n      </Snackbar>\n\n      <Snackbar\n        open={!!errorMessage}\n        autoHideDuration={12000}\n        onClose={handleErrorClose}\n      >\n        <SnackbarContent\n          message={errorMessage}\n          className={classes.errorSnackbar}\n        />\n      </Snackbar>\n    </>\n  );\n};\n\nexport default MainForm;\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Button from \"./Buttons\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport MainForm from \"./MainForm\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    padding: theme.spacing(3),\r\n  },\r\n  successSnackbar: {\r\n    backgroundColor: \"#92b493\",\r\n  },\r\n  errorSnackbar: {\r\n    backgroundColor: \"#FF5722\",\r\n  },\r\n  buttonContainer: {\r\n    textAlign: \"center\",\r\n    marginTop: theme.spacing(2),\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n    padding: \"10px 20px\",\r\n    fontSize: \"1rem\",\r\n    textTransform: \"none\",\r\n  },\r\n}));\r\n\r\nfunction SimpleDialog({\r\n  row,\r\n  onClose,\r\n  selectedValue,\r\n  open,\r\n  reff,\r\n  setImportData,\r\n  setOpen,\r\n}) {\r\n  const classes = useStyles();\r\n  const handleClose = () => {\r\n    onClose(selectedValue);\r\n  };\r\n\r\n  return (\r\n    <Dialog\r\n      onClose={handleClose}\r\n      aria-labelledby=\"simple-dialog-title\"\r\n      open={open}\r\n    >\r\n      <Paper elevation={3} className={classes.paper}>\r\n        <MainForm\r\n          row={row}\r\n          reff={reff}\r\n          setImportData={setImportData}\r\n          setOpen={setOpen}\r\n        />\r\n      </Paper>\r\n    </Dialog>\r\n  );\r\n}\r\n\r\nconst MainFormDialogContainer = ({\r\n  row,\r\n  reff,\r\n  selectedRowData,\r\n  setImportData,\r\n}) => {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(false);\r\n  const [selectedValue, setSelectedValue] = React.useState([]);\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setTimeout(() => {\r\n      setOpen(false); // Close the dialog upon successful form submission after a delay\r\n    }, 2000); // Adjust the delay time as needed (e.g., 2000 milliseconds for 2 seconds)\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className={classes.buttonContainer}>\r\n        <IconButton\r\n          aria-label=\"edit\"\r\n          onClick={() => handleClickOpen()}\r\n          className={classes.button}\r\n        >\r\n          Bearbeiten\r\n          <EditIcon />\r\n        </IconButton>\r\n        <SimpleDialog\r\n          row={row}\r\n          selectedValue={selectedValue}\r\n          open={open}\r\n          onClose={handleClose}\r\n          reff={reff}\r\n          selectedRowData={selectedRowData}\r\n          setImportData={setImportData}\r\n          setOpen={handleClose}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MainFormDialogContainer;\r\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport MainFormDialogContainer from \"./MainFormDialogContainer\";\n\nconst useStyles = makeStyles((theme) => ({\n  table: {\n    minWidth: 650,\n  },\n  tableHead: {\n    backgroundColor: \"#6a8dbb\",\n    color: theme.palette.common.white,\n  },\n  editButton: {\n    color: theme.palette.secondary.main,\n  },\n}));\n\nconst TableWrapper = ({ importData, reff, setImportData, colNames }) => {\n  console.log(colNames);\n  const classes = useStyles();\n  return (\n    <TableContainer component={Paper}>\n      <Table className={classes.table} aria-label=\"enhanced table\">\n        <TableHead>\n          <TableRow className={classes.tableHead}>\n            {colNames.map((col, idx) => (\n              <TableCell key={`keys-${idx}`} align=\"right\">\n                {col}\n              </TableCell>\n            ))}\n            <TableCell key={`keys-edit`} align=\"right\"></TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {importData.map((row, idx) => (\n            <TableRow key={idx}>\n              {colNames.map((col, idx) => (\n                <TableCell key={`values-${idx}`} align=\"right\">\n                  {row[col]}\n                </TableCell>\n              ))}\n              <TableCell key={`values-edit`} align=\"right\">\n                <MainFormDialogContainer\n                  row={row}\n                  reff={reff}\n                  setImportData={setImportData}\n                />\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n};\n\nexport default TableWrapper;\n","import { makeStyles } from \"@material-ui/core/styles\";\nimport classnames from \"classnames\";\nimport React, { useEffect, useState, useRef } from \"react\";\nimport \"./App.css\";\nimport { openDatabase } from \"./db\";\nimport CSVimport from \"./components/CSVimport\";\nimport TableWrapper from \"./components/TableWrapper\";\nimport CloudDownloadIcon from \"@material-ui/icons/CloudDownload\";\nimport { Button } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexWrap: \"wrap\",\n    width: \"100%\",\n    height: \"100%\",\n    backgroundColor: \"#f4f4f4\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    \"& > *\": {\n      padding: \"10px\",\n      display: \"flex\",\n      flexDirection: \"column\",\n    },\n  },\n}));\n\n// Function to clear the IndexedDB\nconst clearIndexedDB = async (db) => {\n  return new Promise((resolve, reject) => {\n    const transaction = db.transaction([\"submissions\"], \"readwrite\");\n    const objectStore = transaction.objectStore(\"submissions\");\n\n    const request = objectStore.clear();\n\n    request.onsuccess = () => {\n      resolve();\n    };\n\n    request.onerror = (event) => {\n      reject(event.target.error);\n    };\n  });\n};\n\nconst App = () => {\n  const classes = useStyles();\n\n  const reff = useRef(null);\n  const [showDownloadButton, setShowDownloadButton] = useState(false);\n  const [importData, setImportData] = useState([]);\n  const [colNames, setColNames] = useState([]);\n  const [showTable, setShowTable] = useState(false);\n\n  useEffect(() => {\n    const clearDatabaseEvery2Weeks = async () => {\n      try {\n        const db = await openDatabase();\n        await clearIndexedDB(db);\n        console.log(\"IndexedDB cleared.\");\n      } catch (error) {\n        console.error(\"Error clearing IndexedDB: \", error);\n      }\n    };\n\n    // Calculate the time until the next midnight\n    const now = new Date();\n    const nextMidnight = new Date(now);\n    nextMidnight.setHours(24, 0, 0, 0);\n    const timeUntilMidnight = nextMidnight - now;\n\n    // Schedule the first interval to start at the next midnight and repeat every 14 days at midnight\n    const interval = 14 * 24 * 60 * 60 * 1000 + timeUntilMidnight;\n    const intervalId = setInterval(clearDatabaseEvery2Weeks, interval);\n    console.log(interval);\n\n    // Cleanup the interval when the component unmounts\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, []);\n\n  const convertToCSV = (importData) => {\n    // Ensure data is not empty\n    if (!importData || importData.length === 0) {\n      return \"\";\n    }\n\n    // Extract column names\n    const columns = Object.keys(importData[0]);\n\n    // Create header row\n    const headerRow = columns.join(\";\");\n\n    // Create data rows\n    const dataRows = importData.map((row) =>\n      columns.map((column) => row[column]).join(\";\")\n    );\n\n    // Combine header and data rows\n    const csvContent = [headerRow, ...dataRows].join(\"\\n\");\n\n    return csvContent;\n  };\n\n  /*   const handleDownload = () => {\n    const csvContent = convertToCSV(importData);\n\n    // Create a Blob and create a download link\n    const blob = new Blob([csvContent], { type: \"text/csv\" });\n    const link = document.createElement(\"a\");\n    link.href = URL.createObjectURL(blob);\n    link.download = \"table_data.csv\";\n\n    // Simulate a click to trigger the download\n    link.click();\n  };\n */\n  return (\n    <div className={classnames(classes.root, \"appWrapper\")}>\n      <CSVimport\n        setShowTable={(value) => {\n          setShowTable(value);\n          setShowDownloadButton(value); // Set showDownloadButton based on showTable\n        }}\n        setImportData={setImportData}\n        setColNames={setColNames}\n      />\n      {showTable && (\n        <>\n          <TableWrapper\n            importData={importData}\n            reff={reff}\n            setImportData={setImportData}\n            colNames={colNames}\n          />\n          {/*    {showDownloadButton && ( // Conditionally render the download button\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              style={{ height: \"50px\", marginTop: \"10px\" }}\n              className={classes.button}\n              startIcon={<CloudDownloadIcon />}\n              onClick={handleDownload}\n            >\n              Tabelle herunterladen\n            </Button>\n          )} */}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}