{"version":3,"sources":["db.js","components/Attribute.js","components/Buttons.js","components/Formular.js","components/CSVimport.js","components/MainForm.js","components/MainFormDialogContainer.js","components/TableWrapper.js","App.js","serviceWorker.js","index.js"],"names":["openDatabase","Promise","resolve","reject","request","indexedDB","open","onupgradeneeded","event","target","result","createObjectStore","keyPath","autoIncrement","onsuccess","db","onerror","error","addSubmission","submission","transaction","objectStore","add","getAllSubmissions","getAll","useStyles","makeStyles","theme","title","fontWeight","fontSize","marginBottom","Attribute","value","setValue","name","disabled","classes","Typography","variant","className","TextField","required","fullWidth","onChange","e","newValue","Math","max","parseInt","toString","slice","margin","inputProps","style","textAlign","button","spacing","padding","textTransform","buttonsContainer","display","flexDirection","alignItems","buttonContainer","marginTop","Buttons","handleSubmit","downloadCombinedTodayData","downloadCombinedData","Box","Button","color","endIcon","onClick","startIcon","textField","successSnackbar","backgroundColor","palette","success","main","contrastText","errorSnackbar","SimpleDialog","props","ref","streckennummer","setStreckennummer","useState","km","setKm","met","setMet","seite","setSeite","sonstiges","setSonstiges","mastnummer","setMastnummer","selectedVermarkungstrager","setselectedVermarkungstrager","sonstiges2","setSonstiges2","gvp","setGVP","photo","setPhoto","onClose","selectedValue","successMessage","setSuccessMessage","errorMessage","setErrorMessage","submissions","setSubmissions","successOpen","setSuccessOpen","currentDate","setCurrentDate","useEffect","Date","toISOString","reff","useRef","vermarkungOptions","label","React","createElement","Dialog","justifyContent","maxWidth","border","borderRadius","boxShadow","marginRight","id","placeholder","marginLeft","FormControl","component","RadioGroup","row","FormControlLabel","control","Radio","InputLabelProps","width","InputLabel","Select","labelId","handleChange","map","option","MenuItem","key","el","current","type","accept","photoFile","files","handlePhotoChange","reader","FileReader","onload","async","base64Photo","image","Image","src","total","_vermarkungOptions$fi","vermarkungLabel","find","newSubmission","data","console","canvas","document","ctx","getContext","height","drawImage","_vermarkungOptions$fi2","compressedPhotoBlob","toBlob","compressedPhoto","imageCompression","maxSizeMB","maxWidthOrHeight","useWebWorker","log","Blob","concat","size","readAsDataURL","zip","JSZip","csvContent","entry","gvpInMeters","toLocaleString","minimumFractionDigits","join","file","forEach","index","date","replace","filename","photoBlob","generateAsync","then","content","url","window","URL","createObjectURL","link","href","download","setTimeout","click","todaySubmissions","filter","cur_date","Snackbar","autoHideDuration","handleSuccessClose","reason","SnackbarContent","message","handleErrorClose","header","primary","common","white","background","paper","input","CSVimport","_ref","setShowTable","setImportData","setColNames","formOpen","setFormOpen","fileSelected","setFileSelected","invalidFileType","setInvalidFileType","Paper","elevation","htmlFor","Input","endsWith","handleCSVFile","Papa","parse","complete","split","at","length","Object","keys","dataRows","columnsToInclude","filteredDataRows","idx","filteredRow","Streckennummer","col","encoding","CloudUpload","OpenInBrowser","handleClickOpen","MainForm","formData","setFormData","Met","state","Mastnummer","kmValue","meterValue","Seite","handleInputChange","catch","Fragment","aria-labelledby","MainFormDialogContainer","selectedRowData","setOpen","setSelectedValue","IconButton","aria-label","table","minWidth","tableHead","editButton","secondary","TableWrapper","importData","colNames","TableContainer","Table","TableHead","TableRow","TableCell","align","TableBody","root","flexWrap","App","showDownloadButton","setShowDownloadButton","showTable","now","nextMidnight","setHours","interval","intervalId","setInterval","clear","clearIndexedDB","clearInterval","classnames","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","StrictMode","getElementById","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.fe2ca0a4.chunk.js","sourcesContent":["const dbName = \"AußendienstDB\";\r\nconst storeName = \"submissions\";\r\n\r\nexport function openDatabase() {\r\n  return new Promise((resolve, reject) => {\r\n    const request = indexedDB.open(dbName, 1);\r\n\r\n    request.onupgradeneeded = (event) => {\r\n      const db = event.target.result;\r\n      db.createObjectStore(storeName, { keyPath: \"id\", autoIncrement: true });\r\n    };\r\n\r\n    request.onsuccess = (event) => {\r\n      const db = event.target.result;\r\n      resolve(db);\r\n    };\r\n\r\n    request.onerror = (event) => {\r\n      reject(event.target.error);\r\n    };\r\n  });\r\n}\r\n\r\nexport function addSubmission(db, submission) {\r\n  return new Promise((resolve, reject) => {\r\n    const transaction = db.transaction([storeName], \"readwrite\");\r\n    const store = transaction.objectStore(storeName);\r\n    const request = store.add(submission);\r\n\r\n    request.onsuccess = () => {\r\n      resolve();\r\n    };\r\n\r\n    request.onerror = () => {\r\n      reject(request.error);\r\n    };\r\n  });\r\n}\r\n\r\nexport function getAllSubmissions(db) {\r\n  return new Promise((resolve, reject) => {\r\n    const transaction = db.transaction([storeName], \"readonly\");\r\n    const store = transaction.objectStore(storeName);\r\n    const request = store.getAll();\r\n\r\n    request.onsuccess = () => {\r\n      resolve(request.result);\r\n    };\r\n\r\n    request.onerror = () => {\r\n      reject(request.error);\r\n    };\r\n  });\r\n}\r\n","import { TextField, Typography, makeStyles } from \"@material-ui/core\";\r\nimport React from \"react\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  title: {\r\n    fontWeight: \"bold\",\r\n    fontSize: \"1.2rem\",\r\n    marginBottom: \"5px\",\r\n  },\r\n}));\r\n\r\nconst Attribute = ({ value, setValue, name, disabled }) => {\r\n  const classes = useStyles();\r\n\r\n  const handleInputChange = (e) => {\r\n    let newValue = e.target.value;\r\n\r\n    // If the attribute is \"Streckennummer\", ensure it is a positive integer\r\n    if (name === \"Streckennummer\") {\r\n      newValue = Math.max(0, parseInt(newValue, 10)).toString().slice(0, 4);\r\n    }\r\n\r\n    // Update the state in the parent component\r\n    setValue(newValue);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Typography variant=\"h5\" className={classes.title}>\r\n        {name}\r\n      </Typography>\r\n      <TextField\r\n        required\r\n        disabled={disabled}\r\n        fullWidth\r\n        name={name}\r\n        value={value}\r\n        onChange={handleInputChange}\r\n        margin=\"normal\"\r\n        inputProps={{ style: { textAlign: \"center\" } }}\r\n      />\r\n      <br />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Attribute;\r\n","import { Box, Button } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport SendIcon from \"@material-ui/icons/Send\";\nimport CloudDownloadIcon from \"@material-ui/icons/CloudDownload\";\nimport React from \"react\";\n\nconst useStyles = makeStyles((theme) => ({\n  button: {\n    margin: theme.spacing(1),\n    padding: \"10px 20px\",\n    fontSize: \"1rem\",\n    textTransform: \"none\",\n  },\n  buttonsContainer: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n  buttonContainer: {\n    textAlign: \"center\",\n    marginTop: theme.spacing(2),\n  },\n}));\n\nconst Buttons = ({\n  handleSubmit,\n  downloadCombinedTodayData,\n  downloadCombinedData,\n}) => {\n  const classes = useStyles();\n\n  return (\n    <Box className={classes.buttonContainer}>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        className={classes.button}\n        endIcon={<SendIcon />}\n        onClick={handleSubmit}\n      >\n        Abspeichern\n      </Button>\n      <br />\n      <br />\n      <Box className={classes.buttonsContainer}>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          className={classes.button}\n          startIcon={<CloudDownloadIcon />}\n          onClick={() => downloadCombinedTodayData()}\n        >\n          Daten von heute herunterladen\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          className={classes.button}\n          startIcon={<CloudDownloadIcon />}\n          onClick={() => downloadCombinedData()}\n        >\n          Alle Daten herunterladen\n        </Button>\n      </Box>\n    </Box>\n  );\n};\n\nexport default Buttons;\n","import {\n  Box,\n  FormControl,\n  FormControlLabel,\n  Radio,\n  RadioGroup,\n  Snackbar,\n  SnackbarContent,\n  Typography,\n  makeStyles,\n  Dialog,\n} from \"@material-ui/core\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Attribute from \"./Attribute\";\nimport React, { useEffect, useState, useRef } from \"react\";\nimport Buttons from \"./Buttons\";\nimport { openDatabase, addSubmission, getAllSubmissions } from \"../db\";\nimport JSZip from \"jszip\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Select from \"@material-ui/core/Select\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport imageCompression from \"browser-image-compression\";\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    fontWeight: \"bold\",\n    fontSize: \"1.2rem\", // Adjust the font size\n    marginBottom: \"5px\", // Add some spacing below titles\n    textAlign: \"center\",\n  },\n  textField: {\n    marginBottom: \"1px\", // Add margin to text fields\n  },\n  successSnackbar: {\n    backgroundColor: theme.palette.success.main,\n    color: theme.palette.success.contrastText,\n  },\n  errorSnackbar: {\n    backgroundColor: theme.palette.error.main,\n    color: theme.palette.error.contrastText,\n  },\n}));\n\nexport const SimpleDialog = (props, ref) => {\n  const classes = useStyles();\n  // Separate state for each attribute\n  const [streckennummer, setStreckennummer] = useState(\"\");\n  const [km, setKm] = useState(\"\");\n  const [met, setMet] = useState(\"\");\n  const [seite, setSeite] = useState(false);\n  const [sonstiges, setSonstiges] = useState(\"\");\n  const [mastnummer, setMastnummer] = useState(\"\");\n  const [selectedVermarkungstrager, setselectedVermarkungstrager] =\n    useState(null);\n  const [sonstiges2, setSonstiges2] = useState(\"\");\n  const [gvp, setGVP] = useState(\"\");\n  const [photo, setPhoto] = useState(null);\n  const { onClose, selectedValue, open } = props;\n  const [successMessage, setSuccessMessage] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [submissions, setSubmissions] = useState([]); // Store all submissions\n  const [successOpen, setSuccessOpen] = useState(false);\n  const [currentDate, setCurrentDate] = useState(\"\");\n  //const webcamRef = useRef(null);\n\n  useEffect(() => {\n    setCurrentDate(new Date().toISOString().slice(0, 10));\n  }, [currentDate, setCurrentDate]);\n\n  /*  const capture = () => {\n    const imageSrc = webcamRef.current.getScreenshot();\n    setPhoto(imageSrc);\n  };\n */\n  /* const videoConstraints = {\n    width: 440,\n    height: 280,\n    facingMode: { exact: \"environment\" },\n  }; */\n\n  const handlePhotoChange = (e) => {\n    const photoFile = e.target.files[0];\n    setPhoto(photoFile);\n  };\n\n  const resetForm = () => {\n    setStreckennummer(\"\");\n    setKm(\"\");\n    setMet(\"\");\n    setSeite(false);\n    setSonstiges(\"\");\n    setMastnummer(\"\");\n    setselectedVermarkungstrager(null);\n    setGVP(\"\");\n    setSonstiges2(\"\");\n    setPhoto(null);\n    setCurrentDate(new Date().toISOString().slice(0, 10));\n  };\n\n  const reff = useRef(null);\n\n  const handleErrorClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setErrorMessage(\"\");\n  };\n\n  const handleSuccessClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setSuccessMessage(\"\");\n    setSuccessOpen(false);\n  };\n\n  const vermarkungOptions = [\n    { value: 10, label: \"Keiner\" },\n    { value: 20, label: \"Laterne\" },\n    { value: 30, label: \"Wand\" },\n    { value: 40, label: \"Fundament\" },\n    { value: 50, label: \"Lärmschutzwand\" },\n    { value: 60, label: \"Widerlager\" },\n    { value: 70, label: \"Sonstiges\" },\n  ];\n\n  const handleChange = (event) => {\n    setselectedVermarkungstrager(event.target.value);\n    if (event.target.value) {\n      setMastnummer(\"\"); // Reset Mastnummer when Vermarkungstrager is selected\n    }\n  };\n\n  const handleSubmit = () => {\n    // Check if a photo is selected\n    if (!photo) {\n      setErrorMessage(\"Bitte wählen Sie ein Foto aus, bevor Sie fortfahren.\");\n      setSuccessMessage(\"\"); // Clear any existing success message\n      return;\n    }\n\n    // Reset the form after a successful submission\n    resetForm();\n\n    const reader = new FileReader();\n\n    reader.onload = async (event) => {\n      const base64Photo = event.target.result;\n      const maxSizeInBytes = 0.5 * 1024 * 1024; // 0.5 MB\n      let quality = 1;\n\n      const image = new Image();\n      image.src = base64Photo;\n\n      image.onload = async () => {\n        // Check if the photo size is smaller than or equal to 0.5 MB\n        if (event.total <= maxSizeInBytes) {\n          // Do nothing, the photo is already within the size limit\n          const vermarkungLabel = selectedVermarkungstrager\n            ? vermarkungOptions.find(\n                (option) => option.value === selectedVermarkungstrager\n              )?.label\n            : \"\";\n\n          // Append new submission to the array\n          const newSubmission = {\n            streckennummer: streckennummer,\n            km: km,\n            met: met,\n            seite: seite,\n            sonstiges: sonstiges,\n            mastnummer: mastnummer,\n            selectedVermarkungstrager: vermarkungLabel,\n            sonstiges2: sonstiges2,\n            gvp: gvp,\n            currentDate: currentDate,\n            photo: base64Photo,\n          };\n\n          // Save the new submission to IndexedDB\n          try {\n            const db = await openDatabase();\n            await addSubmission(db, newSubmission);\n            const data = await getAllSubmissions(db);\n            setSubmissions(data);\n            setSuccessMessage(\"Erfolgreich hinzugefügt\");\n            setSuccessOpen(true);\n          } catch (error) {\n            console.error(\"Error adding or fetching submission: \", error);\n          }\n        } else {\n          const canvas = document.createElement(\"canvas\");\n          const ctx = canvas.getContext(\"2d\");\n\n          canvas.width = image.width;\n          canvas.height = image.height;\n\n          ctx.drawImage(image, 0, 0, image.width, image.height);\n\n          try {\n            const compressedPhotoBlob = await new Promise((resolve) => {\n              canvas.toBlob(resolve, \"image/jpeg\", quality);\n            });\n\n            const compressedPhoto = await imageCompression(\n              compressedPhotoBlob,\n              {\n                maxSizeMB: 0.5,\n                maxWidthOrHeight: 1920,\n                useWebWorker: true,\n              }\n            );\n            console.log(\n              \"compressedFile instanceof Blob\",\n              compressedPhoto instanceof Blob\n            ); // true\n            console.log(\n              `compressedFile size ${compressedPhoto.size / 1024 / 1024} MB`\n            ); // smaller than maxSizeMB\n\n            const vermarkungLabel = selectedVermarkungstrager\n              ? vermarkungOptions.find(\n                  (option) => option.value === selectedVermarkungstrager\n                )?.label\n              : \"\";\n\n            const newSubmission = {\n              streckennummer: streckennummer,\n              km: km,\n              met: met,\n              seite: seite,\n              sonstiges: sonstiges,\n              mastnummer: mastnummer,\n              selectedVermarkungstrager: vermarkungLabel,\n              sonstiges2: sonstiges2,\n              gvp: gvp,\n              currentDate: currentDate,\n              photo: compressedPhoto,\n            };\n\n            // Save the new submission to IndexedDB\n            try {\n              const db = await openDatabase();\n              await addSubmission(db, newSubmission);\n              const data = await getAllSubmissions(db);\n              setSubmissions(data);\n              setSuccessMessage(\"Erfolgreich hinzugefügt\");\n              setSuccessOpen(true);\n            } catch (error) {\n              console.error(\"Error adding or fetching submission: \", error);\n            }\n          } catch (error) {\n            /* else {\n              console.error(\"Compressed photo size is still too large.\");\n              setErrorMessage(\n                \"Die komprimierte Foto-Größe ist immer noch zu groß, um eine vernünftige Qualität beizubehalten. Bitte wählen Sie eine kleinere Dateigröße oder optimieren Sie das Bild, bevor Sie es hochladen.\"\n              );\n              setSuccessMessage(\"\"); // Clear any existing success message\n            } */\n            console.error(\"Error compressing photo: \", error);\n          }\n        }\n      };\n    };\n\n    // Read the photo data as a data URL\n    reader.readAsDataURL(photo);\n    reff.current.value = \"\";\n  };\n\n  const downloadCombinedTodayData = () => {\n    const zip = new JSZip();\n    const todaySubmissions = submissions.filter(\n      (entry) => entry.currentDate === currentDate\n    );\n\n    // Add the CSV data to the ZIP file\n    const csvContent =\n      \"Streckennummer;Kilometrierung; Seite; Sonstiges; Mastnummer; Vermarkung; Sonstiges Vermarkung; GVP Länge (m); Datum\\n\" +\n      todaySubmissions\n        .map((entry) => {\n          const gvpInMeters = (entry.gvp / 1000).toLocaleString(\"de-DE\", {\n            minimumFractionDigits: 2,\n          });\n          return `${entry.streckennummer};${entry.km},${entry.met};${entry.seite};${entry.sonstiges};${entry.mastnummer};${entry.selectedVermarkungstrager};${entry.sonstiges2};${gvpInMeters};${currentDate}`;\n        })\n        .join(\"\\n\");\n\n    zip.file(`${currentDate}.csv`, csvContent);\n\n    // Add the image files to the ZIP file\n    todaySubmissions.forEach((el, index) => {\n      const date = el.currentDate.replace(/-/g, \"\");\n      let filename;\n\n      if (el.mastnummer) {\n        filename = `${el.streckennummer}_${el.km},${el.met}_${el.seite}_${el.mastnummer}_${date}.jpg`;\n      } else if (\n        el.selectedVermarkungstrager &&\n        el.selectedVermarkungstrager !== \"Sonstiges\"\n      ) {\n        filename = `${el.streckennummer}_${el.km},${el.met}_${el.seite}_${el.selectedVermarkungstrager}_${date}.jpg`;\n      } else if (el.sonstiges2) {\n        filename = `${el.streckennummer}_${el.km},${el.met}_${el.seite}_${el.sonstiges2}_${date}.jpg`;\n      } else {\n        // Handle the case when none of the conditions are met\n        console.error(\"Invalid submission data\");\n        return;\n      }\n      const photoBlob = el.photo;\n      //const base64Data = el.photo.split(\",\")[1];\n      zip.file(filename, photoBlob);\n    });\n\n    // Create and trigger a download link for the ZIP file\n    zip.generateAsync({ type: \"blob\" }).then((content) => {\n      const cur_date = new Date().toISOString().slice(0, 10);\n      const url = window.URL.createObjectURL(content);\n      const link = document.createElement(\"a\");\n      link.href = url;\n      link.download = `${cur_date}.zip`;\n      setTimeout(() => {\n        link.click();\n      }, 100);\n    });\n  };\n\n  const downloadCombinedData = () => {\n    const zip = new JSZip();\n    // Add the CSV data to the ZIP file\n    const csvContent =\n      \"Streckennummer;Kilometrierung; Seite; Sonstiges; Mastnummer; Vermarkung; Sonstiges Vermarkung; GVP Länge (m); Datum\\n\" +\n      submissions\n        .map((entry) => {\n          const gvpInMeters = (entry.gvp / 1000).toLocaleString(\"de-DE\", {\n            minimumFractionDigits: 2,\n          });\n          return `${entry.streckennummer};${entry.km},${entry.met};${entry.seite};${entry.sonstiges};${entry.mastnummer};${entry.selectedVermarkungstrager};${entry.sonstiges2};${gvpInMeters};${entry.currentDate}`;\n        })\n        .join(\"\\n\");\n\n    zip.file(\"alle_daten.csv\", csvContent);\n\n    // Add the image files to the ZIP file\n    submissions.forEach((el, index) => {\n      const date = el.currentDate.replace(/-/g, \"\");\n      let filename;\n\n      if (el.mastnummer) {\n        filename = `${el.streckennummer}_${el.km},${el.met}_${el.seite}_${el.mastnummer}_${date}.jpg`;\n      } else if (\n        el.selectedVermarkungstrager &&\n        el.selectedVermarkungstrager !== \"Sonstiges\"\n      ) {\n        filename = `${el.streckennummer}_${el.km},${el.met}_${el.seite}_${el.selectedVermarkungstrager}_${date}.jpg`;\n      } else if (el.sonstiges2) {\n        filename = `${el.streckennummer}_${el.km},${el.met}_${el.seite}_${el.sonstiges2}_${date}.jpg`;\n      } else {\n        // Handle the case when none of the conditions are met\n        console.error(\"Invalid submission data\");\n        return;\n      }\n      //const base64Data = el.photo.split(\",\")[1];\n      const photoBlob = el.photo;\n      zip.file(filename, photoBlob);\n    });\n\n    // Create and trigger a download link for the ZIP file\n    zip.generateAsync({ type: \"blob\" }).then((content) => {\n      const url = window.URL.createObjectURL(content);\n      const link = document.createElement(\"a\");\n      link.href = url;\n      link.download = \"combined_data.zip\";\n      setTimeout(() => {\n        link.click();\n      }, 100);\n    });\n  };\n\n  return (\n    <Dialog open={props.open} onClose={props.onClose}>\n      <Box\n        display=\"flex\"\n        flexDirection=\"column\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        maxWidth=\"400px\"\n        margin=\"0 auto\"\n        padding=\"20px\"\n        marginTop=\"10px\"\n        border=\"1px solid #ccc\"\n        borderRadius=\"8px\"\n        boxShadow=\"0 0 5px rgba(0, 0, 0, 0.2)\"\n      >\n        <Attribute\n          name=\"Streckennummer\"\n          value={streckennummer}\n          setValue={setStreckennummer}\n        />\n        <Typography variant=\"h6\" className={classes.title}>\n          Kilometrierung\n        </Typography>\n        <Box display=\"flex\" flexDirection=\"row\" alignItems=\"center\">\n          <TextField\n            required\n            value={km}\n            style={{ marginRight: \"5px\" }}\n            id=\"km\"\n            name=\"km\"\n            placeholder=\"z.B. 145\"\n            onChange={(e) => setKm(e.target.value)}\n            inputProps={{ style: { textAlign: \"center\" } }}\n          />\n          <Typography>, </Typography>\n          <TextField\n            required\n            value={met}\n            style={{ marginLeft: \"5px\" }}\n            id=\"met\"\n            name=\"met\"\n            placeholder=\"02\"\n            onChange={(e) => setMet(e.target.value)}\n            inputProps={{ style: { textAlign: \"center\" } }}\n          />\n        </Box>\n        <br></br>\n        <Typography variant=\"h6\" className={classes.title}>\n          Seite\n        </Typography>\n\n        <Box display=\"flex\" flexDirection=\"row\" alignItems=\"center\">\n          <FormControl component=\"fieldset\">\n            <RadioGroup\n              row\n              required\n              id=\"seite\"\n              name=\"seite\"\n              value={seite}\n              onChange={(e) => setSeite(e.target.value)}\n            >\n              <FormControlLabel value=\"L\" control={<Radio />} label=\"L\" />\n              <FormControlLabel value=\"R\" control={<Radio />} label=\"R\" />\n            </RadioGroup>\n          </FormControl>\n\n          <TextField\n            fullWidth\n            value={sonstiges}\n            onChange={(e) => setSonstiges(e.target.value)}\n            label=\"Sonstiges\"\n            id=\"sonstiges\"\n            name=\"sonstiges\"\n            InputLabelProps={{\n              style: { textAlign: \"center\", width: \"100%\", marginLeft: \"0\" },\n            }}\n            inputProps={{ style: { textAlign: \"center\" } }}\n          />\n        </Box>\n        <br></br>\n        <Attribute\n          name=\"Mastnummer\"\n          value={mastnummer}\n          setValue={setMastnummer}\n          disabled={\n            selectedVermarkungstrager !== null &&\n            selectedVermarkungstrager !== 10\n          }\n        />\n        <Typography variant=\"h6\" className={classes.title}>\n          Wenn keine Mastnummer vorhanden ist, dann Vermarkungsträger auswählen:\n        </Typography>\n        <FormControl fullWidth>\n          <InputLabel id=\"demo-simple-select-label\">\n            Vermarkungsträger\n          </InputLabel>\n          <Select\n            labelId=\"vermarkungstraeger\"\n            id=\"vermarkungstraeger\"\n            value={selectedVermarkungstrager}\n            label=\"Vermarkung\"\n            onChange={(event) => handleChange(event)}\n            disabled={!!mastnummer}\n          >\n            {vermarkungOptions.map((option) => (\n              <MenuItem key={option.value} value={option.value}>\n                {option.label}\n              </MenuItem>\n            ))}\n          </Select>\n        </FormControl>\n        <Attribute\n          name=\"Sonstiges\"\n          value={sonstiges2}\n          setValue={setSonstiges2}\n          disabled={selectedVermarkungstrager !== 70}\n        />\n        <br></br>\n        <Attribute name=\"GVP Länge, mm\" value={gvp} setValue={setGVP} />\n        <br></br>\n        <Typography variant=\"h6\" className={classes.title}>\n          Datum\n        </Typography>\n        <br></br>\n        <TextField\n          required\n          fullWidth\n          name=\"currentDate\"\n          placeholder=\"z.B. 2023-10-20\"\n          value={currentDate}\n          onChange={(e) => {\n            setCurrentDate(e.target.value);\n          }}\n          margin=\"normal\"\n          inputProps={{ style: { textAlign: \"center\" } }}\n        />\n        <br></br>\n        <Typography variant=\"h6\" className={classes.title}>\n          Foto hochladen\n        </Typography>\n        {/* <Webcam\n          audio={false}\n          videoConstraints={videoConstraints}\n          ref={webcamRef}\n        /> */}\n        {/* <button onClick={capture}>Foto aufnehmen</button>\n        {photo && <img src={photo} alt=\"Captured\" />} */}\n        <input\n          ref={(el) => (reff.current = el)}\n          required\n          type=\"file\"\n          name=\"photo\"\n          accept=\"image/*;capture=camera\"\n          onChange={(e) => handlePhotoChange(e)}\n        />\n      </Box>\n      <Buttons\n        handleSubmit={handleSubmit}\n        downloadCombinedData={downloadCombinedData}\n        downloadCombinedTodayData={downloadCombinedTodayData}\n      />\n      <Snackbar\n        open={!!successMessage}\n        autoHideDuration={7000}\n        onClose={handleSuccessClose}\n      >\n        <SnackbarContent\n          message={successMessage}\n          className={classes.successSnackbar}\n        />\n      </Snackbar>\n\n      <Snackbar\n        open={!!errorMessage}\n        autoHideDuration={12000}\n        onClose={handleErrorClose}\n      >\n        <SnackbarContent\n          message={errorMessage}\n          className={classes.errorSnackbar}\n        />\n      </Snackbar>\n    </Dialog>\n  );\n};\n\nexport default SimpleDialog;\n","import React, { useState } from \"react\";\r\nimport Papa from \"papaparse\";\r\nimport { Box, Button, Input, Typography, Paper } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { CloudUpload, OpenInBrowser } from \"@material-ui/icons\";\r\nimport { SimpleDialog } from \"./Formular\";\r\n\r\nconst handleCSVFile = (file, setImportData, setColNames) => {\r\n  Papa.parse(file, {\r\n    complete: (result) => {\r\n      const name = file.name ? file.name.split(\".\").at(0) : \"\";\r\n\r\n      // Check if there are data rows in the result\r\n      if (result.data && result.data.length > 0) {\r\n        const headerRow = Object.keys(result.data[0]);\r\n\r\n        // Exclude the last row if it is empty\r\n        const dataRows = result.data.slice(0, -1);\r\n\r\n        // Define the columns you want to include\r\n        const columnsToInclude = [\"PktNr\", \"Km-Station Ist\"];\r\n\r\n        // Filter out only the columns you are interested in\r\n        const filteredDataRows = dataRows.map((el, idx) => {\r\n          const filteredRow = {\r\n            id: idx,\r\n            Streckennummer: name,\r\n            \"GVP Länge\": \"\",\r\n          };\r\n\r\n          columnsToInclude.forEach((col) => {\r\n            filteredRow[col] = el[col];\r\n          });\r\n\r\n          return filteredRow;\r\n        });\r\n\r\n        setImportData(filteredDataRows);\r\n\r\n        // Set the column names\r\n        setColNames([...columnsToInclude, \"Streckennummer\", \"GVP Länge\"]);\r\n      } else {\r\n        console.error(\"CSV file is empty or missing data.\");\r\n        // Handle the case when the CSV file is empty or missing data\r\n      }\r\n    },\r\n    header: true,\r\n    encoding: \"ISO-8859-1\",\r\n  });\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  header: {\r\n    padding: theme.spacing(2),\r\n    backgroundColor: theme.palette.primary.main,\r\n    color: theme.palette.common.white,\r\n  },\r\n  content: {\r\n    padding: theme.spacing(3),\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  buttonContainer: {\r\n    marginTop: theme.spacing(2),\r\n    textAlign: \"center\", // Center-align the buttons\r\n  },\r\n  button: {\r\n    display: \"block\",\r\n    margin: \"10px auto\",\r\n    padding: \"10px 20px\",\r\n    fontSize: \"1rem\",\r\n    textTransform: \"none\",\r\n    backgroundColor: \"#6a8dbb\",\r\n    color: theme.palette.common.white,\r\n    \"&:hover\": {\r\n      backgroundColor: \"#3c5a7d\",\r\n    },\r\n  },\r\n  input: {\r\n    display: \"none\",\r\n  },\r\n}));\r\n\r\nconst CSVimport = ({ setShowTable, setImportData, setColNames }) => {\r\n  const classes = useStyles();\r\n  const [formOpen, setFormOpen] = useState(false);\r\n  const [fileSelected, setFileSelected] = useState(false);\r\n  const [invalidFileType, setInvalidFileType] = useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setFormOpen(true);\r\n  };\r\n\r\n  const handleClose = (value) => {\r\n    setFormOpen(false);\r\n  };\r\n\r\n  const handleFileChange = (event) => {\r\n    const file = event.target.files[0];\r\n\r\n    // Check if a file is selected\r\n    if (file) {\r\n      // Check if the selected file is a CSV file\r\n      if (file.type === \"text/csv\" || file.name.endsWith(\".csv\")) {\r\n        handleCSVFile(file, setImportData, setColNames);\r\n        setShowTable(true);\r\n        setFileSelected(true);\r\n        setInvalidFileType(false); // Reset the invalid file type state\r\n      } else {\r\n        // Set the state to indicate an invalid file type\r\n        setInvalidFileType(true);\r\n        setFileSelected(false);\r\n      }\r\n    } else {\r\n      setFileSelected(false);\r\n      setInvalidFileType(false); // Reset the invalid file type state\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box>\r\n      <Paper className={classes.header} elevation={3}>\r\n        <Typography variant=\"h4\">GV-Targeterfassung</Typography>\r\n      </Paper>\r\n      <Paper className={classes.content} elevation={3}>\r\n        <Box className={classes.buttonContainer}>\r\n          <label htmlFor=\"csv-input\">\r\n            <Input\r\n              accept=\".csv\"\r\n              className={classes.input}\r\n              id=\"csv-input\"\r\n              type=\"file\"\r\n              onChange={handleFileChange}\r\n            />\r\n            <Button\r\n              variant=\"contained\"\r\n              startIcon={<CloudUpload />}\r\n              color=\"secondary\"\r\n              className={classes.button}\r\n              component=\"span\"\r\n            >\r\n              Koordinatendatei hochladen\r\n            </Button>\r\n          </label>\r\n          {invalidFileType && (\r\n            <Typography variant=\"body2\" color=\"error\">\r\n              Wählen Sie eine CSV Datei\r\n            </Typography>\r\n          )}\r\n        </Box>\r\n        <Box>\r\n          <Button\r\n            variant=\"contained\"\r\n            startIcon={<OpenInBrowser />}\r\n            color=\"secondary\"\r\n            className={classes.button}\r\n            component=\"span\"\r\n            onClick={handleClickOpen}\r\n          >\r\n            Formular öffnen\r\n          </Button>\r\n          <SimpleDialog\r\n            selectedValue={\"\"}\r\n            open={formOpen}\r\n            onClose={handleClose}\r\n          />\r\n        </Box>\r\n      </Paper>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default CSVimport;\r\n","import {\n  Box,\n  FormControl,\n  FormControlLabel,\n  Radio,\n  RadioGroup,\n  Snackbar,\n  SnackbarContent,\n  Typography,\n  makeStyles, // Import makeStyles\n} from \"@material-ui/core\";\nimport TextField from \"@material-ui/core/TextField\";\nimport React, { useEffect, useState, useRef } from \"react\";\nimport Buttons from \"./Buttons\";\nimport JSZip from \"jszip\";\nimport { openDatabase, addSubmission, getAllSubmissions } from \"../db\";\nimport Attribute from \"./Attribute\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Select from \"@material-ui/core/Select\";\nimport Webcam from \"react-webcam\";\nimport imageCompression from \"browser-image-compression\";\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    fontWeight: \"bold\",\n    fontSize: \"1.2rem\", // Adjust the font size\n    marginBottom: \"5px\", // Add some spacing below titles\n  },\n  textField: {\n    marginBottom: \"1px\", // Add margin to text fields\n  },\n  successSnackbar: {\n    backgroundColor: theme.palette.success.main,\n    color: theme.palette.success.contrastText,\n  },\n  errorSnackbar: {\n    backgroundColor: theme.palette.error.main,\n    color: theme.palette.error.contrastText,\n  },\n}));\n\nconst MainForm = ({ reff, row, setImportData }) => {\n  const [formData, setFormData] = useState({\n    seite: false,\n    sonstiges: \"\",\n    gvp: \"\",\n    photo: null,\n  });\n\n  const [streckennummer, setStreckennummer] = useState(\n    row.Streckennummer ? row.Streckennummer : \"\"\n  );\n  const [km, setKm] = useState(\n    row[\"Km-Station Ist\"] ? row[\"Km-Station Ist\"] : \"\"\n  );\n  const [met, setMet] = useState(row.Met ? row.Met : \"\");\n  const [seite, setSeite] = useState(\"\");\n  const [sonstiges, setSonstiges] = useState(\"\");\n  const [mastnummer, setMastnummer] = useState(\"\");\n  const [selectedVermarkungstrager, setselectedVermarkungstrager] =\n    useState(null);\n  const [sonstiges2, setSonstiges2] = useState(\"\");\n  const [gvp, setGVP] = useState(\"\");\n  const [photo, setPhoto] = useState(\"\");\n  const [successMessage, setSuccessMessage] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [submissions, setSubmissions] = useState([]); // Store all submissions\n  //const webcamRef = useRef(null);\n\n  useEffect(() => {\n    setImportData((state) =>\n      state.map((el) => {\n        if (el.id === row.id) {\n          return {\n            ...el,\n            \"GVP Länge\": gvp,\n          };\n        }\n        if (el.id === row.id) {\n          return {\n            ...el,\n            Mastnummer: mastnummer,\n          };\n        }\n        return el;\n      })\n    );\n  }, [gvp, mastnummer, row.id, setImportData]);\n\n  //const capture = () => {\n  //  const imageSrc = webcamRef.current.getScreenshot();\n  //  setPhoto(imageSrc);\n  //};\n\n  //const videoConstraints = {\n  //  width: 440,\n  //  height: 280,\n  //  facingMode: { exact: \"environment\" },\n  //};\n\n  // State for displaying the success and error message\n  const [successOpen, setSuccessOpen] = useState(false);\n  const [currentDate, setCurrentDate] = useState(\"\");\n\n  useEffect(() => {\n    setCurrentDate(new Date().toISOString().slice(0, 10));\n    if (row) {\n      if (row[\"Km-Station Ist\"]) {\n        const [kmValue, meterValue] = row[\"Km-Station Ist\"].split(\",\");\n        setKm(kmValue);\n        setMet(meterValue);\n      }\n      if (row.Seite) {\n        setSeite(row.Seite);\n      }\n    }\n  }, [row, setCurrentDate]);\n\n  const classes = useStyles(); // Initialize the useStyles\n\n  const vermarkungOptions = [\n    { value: 10, label: \"Keiner\" },\n    { value: 20, label: \"Laterne\" },\n    { value: 30, label: \"Wand\" },\n    { value: 40, label: \"Fundament\" },\n    { value: 50, label: \"Lärmschutzwand\" },\n    { value: 60, label: \"Widerlager\" },\n    { value: 70, label: \"Sonstiges\" },\n  ];\n\n  const handleChange = (event) => {\n    setselectedVermarkungstrager(event.target.value);\n    if (event.target.value) {\n      setMastnummer(\"\"); // Reset Mastnummer when Vermarkungstrager is selected\n    }\n  };\n\n  const handleSubmit = () => {\n    // Check if a photo is selected\n    if (!photo) {\n      setErrorMessage(\"Bitte wählen Sie ein Foto aus, bevor Sie fortfahren.\");\n      setSuccessMessage(\"\"); // Clear any existing success message\n      return;\n    }\n\n    const reader = new FileReader();\n\n    reader.onload = async (event) => {\n      const base64Photo = event.target.result;\n      const maxSizeInBytes = 0.5 * 1024 * 1024; // 0.5 MB\n      let quality = 1;\n\n      // Create an Image object and set its source to the base64 representation of the photo\n      const image = new Image();\n      image.src = base64Photo;\n\n      image.onload = async () => {\n        // Check if the photo size is smaller than or equal to 0.5 MB\n        if (event.total <= maxSizeInBytes) {\n          // Do nothing, the photo is already within the size limit\n          const vermarkungLabel = selectedVermarkungstrager\n            ? vermarkungOptions.find(\n                (option) => option.value === selectedVermarkungstrager\n              )?.label\n            : \"\";\n\n          const newSubmission = {\n            streckennummer: streckennummer,\n            km: km,\n            met: met,\n            seite: seite,\n            sonstiges: sonstiges,\n            mastnummer: mastnummer,\n            selectedVermarkungstrager: vermarkungLabel,\n            sonstiges2: sonstiges2,\n            gvp: gvp,\n            currentDate: currentDate,\n            photo: base64Photo,\n          };\n\n          // Save the new submission to IndexedDB\n          try {\n            const db = await openDatabase();\n            await addSubmission(db, newSubmission);\n            const data = await getAllSubmissions(db);\n            setSubmissions(data);\n            setSuccessMessage(\"Erfolgreich hinzugefügt\");\n            setSuccessOpen(true);\n          } catch (error) {\n            console.error(\"Error adding or fetching submission: \", error);\n          }\n        } else {\n          const canvas = document.createElement(\"canvas\");\n          const ctx = canvas.getContext(\"2d\");\n\n          canvas.width = image.width;\n          canvas.height = image.height;\n\n          ctx.drawImage(image, 0, 0, image.width, image.height);\n\n          try {\n            const compressedPhotoBlob = await new Promise((resolve) => {\n              canvas.toBlob(resolve, \"image/jpeg\", quality);\n            });\n\n            const compressedPhoto = await imageCompression(\n              compressedPhotoBlob,\n              {\n                maxSizeMB: 0.5,\n                maxWidthOrHeight: 1920,\n                useWebWorker: true,\n              }\n            );\n            console.log(\n              \"compressedFile instanceof Blob\",\n              compressedPhoto instanceof Blob\n            ); // true\n            console.log(\n              `compressedFile size ${compressedPhoto.size / 1024 / 1024} MB`\n            ); // smaller than maxSizeMB\n\n            const vermarkungLabel = selectedVermarkungstrager\n              ? vermarkungOptions.find(\n                  (option) => option.value === selectedVermarkungstrager\n                )?.label\n              : \"\";\n\n            const newSubmission = {\n              streckennummer: streckennummer,\n              km: km,\n              met: met,\n              seite: seite,\n              sonstiges: sonstiges,\n              mastnummer: mastnummer,\n              selectedVermarkungstrager: vermarkungLabel,\n              sonstiges2: sonstiges2,\n              gvp: gvp,\n              currentDate: currentDate,\n              photo: compressedPhoto,\n            };\n\n            // Save the new submission to IndexedDB\n            try {\n              const db = await openDatabase();\n              await addSubmission(db, newSubmission);\n              const data = await getAllSubmissions(db);\n              setSubmissions(data);\n              setSuccessMessage(\"Erfolgreich hinzugefügt\");\n              setSuccessOpen(true);\n            } catch (error) {\n              console.error(\"Error adding or fetching submission: \", error);\n            }\n          } catch (error) {\n            /* else {\n              console.error(\"Compressed photo size is still too large.\");\n              setErrorMessage(\n                \"Die komprimierte Foto-Größe ist immer noch zu groß, um eine vernünftige Qualität beizubehalten. Bitte wählen Sie eine kleinere Dateigröße oder optimieren Sie das Bild, bevor Sie es hochladen.\"\n              );\n              setSuccessMessage(\"\"); // Clear any existing success message\n            } */\n            console.error(\"Error compressing photo: \", error);\n          }\n        }\n      };\n    };\n\n    // Read the photo data as a data URL\n    reader.readAsDataURL(photo);\n    reff.current.value = \"\";\n  };\n\n  const downloadCombinedTodayData = () => {\n    const zip = new JSZip();\n    const todaySubmissions = submissions.filter(\n      (entry) => entry.currentDate === currentDate\n    );\n\n    // Add the CSV data to the ZIP file\n    const csvContent =\n      \"Streckennummer;Kilometrierung; Seite; Sonstiges; Mastnummer; Vermarkung; Sonstiges Vermarkung; GVP Länge (m); Datum\\n\" +\n      todaySubmissions\n        .map((entry) => {\n          const gvpInMeters = (entry.gvp / 1000).toLocaleString(\"de-DE\", {\n            minimumFractionDigits: 2,\n          });\n          return `${entry.streckennummer};${entry.km},${entry.met};${entry.seite};${entry.sonstiges};${entry.mastnummer};${entry.selectedVermarkungstrager};${entry.sonstiges2};${gvpInMeters};${currentDate}`;\n        })\n        .join(\"\\n\");\n\n    zip.file(`${currentDate}.csv`, csvContent);\n\n    // Add the image files to the ZIP file\n    todaySubmissions.forEach((el, index) => {\n      const date = el.currentDate.replace(/-/g, \"\");\n      let filename;\n\n      if (el.mastnummer) {\n        filename = `${el.streckennummer}_${el.km},${el.met}_${el.seite}_${el.mastnummer}_${date}.jpg`;\n      } else if (\n        el.selectedVermarkungstrager &&\n        el.selectedVermarkungstrager !== \"Sonstiges\"\n      ) {\n        filename = `${el.streckennummer}_${el.km},${el.met}_${el.seite}_${el.selectedVermarkungstrager}_${date}.jpg`;\n      } else if (el.sonstiges2) {\n        filename = `${el.streckennummer}_${el.km},${el.met}_${el.seite}_${el.sonstiges2}_${date}.jpg`;\n      } else {\n        // Handle the case when none of the conditions are met\n        console.error(\"Invalid submission data\");\n        return;\n      }\n      const photoBlob = el.photo;\n      zip.file(filename, photoBlob);\n    });\n\n    // Create and trigger a download link for the ZIP file\n    zip.generateAsync({ type: \"blob\" }).then((content) => {\n      const cur_date = new Date().toISOString().slice(0, 10);\n      const url = window.URL.createObjectURL(content);\n      const link = document.createElement(\"a\");\n      link.href = url;\n      link.download = `${cur_date}.zip`;\n      setTimeout(() => {\n        link.click();\n      }, 100);\n    });\n  };\n\n  const downloadCombinedData = () => {\n    const zip = new JSZip();\n    // Add the CSV data to the ZIP file\n    const csvContent =\n      \"Streckennummer;Kilometrierung; Seite; Sonstiges; Mastnummer; Vermarkung; Sonstiges Vermarkung; GVP Länge (m); Datum\\n\" +\n      submissions\n        .map((entry) => {\n          const gvpInMeters = (entry.gvp / 1000).toLocaleString(\"de-DE\", {\n            minimumFractionDigits: 2,\n          });\n          return `${entry.streckennummer};${entry.km},${entry.met};${entry.seite};${entry.sonstiges};${entry.mastnummer};${entry.selectedVermarkungstrager};${entry.sonstiges2};${gvpInMeters};${entry.currentDate}`;\n        })\n        .join(\"\\n\");\n\n    zip.file(\"alle_daten.csv\", csvContent);\n\n    // Add the image files to the ZIP file\n    submissions.forEach((el, index) => {\n      const date = el.currentDate.replace(/-/g, \"\");\n      let filename;\n\n      if (el.mastnummer) {\n        filename = `${el.streckennummer}_${el.km},${el.met}_${el.seite}_${el.mastnummer}_${date}.jpg`;\n      } else if (\n        el.selectedVermarkungstrager &&\n        el.selectedVermarkungstrager !== \"Sonstiges\"\n      ) {\n        filename = `${el.streckennummer}_${el.km},${el.met}_${el.seite}_${el.selectedVermarkungstrager}_${date}.jpg`;\n      } else if (el.sonstiges2) {\n        filename = `${el.streckennummer}_${el.km},${el.met}_${el.seite}_${el.sonstiges2}_${date}.jpg`;\n      } else {\n        // Handle the case when none of the conditions are met\n        console.error(\"Invalid submission data\");\n        return;\n      }\n      const photoBlob = el.photo;\n      zip.file(filename, photoBlob);\n    });\n\n    // Create and trigger a download link for the ZIP file\n    zip.generateAsync({ type: \"blob\" }).then((content) => {\n      const url = window.URL.createObjectURL(content);\n      const link = document.createElement(\"a\");\n      link.href = url;\n      link.download = \"combined_data.zip\";\n      setTimeout(() => {\n        link.click();\n      }, 100);\n    });\n  };\n\n  const handleSuccessClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setSuccessMessage(\"\");\n  };\n\n  const handleErrorClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setErrorMessage(\"\");\n  };\n\n  const resetForm = () => {\n    setFormData({\n      km: \"\",\n      met: \"\",\n      seite: \"\",\n      sonstiges: \"\",\n      punktnummer: \"\",\n      gvp: \"\",\n      photo: null,\n    });\n  };\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setFormData({\n      ...formData,\n      [name]: value,\n    });\n  };\n\n  const handlePhotoChange = (e) => {\n    const photoFile = e.target.files[0];\n    setPhoto(photoFile);\n  };\n\n  useEffect(() => {\n    openDatabase()\n      .then((db) => {\n        getAllSubmissions(db).then((data) => setSubmissions(data));\n      })\n      .catch((error) => console.error(\"Error opening database: \", error));\n  }, []);\n\n  return (\n    <>\n      <Box\n        display=\"flex\"\n        flexDirection=\"column\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        maxWidth=\"400px\"\n        margin=\"0 auto\"\n        padding=\"20px\"\n        border=\"1px solid #ccc\"\n        borderRadius=\"8px\"\n        boxShadow=\"0 0 5px rgba(0, 0, 0, 0.2)\"\n      >\n        <Attribute\n          value={streckennummer}\n          setValue={setStreckennummer}\n          name=\"Streckennummer\"\n        />\n        {/* <Attribute value={km} setValue={setKm} name=\"Km\" /> */}\n        <Typography variant=\"h6\" className={classes.title}>\n          Kilometrierung\n        </Typography>\n        <Box display=\"flex\" flexDirection=\"row\" alignItems=\"center\">\n          <TextField\n            required\n            style={{ marginRight: \"5px\" }}\n            id=\"km\"\n            name=\"km\"\n            placeholder=\"z.B. 145\"\n            value={km}\n            onChange={handleInputChange}\n            inputProps={{ style: { textAlign: \"center\" } }}\n          />\n          <Typography>, </Typography>\n          <TextField\n            required\n            style={{ marginLeft: \"5px\" }}\n            id=\"met\"\n            name=\"met\"\n            placeholder=\"02\"\n            value={met}\n            onChange={handleInputChange}\n            inputProps={{ style: { textAlign: \"center\" } }}\n          />\n        </Box>\n        <br></br>\n        <Typography variant=\"h6\" className={classes.title}>\n          Seite\n        </Typography>\n\n        <Box display=\"flex\" flexDirection=\"row\" alignItems=\"center\">\n          <FormControl component=\"fieldset\">\n            <RadioGroup\n              row\n              required\n              id=\"seite\"\n              name=\"seite\"\n              value={seite}\n              onChange={(e) => setSeite(e.target.value)}\n            >\n              <FormControlLabel value=\"L\" control={<Radio />} label=\"L\" />\n              <FormControlLabel value=\"R\" control={<Radio />} label=\"R\" />\n            </RadioGroup>\n          </FormControl>\n\n          <TextField\n            fullWidth\n            label=\"Sonstiges\"\n            id=\"sonstiges\"\n            name=\"sonstiges\"\n            value={sonstiges}\n            onChange={(e) => setSonstiges(e.target.value)}\n            inputProps={{ style: { textAlign: \"center\" } }}\n            InputLabelProps={{\n              style: { textAlign: \"center\", width: \"100%\", marginLeft: \"0\" },\n            }}\n          />\n        </Box>\n        <br></br>\n        <Attribute\n          name=\"Mastnummer\"\n          value={mastnummer}\n          setValue={setMastnummer}\n          disabled={\n            selectedVermarkungstrager !== null &&\n            selectedVermarkungstrager !== 10\n          }\n        />\n        <Typography variant=\"h6\" className={classes.title}>\n          Wenn keine Mastnummer vorhanden ist, dann Vermarkungsträger auswählen:\n        </Typography>\n        <FormControl fullWidth>\n          <InputLabel id=\"demo-simple-select-label\">\n            Vermarkungsträger\n          </InputLabel>\n          <Select\n            labelId=\"vermarkungstraeger\"\n            id=\"vermarkungstraeger\"\n            value={selectedVermarkungstrager}\n            label=\"Vermarkung\"\n            onChange={(event) => handleChange(event)}\n            disabled={!!mastnummer}\n          >\n            {vermarkungOptions.map((option) => (\n              <MenuItem key={option.value} value={option.value}>\n                {option.label}\n              </MenuItem>\n            ))}\n          </Select>\n        </FormControl>\n        <Attribute\n          name=\"Sonstiges\"\n          value={sonstiges2}\n          setValue={setSonstiges2}\n          disabled={selectedVermarkungstrager !== 70}\n        />\n        <br></br>\n        <Attribute value={gvp} setValue={setGVP} name=\"GVP Länge, mm\" />\n        <br></br>\n        <Typography variant=\"h6\" className={classes.title}>\n          Datum\n        </Typography>\n        <br></br>\n        <TextField\n          required\n          fullWidth\n          name=\"currentDate\"\n          placeholder=\"z.B. 2023-10-20\"\n          value={currentDate}\n          onChange={(e) => {\n            setCurrentDate(e.target.value);\n          }}\n          margin=\"normal\"\n          inputProps={{ style: { textAlign: \"center\" } }}\n        />\n        <br></br>\n        <Typography variant=\"h6\" className={classes.title}>\n          Foto hochladen\n        </Typography>\n\n        {/*  <Webcam\n          audio={false}\n          videoConstraints={videoConstraints}\n          ref={webcamRef}\n        /> */}\n\n        {/*  <button onClick={capture}>Foto aufnehmen</button> */}\n        {/* {photo && <img src={photo} alt=\"Captured\" />} */}\n        <input\n          ref={(el) => (reff.current = el)}\n          required\n          type=\"file\"\n          name=\"photo\"\n          accept=\"image/*;capture=camera\"\n          onChange={(e) => handlePhotoChange(e)}\n        />\n      </Box>\n      <Buttons\n        handleSubmit={handleSubmit}\n        downloadCombinedData={downloadCombinedData}\n        downloadCombinedTodayData={downloadCombinedTodayData}\n      />\n      <Snackbar\n        open={!!successMessage}\n        autoHideDuration={7000}\n        onClose={handleSuccessClose}\n      >\n        <SnackbarContent\n          message={successMessage}\n          className={classes.successSnackbar}\n        />\n      </Snackbar>\n\n      <Snackbar\n        open={!!errorMessage}\n        autoHideDuration={12000}\n        onClose={handleErrorClose}\n      >\n        <SnackbarContent\n          message={errorMessage}\n          className={classes.errorSnackbar}\n        />\n      </Snackbar>\n    </>\n  );\n};\n\nexport default MainForm;\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Button from \"./Buttons\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport MainForm from \"./MainForm\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    padding: theme.spacing(3),\r\n  },\r\n  successSnackbar: {\r\n    backgroundColor: \"#92b493\",\r\n  },\r\n  errorSnackbar: {\r\n    backgroundColor: \"#FF5722\",\r\n  },\r\n  buttonContainer: {\r\n    textAlign: \"center\",\r\n    marginTop: theme.spacing(2),\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n    padding: \"10px 20px\",\r\n    fontSize: \"1rem\",\r\n    textTransform: \"none\",\r\n  },\r\n}));\r\n\r\nfunction SimpleDialog({\r\n  row,\r\n  onClose,\r\n  selectedValue,\r\n  open,\r\n  reff,\r\n  setImportData,\r\n}) {\r\n  const classes = useStyles();\r\n  const handleClose = () => {\r\n    onClose(selectedValue);\r\n  };\r\n\r\n  return (\r\n    <Dialog\r\n      onClose={handleClose}\r\n      aria-labelledby=\"simple-dialog-title\"\r\n      open={open}\r\n    >\r\n      <Paper elevation={3} className={classes.paper}>\r\n        <MainForm row={row} reff={reff} setImportData={setImportData} />\r\n      </Paper>\r\n    </Dialog>\r\n  );\r\n}\r\n\r\nconst MainFormDialogContainer = ({\r\n  row,\r\n  reff,\r\n  selectedRowData,\r\n  setImportData,\r\n}) => {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(false);\r\n  const [selectedValue, setSelectedValue] = React.useState([]);\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = (value) => {\r\n    setOpen(false);\r\n    setSelectedValue(selectedRowData);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className={classes.buttonContainer}>\r\n        <IconButton\r\n          aria-label=\"edit\"\r\n          onClick={() => handleClickOpen()}\r\n          className={classes.button}\r\n        >\r\n          Bearbeiten\r\n          <EditIcon />\r\n        </IconButton>\r\n        <SimpleDialog\r\n          row={row}\r\n          selectedValue={selectedValue}\r\n          open={open}\r\n          onClose={handleClose}\r\n          reff={reff}\r\n          selectedRowData={selectedRowData}\r\n          setImportData={setImportData}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MainFormDialogContainer;\r\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport MainFormDialogContainer from \"./MainFormDialogContainer\";\n\nconst useStyles = makeStyles((theme) => ({\n  table: {\n    minWidth: 650,\n  },\n  tableHead: {\n    backgroundColor: \"#6a8dbb\",\n    color: theme.palette.common.white,\n  },\n  editButton: {\n    color: theme.palette.secondary.main,\n  },\n}));\n\nconst TableWrapper = ({ importData, reff, setImportData, colNames }) => {\n  console.log(colNames);\n  const classes = useStyles();\n  return (\n    <TableContainer component={Paper}>\n      <Table className={classes.table} aria-label=\"enhanced table\">\n        <TableHead>\n          <TableRow className={classes.tableHead}>\n            {colNames.map((col, idx) => (\n              <TableCell key={`keys-${idx}`} align=\"right\">\n                {col}\n              </TableCell>\n            ))}\n            <TableCell key={`keys-edit`} align=\"right\"></TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {importData.map((row, idx) => (\n            <TableRow key={idx}>\n              {colNames.map((col, idx) => (\n                <TableCell key={`values-${idx}`} align=\"right\">\n                  {row[col]}\n                </TableCell>\n              ))}\n              <TableCell key={`values-edit`} align=\"right\">\n                <MainFormDialogContainer\n                  row={row}\n                  reff={reff}\n                  setImportData={setImportData}\n                />\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n};\n\nexport default TableWrapper;\n","import { makeStyles } from \"@material-ui/core/styles\";\nimport classnames from \"classnames\";\nimport React, { useEffect, useState, useRef } from \"react\";\nimport \"./App.css\";\nimport { openDatabase } from \"./db\";\nimport CSVimport from \"./components/CSVimport\";\nimport TableWrapper from \"./components/TableWrapper\";\nimport CloudDownloadIcon from \"@material-ui/icons/CloudDownload\";\nimport { Button } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexWrap: \"wrap\",\n    width: \"100%\",\n    height: \"100%\",\n    backgroundColor: \"#f4f4f4\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    \"& > *\": {\n      padding: \"10px\",\n      display: \"flex\",\n      flexDirection: \"column\",\n    },\n  },\n}));\n\n// Function to clear the IndexedDB\nconst clearIndexedDB = async (db) => {\n  return new Promise((resolve, reject) => {\n    const transaction = db.transaction([\"submissions\"], \"readwrite\");\n    const objectStore = transaction.objectStore(\"submissions\");\n\n    const request = objectStore.clear();\n\n    request.onsuccess = () => {\n      resolve();\n    };\n\n    request.onerror = (event) => {\n      reject(event.target.error);\n    };\n  });\n};\n\nconst App = () => {\n  const classes = useStyles();\n\n  const reff = useRef(null);\n  const [showDownloadButton, setShowDownloadButton] = useState(false);\n  const [importData, setImportData] = useState([]);\n  const [colNames, setColNames] = useState([]);\n  const [showTable, setShowTable] = useState(false);\n\n  useEffect(() => {\n    const clearDatabaseEvery2Weeks = async () => {\n      try {\n        const db = await openDatabase();\n        await clearIndexedDB(db);\n        console.log(\"IndexedDB cleared.\");\n      } catch (error) {\n        console.error(\"Error clearing IndexedDB: \", error);\n      }\n    };\n\n    // Calculate the time until the next midnight\n    const now = new Date();\n    const nextMidnight = new Date(now);\n    nextMidnight.setHours(24, 0, 0, 0);\n    const timeUntilMidnight = nextMidnight - now;\n\n    // Schedule the first interval to start at the next midnight and repeat every 14 days at midnight\n    const interval = 14 * 24 * 60 * 60 * 1000 + timeUntilMidnight;\n    const intervalId = setInterval(clearDatabaseEvery2Weeks, interval);\n    console.log(interval);\n\n    // Cleanup the interval when the component unmounts\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, []);\n\n  const convertToCSV = (importData) => {\n    // Ensure data is not empty\n    if (!importData || importData.length === 0) {\n      return \"\";\n    }\n\n    // Extract column names\n    const columns = Object.keys(importData[0]);\n\n    // Create header row\n    const headerRow = columns.join(\";\");\n\n    // Create data rows\n    const dataRows = importData.map((row) =>\n      columns.map((column) => row[column]).join(\";\")\n    );\n\n    // Combine header and data rows\n    const csvContent = [headerRow, ...dataRows].join(\"\\n\");\n\n    return csvContent;\n  };\n\n  /*   const handleDownload = () => {\n    const csvContent = convertToCSV(importData);\n\n    // Create a Blob and create a download link\n    const blob = new Blob([csvContent], { type: \"text/csv\" });\n    const link = document.createElement(\"a\");\n    link.href = URL.createObjectURL(blob);\n    link.download = \"table_data.csv\";\n\n    // Simulate a click to trigger the download\n    link.click();\n  };\n */\n  return (\n    <div className={classnames(classes.root, \"appWrapper\")}>\n      <CSVimport\n        setShowTable={(value) => {\n          setShowTable(value);\n          setShowDownloadButton(value); // Set showDownloadButton based on showTable\n        }}\n        setImportData={setImportData}\n        setColNames={setColNames}\n      />\n      {showTable && (\n        <>\n          <TableWrapper\n            importData={importData}\n            reff={reff}\n            setImportData={setImportData}\n            colNames={colNames}\n          />\n          {/*    {showDownloadButton && ( // Conditionally render the download button\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              style={{ height: \"50px\", marginTop: \"10px\" }}\n              className={classes.button}\n              startIcon={<CloudDownloadIcon />}\n              onClick={handleDownload}\n            >\n              Tabelle herunterladen\n            </Button>\n          )} */}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}